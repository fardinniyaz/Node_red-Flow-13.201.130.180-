[
    {
        "id": "028e9d3a169f5453",
        "type": "tab",
        "label": "Water Consumption",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "40cf4b8ddc4940be",
        "type": "tab",
        "label": "Energy",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "55d7e6612f33eabf",
        "type": "tab",
        "label": "OEE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6922623827ba9ac4",
        "type": "tab",
        "label": "FLow Switch",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9e4d821b62b925f7",
        "type": "tab",
        "label": "Machine Process",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cb6421d77edb1435",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4fcfb5eb3f2ab4ae",
        "type": "tab",
        "label": "KSB",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "3c0e6d158f5b3c08",
        "type": "group",
        "z": "028e9d3a169f5453",
        "name": "Store to Context",
        "style": {
            "label": true
        },
        "nodes": [
            "1db47cc56271f160",
            "0a5a558fb2b137b0",
            "cff9910862916bad",
            "715cb981d9ec3707",
            "df43aaf23215f26b",
            "a44923eb2b4cd796",
            "b7b5f9d094e5352a",
            "92eaefe37489ccf4"
        ],
        "x": 34,
        "y": 39,
        "w": 532,
        "h": 262
    },
    {
        "id": "3ea0e6b5f1d881df",
        "type": "group",
        "z": "028e9d3a169f5453",
        "name": "Dashboard Data",
        "style": {
            "label": true
        },
        "nodes": [
            "76050310c80a394d",
            "e3fbf2a686b5352c",
            "ce9be82eb0c39b7a",
            "b0a57bbc42302acf",
            "51881daf6ab3c804",
            "b82f57300ea37363",
            "ee2ff28c91b6861f",
            "adcd48979b3f0ea3",
            "968196ea8af45d46",
            "7927dae16e44c5d6",
            "9dacf4c9b5d1fd90"
        ],
        "x": 34,
        "y": 339,
        "w": 652,
        "h": 262
    },
    {
        "id": "6ef26cf98acacb81",
        "type": "group",
        "z": "028e9d3a169f5453",
        "name": "LED Indicators",
        "style": {
            "label": true
        },
        "nodes": [
            "9ba6514c2ef5fae8",
            "e3c0d64879a42a3e",
            "871d2844084d28d6",
            "0c7ea0999c7c1591",
            "92f6640e99bf5c9e",
            "1ad2311446bf9d07",
            "139288461b9d9ecd"
        ],
        "x": 74,
        "y": 639,
        "w": 572,
        "h": 202
    },
    {
        "id": "75aa9304b4195775",
        "type": "group",
        "z": "028e9d3a169f5453",
        "name": "Cumul Flow",
        "style": {
            "stroke": "#3f93cf",
            "fill": "#bfdbef",
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "a21041acca6abaaf",
            "d8de8a1b7189c730",
            "37c3b9706483bddd",
            "ebcbc1a9162cfddd",
            "70608b116cb74e9c",
            "0ad8b5059ce8a4a6",
            "7936aafbcc3e3a2a",
            "b4e61c4be896eef5",
            "e59d6f7017528777",
            "8b98608ea0beb98a",
            "668b0ebba780a5f3",
            "f5742b14647679c5"
        ],
        "x": 14,
        "y": 939,
        "w": 1012,
        "h": 362
    },
    {
        "id": "5d0f97c15eb0324e",
        "type": "group",
        "z": "028e9d3a169f5453",
        "name": "Daily Consumption",
        "style": {
            "stroke": "#000000",
            "fill": "#bfc7d7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "5dd6ad4fdf95252a",
            "89954b5dd01346de",
            "9ed30864ee620966",
            "dc07b877c6e5c0d4",
            "2647c6a164744fb3",
            "b4490fa924fe5b80",
            "6e8b45480a858fe6",
            "c405cc2499f956c1",
            "267484c23b039df4",
            "4cd6382872db64fa",
            "7990df3504305ccd",
            "b3dbb404c3547bce",
            "a16ff513d35c12ca",
            "c51178e8b5812d3c",
            "836cb9fcda2d38f1",
            "00b1b6a14934e05a"
        ],
        "x": 34,
        "y": 1339,
        "w": 1212,
        "h": 362
    },
    {
        "id": "cce22110e2dbd586",
        "type": "group",
        "z": "40cf4b8ddc4940be",
        "name": "Energy Meter UI",
        "style": {
            "stroke": "#ffC000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "e241d838999c12c6",
            "87dc6cddce666765",
            "889bb5a44db097b2",
            "80638f2a379d7343",
            "fa322366673a8e12",
            "4ef2365f08abb4f7"
        ],
        "x": 54,
        "y": 119,
        "w": 532,
        "h": 202
    },
    {
        "id": "aa6f127b8db4f06b",
        "type": "group",
        "z": "40cf4b8ddc4940be",
        "name": "Absolute Motion Energy Meter",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "f9b5ea41eca4b151",
            "3378ac47676e754a",
            "47a29bd96adb8f52",
            "68b4fcda512a56c0",
            "e3561d27e0223ed4",
            "8225d148f3ecc184",
            "3f08b4119e1ed7f3",
            "ca3d7002a405ee76",
            "e4b832d087a9f827",
            "3ea5f537b5074c0e",
            "0130887cec015fde",
            "b3a990fea4bfcbf4",
            "2f9ca011c1cc8b9e",
            "606c79fec274aeb3",
            "5a511a05a10ec975",
            "0590ef0df5c523fb",
            "c637b9d207e2d823",
            "0f0accf392e5b4cd",
            "029016ccf36dcda7"
        ],
        "x": 34,
        "y": 359,
        "w": 1352,
        "h": 402
    },
    {
        "id": "3de4a8e5fec16ed8",
        "type": "group",
        "z": "40cf4b8ddc4940be",
        "name": "JE Energy Meter",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "efea353a9dae3dae",
            "d1d720ab4febaabf",
            "a76d38145e0c5997",
            "37aff543db8eb316",
            "2b7c76538de37f11",
            "58b686a510fc8d60",
            "15ea348e72b58056",
            "3e3b8ac44a2ef7ba",
            "4ba5494f8073fe30",
            "b66fb9b61de06934",
            "344a397f68402b6f",
            "411a43f420358668",
            "399316c48446e0b6",
            "3d4f3cf2d39983da",
            "f7c88c8a8e8e8069",
            "1761074a580bf070",
            "044d51871d788a0e",
            "fbe55bbac8733f07",
            "04883e5804718bb3"
        ],
        "x": 54,
        "y": 779,
        "w": 1192,
        "h": 382
    },
    {
        "id": "28caaea4bf500d9e",
        "type": "group",
        "z": "40cf4b8ddc4940be",
        "name": "Daily Consumption",
        "style": {
            "stroke": "#000000",
            "fill": "#bfc7d7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "66aea95eada30f48",
            "26fb0a1d4f62c782",
            "9577d9b9dcfb4a85",
            "aff9fe8d2ebdc483",
            "fca1b91c75a8836b",
            "419bc0293d116778",
            "3b84d93a2811d3ba",
            "3cb01eb9496fc2df",
            "4d17a333eb9da38a",
            "fe70233c55c7f817",
            "717fee0a7ffde581",
            "ac21cd4fe55c5019",
            "dacea0b32ead4dba"
        ],
        "x": 54,
        "y": 1199,
        "w": 1012,
        "h": 320
    },
    {
        "id": "d69be3c20cda8d1b",
        "type": "group",
        "z": "40cf4b8ddc4940be",
        "name": "Daily Consumption",
        "style": {
            "stroke": "#000000",
            "fill": "#bfc7d7",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "fdee96dea0047a3b",
            "f3991dc5f0199c04",
            "eb22cd1e4e44d422",
            "71879dbc307077c9",
            "aea85bb5afc0f671",
            "0ae16abdbf11d8d9",
            "bd6c0fd677f2e6e6",
            "b1dfa26899a3b099",
            "d148d3f4969b825e",
            "58d1e670a984068e",
            "af1e785084a0c4eb",
            "aa4e5a98d1ce5fb2",
            "eb3c237b610bf050"
        ],
        "x": 54,
        "y": 1559,
        "w": 1012,
        "h": 302
    },
    {
        "id": "ce495c1c3a23c0bb",
        "type": "group",
        "z": "40cf4b8ddc4940be",
        "name": "Tables",
        "style": {
            "stroke": "#ffff7f",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "0fba57e3cd638c15",
            "64385add7e9b0769",
            "c8d02dbb2df02dfc",
            "c44ba17fdbe84bdf",
            "61bf10f22aaa6000",
            "b1e8fa112a27ad1c",
            "bee3090e52202cdb",
            "f7b8f37aab1ee1bd",
            "aa8399d09d0d3b20",
            "8eac5deb628ac111",
            "5d09d11f6e78d98e",
            "e0ece47f4077a6b7",
            "feb2280af1350e14",
            "6c7f735cdf69117f",
            "e2d8ebd35c7e7c8a",
            "2f320244e0c3c80d",
            "e29df939957ac1fd",
            "7d3a84ea808e7b2b",
            "91815a367cdf971e"
        ],
        "x": 654,
        "y": 19,
        "w": 972,
        "h": 322
    },
    {
        "id": "875dd8acbf1f9402",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "Shutdown Time",
        "style": {
            "label": true,
            "stroke": "#000000",
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "e27c247e4311833d",
            "0a2e92875d2c7709",
            "1f6ff09b038e415c",
            "861e565d129be742",
            "64b980207c49283e",
            "61828b43a0feb666",
            "a7b81bd10dd5a4a7",
            "49ee5ba83c531b9b"
        ],
        "x": 774,
        "y": 239,
        "w": 392,
        "h": 202
    },
    {
        "id": "f42c612394f66a69",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "GAUGE",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "95a01976251f5bb8",
            "4f28581a762c1def",
            "d558a22774cc5eab",
            "c91ebb7e704a1c37",
            "ac2c223d6587fd4a",
            "62889a042256517a",
            "fd6bc5a976f782c7",
            "cf7730b59646edf0",
            "d444118e6aa78f1f"
        ],
        "x": 694,
        "y": 19,
        "w": 572,
        "h": 202
    },
    {
        "id": "0950ade5d982d6ff",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "OEE",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "6702dc66f5bd7c6c",
            "4e3e7fe5b909b663",
            "67ab6ff33039fbe5",
            "fd7912a0dd290af8",
            "1f8540c919c89c6e",
            "073a1f6706801dde",
            "809e2db64409b1e4",
            "ce74a922127d8102",
            "1e9b4f37fe044c1e",
            "842a47108682c180",
            "b761355f021c6afd",
            "32c243ecd0a09be7",
            "69b94051e3979457",
            "0c4997979c5976a5",
            "5e33dc2a27a478ba",
            "efa15fb2990218d9",
            "b5c97b7115ccd91a",
            "cb8b1b321fd6193a"
        ],
        "x": 34,
        "y": 19,
        "w": 572,
        "h": 522
    },
    {
        "id": "c0271382b6dca19e",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "Unplanned Time",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "c9461d54dd83f180",
            "e951c3ed5df2e670",
            "3af72093016a856d",
            "8ee66768d70ffd63",
            "806de01c271c12af",
            "33af2b36c60ac4b8",
            "04115b17e8da1192",
            "db5f7979e23d4a95",
            "89fb7e86b9e12876",
            "8555341694376891",
            "e18a1fe5292c0f21",
            "56d92074d0c236c4",
            "57cd673ba084d019",
            "9adb62a8d09f59a3",
            "68e3d1ef082936ec"
        ],
        "x": 1294,
        "y": 19,
        "w": 712,
        "h": 322
    },
    {
        "id": "addd420705e01323",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "OEE to DB",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "24fb177890e71e8e",
            "81ed3532d5bc2761",
            "ac8f77625d96c25d",
            "5ef8a1a2dae7dd7c",
            "d5c0b47aded5db9d",
            "d3d2d427e3324fee",
            "323d2583a4ff5ed2",
            "1029807760995099",
            "ecca488a6fd1337d",
            "c1753a22296ca877",
            "5074e18b421f3acf",
            "f72964651788e3ae",
            "1d578377e711c173",
            "129033b3ddfb84d3",
            "1d9708dc5d421b39",
            "2bc31b6342a86e01",
            "d020e6ca5457dee8",
            "ebb32ba3702e8303"
        ],
        "x": 14,
        "y": 719,
        "w": 1252,
        "h": 322
    },
    {
        "id": "51b77ddd44e9c253",
        "type": "group",
        "z": "6922623827ba9ac4",
        "name": "Read Instantaneous Flow",
        "style": {
            "label": true
        },
        "nodes": [
            "c145a65f1cbcb278",
            "71d0710297ce39e7",
            "2b84af567e746afb"
        ],
        "x": 294,
        "y": 39,
        "w": 392,
        "h": 122
    },
    {
        "id": "26f73d64f6541465",
        "type": "group",
        "z": "6922623827ba9ac4",
        "name": "Accumulated Flow Calculation",
        "style": {
            "label": true
        },
        "nodes": [
            "7ec9d97c620ed651",
            "5b40e1db88bbdf8c",
            "f514e1c0f905e6f2",
            "2340a16c8b01d321",
            "3105995e71e0bd88",
            "5486f30b69ab8489"
        ],
        "x": 154,
        "y": 199,
        "w": 612,
        "h": 182
    },
    {
        "id": "404d0e960ba1dc1f",
        "type": "group",
        "z": "6922623827ba9ac4",
        "name": "Database",
        "style": {
            "label": true
        },
        "nodes": [
            "f98f1d4a07061ee4",
            "018b339afe4357a3",
            "dfc4762c48a6fa70",
            "8b7fec75b3ea71b2"
        ],
        "x": 74,
        "y": 419,
        "w": 792,
        "h": 222
    },
    {
        "id": "f6b40d85e743a91b",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "Planned Losses",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "766a752ea20bb955",
            "6a733a3988b1cb3f",
            "c5fdbda21a763a2c",
            "659317e702399550",
            "6c9dedb596e759fc",
            "888c6fa927589485",
            "e09f91118653b195",
            "16f585c5eff3ebc9",
            "ab09bab39ac0414a",
            "48e06e52afc781cd"
        ],
        "x": 134,
        "y": 1299,
        "w": 1052,
        "h": 262
    },
    {
        "id": "113c5bc7c65ee1cc",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "Unplanned Losses",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "4b07c2b1b12f9b06",
            "953582c570954ae8",
            "c8c0e9119b34193c",
            "1e7b031d62f3280d",
            "17ec12b935f0ecdc",
            "c67842980b932a45",
            "c3ad0bf333f89845",
            "b2413e0de2ec72b6",
            "0cc3c8b13f4379e9",
            "d098ac7abd827f36"
        ],
        "x": 134,
        "y": 1579,
        "w": 1072,
        "h": 262
    },
    {
        "id": "f49524b1156cf00e",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "Pareto",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "dc50c5b4b68ab89e",
            "3659c7ae2bc7f5f7",
            "9f791508a4fa8c6a",
            "16b9d393a9960d69",
            "aa5face6980abce7",
            "da20207083a2c6cc",
            "fe319d98444401b8",
            "1b229b007ba4b830",
            "910b243f20f25a34"
        ],
        "x": 134,
        "y": 1919,
        "w": 952,
        "h": 262
    },
    {
        "id": "e57bf05312ac778a",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "Top 5 Unplanned",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "05d9744a919b857b",
            "50f7c88ddc20a58e",
            "3806335efe653679",
            "c6d7a690fae68461",
            "29a0068c7e1138dc",
            "3aca8feac320cceb",
            "669346430bf90b53"
        ],
        "x": 154,
        "y": 2299,
        "w": 1112,
        "h": 142
    },
    {
        "id": "70fee6b106d443f3",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "Top Planned",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "56f8caca20d9f329",
            "6140e73f4bf070ac",
            "17296843ec487979",
            "268026e08e2028c9",
            "9f9dd093a8e994de",
            "6e3ae79c6b9fc224",
            "d7fdf920dcf892f9"
        ],
        "x": 154,
        "y": 2519,
        "w": 1152,
        "h": 162
    },
    {
        "id": "a3c66d4185befa8f",
        "type": "group",
        "z": "55d7e6612f33eabf",
        "name": "",
        "style": {
            "stroke": "#000000",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "63d05085ce035c10",
            "109561c2d1e53d16",
            "09d45d6ac40b648a",
            "56f164767a1f01bb",
            "c68e2c61a6f4d7d4",
            "165042027572c88f",
            "228462d7775de3db",
            "4a5fdfd342d99e04",
            "9549b845a60d6a4b",
            "17c2df0db03a2c5e",
            "75b3750ab5591e3c",
            "3fd59fc4faf865e5",
            "2f407d7d5f4887c2",
            "c7257743b1c5dbff",
            "2b19838c7580f607",
            "9e2104c7865a77ec",
            "92940a1ff7d5c152",
            "815569fba6222d2c",
            "1a25eabd676a92c8",
            "79f5264f394eabbc",
            "8185252a10699999",
            "691408a996c4d6fb",
            "8e3b93a794582897",
            "d645064ffae12741",
            "8bb7ed2b22739a3b",
            "db007bc536372a42",
            "5f221a2fec70f0c2",
            "488b0310e399b30a",
            "fc5159ea09f1707d",
            "c8f3a30f97729f5f",
            "375abcbd8466ce42",
            "dc41773bf927adcc",
            "1c3e9a525aea82e3",
            "7da6f19deb191668",
            "787b3df6f1629344",
            "c625aa7e0ea22abb",
            "4ac9bdf7d57196ec",
            "a9fa3676c8e011a2",
            "0e8792950bc9a9aa",
            "e75d645173c6a1a7"
        ],
        "x": 1294,
        "y": 359,
        "w": 1172,
        "h": 562
    },
    {
        "id": "42d2c8e06ee97b15",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Save to Context",
        "style": {
            "stroke": "#b797cf",
            "label": true
        },
        "nodes": [
            "dcfcfffab8ad381e",
            "e1738dc8b4d4f3ff",
            "c4632f066fadc072"
        ],
        "x": 68,
        "y": 53,
        "w": 924,
        "h": 754
    },
    {
        "id": "1be41bfb03a3b383",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "5f6c662ab3aa669b",
            "1928bd3aedd7bfba",
            "4f3115d94159b6ce",
            "585e906aeb4b2062"
        ],
        "x": 534,
        "y": 859,
        "w": 712,
        "h": 142
    },
    {
        "id": "c5c5d6bbc7362491",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "124e65a93e8ff8ff",
            "de10c15ca37b5d7d",
            "12b197014b40df29",
            "90de30eb259a99f1",
            "1635787a014fbcf3",
            "80b8eaccfc0f411f",
            "36660cbe1d9cb823",
            "535197766c6e65ad",
            "cf3ac8a5310e5482",
            "4093c0203da34418",
            "f861bd103a5522e3",
            "96ab568f46edd394",
            "d1c9508a556b3280",
            "18f9d5949bf75297",
            "96f2ba61a8b584de",
            "7d960e0a73597c41",
            "7749ccf11f62e0c7",
            "c4f759d4ae2041b3"
        ],
        "x": 14,
        "y": 3119,
        "w": 912,
        "h": 402
    },
    {
        "id": "d02383e94e219d36",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f28983014f1a2dc",
            "b47f8386cc83ed22",
            "e6ca95a1760b5766",
            "bdb0d662718acdb2",
            "9d6fc4a1802e9dc2",
            "fda5f5b3436dd186",
            "532b4f1502309d38",
            "e861f8a3cc5d4eb9",
            "8ba5753f51c443e3",
            "e044818ea809772c",
            "cdb5b07a2e50b3c1",
            "5ec19074d2883167",
            "6502bd4e688a6bd1"
        ],
        "x": 14,
        "y": 859,
        "w": 512,
        "h": 522
    },
    {
        "id": "f417980e4201f509",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6283ef19963039c0",
            "f1faa70bf1f18b22",
            "9fa91f3a18b746de",
            "2c1107898f8f9788",
            "9e046dec848af17e",
            "76b1186fe316bfac",
            "8c6ba61e7edbf195",
            "7f084d0dd9278afd",
            "125e4be6794201e5",
            "3e001d861478b5c0",
            "8d549d78b34cdbec",
            "73bf289de370e027"
        ],
        "x": 14,
        "y": 1419,
        "w": 452,
        "h": 482
    },
    {
        "id": "964d7c3fb11a2e95",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "f480fc709da67e3d",
            "24af0ef449b142c4",
            "4ac712fc5252fc9e",
            "5dc20b8e0c7ef1dd"
        ],
        "x": 474,
        "y": 1499,
        "w": 642,
        "h": 142
    },
    {
        "id": "410eaebcc7fe632c",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dabedf0a8c23a4af",
            "c4de13be4bd0d885",
            "2d5592b6aeb0771c",
            "c8ac5d6bc2e573fb",
            "b6dfb2b8295e507a",
            "68fdbd31d827c2ee",
            "a3b93213eab1028b",
            "ad9467ae62cebac4",
            "94511fa99dc2bbd3",
            "24d895ccb29106e9",
            "594806ec4d1fc5e2",
            "06bfc371eb21679c"
        ],
        "x": 14,
        "y": 1939,
        "w": 452,
        "h": 482
    },
    {
        "id": "d675fac31ae93fea",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "1f454f2dcef6011a",
            "a5ded0533818dd82",
            "c423e9f4936733a6",
            "401cca24edf1a9d8"
        ],
        "x": 474,
        "y": 2019,
        "w": 612,
        "h": 142
    },
    {
        "id": "9687b13c30b407e1",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "afc3cab9c81b73a7",
            "52e247f56bb2abd9",
            "757176de3140a7a3",
            "c796e0ca830b65b3",
            "fe7bbcf8ba3a65f0",
            "6350608441faef53",
            "928dd49137398212",
            "da9f71b3e9e7d689",
            "c97605570775976a",
            "ce1d041a42f33ed2",
            "a24e07ec5f65fdce",
            "b3408edc82270c86",
            "8502cb83a777cd54"
        ],
        "x": 14,
        "y": 2479,
        "w": 1108,
        "h": 482
    },
    {
        "id": "dcfcfffab8ad381e",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "42d2c8e06ee97b15",
        "name": "Holding Registers",
        "style": {
            "stroke": "#ffff00",
            "label": true
        },
        "nodes": [
            "a9fbbd32442f8cca",
            "97281017c9f923a0",
            "b788adfb096118f5",
            "5086bedb603cb11e",
            "cc6fc3ae65fa2bb8",
            "f01c38f25460f5b2",
            "391c66f356138ea0",
            "adbfa094f2ff5982",
            "3d60dbc3560ccefb",
            "4f356be1385e7850",
            "93738164dad620be",
            "ff72c4068dde1af4",
            "d15d169327e075ff",
            "a8b21cf9ce5a240d",
            "81e9e22276df4abb",
            "7eaf991b83fa6b55",
            "7ff581d4614fe97f",
            "ec558adedd6d2418",
            "f0e700f2928b46f2",
            "f4a528d55c4bf7c6",
            "368052f67f59de76",
            "d1bf379febb9ca8b",
            "4e99947bff98853a",
            "5d904419efb40643",
            "09e23be23dde6ceb",
            "bad470461c456bf1",
            "c0df6fb1fb14c10d",
            "69923f8abf2f73dc",
            "c017df6d088584f2",
            "2fd4343883d6ef64",
            "4fd64a13732ec3e4",
            "beb776cea4a50442"
        ],
        "x": 94,
        "y": 79,
        "w": 872,
        "h": 502
    },
    {
        "id": "e1738dc8b4d4f3ff",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "42d2c8e06ee97b15",
        "name": "Alarms",
        "style": {
            "stroke": "#001f60",
            "label": true
        },
        "nodes": [
            "e1b08b7445db5653",
            "8ab81393195ed7eb",
            "a0c2b733a5bfc2ed",
            "494855ba78f5d50b"
        ],
        "x": 94,
        "y": 599,
        "w": 872,
        "h": 82
    },
    {
        "id": "c4632f066fadc072",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "42d2c8e06ee97b15",
        "name": "Output Status",
        "style": {
            "stroke": "#92d04f",
            "label": true
        },
        "nodes": [
            "16a11446366bd08b",
            "d4d74499d0aa8520",
            "4674217c13431770",
            "53e1cc01d04b8b3c"
        ],
        "x": 94,
        "y": 699,
        "w": 872,
        "h": 82
    },
    {
        "id": "b3408edc82270c86",
        "type": "group",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "Mqtt",
        "style": {
            "stroke": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "bfd7d2470f0ba57b",
            "fcf13b8ade4f9662",
            "c78f485209248f41",
            "c06a3f8be61d19c1"
        ],
        "x": 454,
        "y": 2559,
        "w": 642,
        "h": 142
    },
    {
        "id": "4037aa9824eaf062",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Water_IOT",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "31c9c60208bab385",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "newserver",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ba0433f4a1c3d1eb",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.1.57",
        "port": "3306",
        "db": "Water_IOT",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "c36118d89231e820",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#004bad",
            "primary": "#ffffff",
            "bgPage": "#ffffff",
            "groupBg": "#ffffff",
            "groupOutline": "#cdf6fe"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "b7f3cf648fd1b434",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "a4e4222eff7d4445",
        "type": "ui-page",
        "name": "Water Dashboard",
        "ui": "b7f3cf648fd1b434",
        "path": "/water",
        "icon": "home",
        "layout": "grid",
        "theme": "c36118d89231e820",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "66744047c1c0bacf",
        "type": "ui-group",
        "name": "Group 7",
        "page": "a4e4222eff7d4445",
        "width": 5,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a5025da6860a8f46",
        "type": "ui-group",
        "name": "Group 2",
        "page": "a4e4222eff7d4445",
        "width": 5,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0e52e24279476a46",
        "type": "ui-group",
        "name": "Group 1",
        "page": "a4e4222eff7d4445",
        "width": 2,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f7669899d011c7e3",
        "type": "ui-group",
        "name": "Group 4",
        "page": "a4e4222eff7d4445",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "119f1ae0363c4b4b",
        "type": "ui-group",
        "name": "Group 8",
        "page": "a4e4222eff7d4445",
        "width": 6,
        "height": 1,
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9348171b7a68b50e",
        "type": "ui-group",
        "name": "Group 9",
        "page": "a4e4222eff7d4445",
        "width": 12,
        "height": 1,
        "order": 6,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ea380550660ffbb0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "123456",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a7775962898c810b",
        "type": "ui-page",
        "name": "Energy Vyom",
        "ui": "b7f3cf648fd1b434",
        "path": "/page4",
        "icon": "home",
        "layout": "grid",
        "theme": "c36118d89231e820",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "91d552a2cc1894bb",
        "type": "ui-group",
        "name": "Group 2",
        "page": "a7775962898c810b",
        "width": 5,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "eee475b1b5fe3e5f",
        "type": "ui-group",
        "name": "Group 10",
        "page": "a7775962898c810b",
        "width": 12,
        "height": 1,
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "42831c22369bb13a",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Energy_IOT",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "6cbf753a184c0e83",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "JE_Energy",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "ef53b3175bfc4718",
        "type": "ui-page",
        "name": "Energy JE",
        "ui": "b7f3cf648fd1b434",
        "path": "/page5",
        "icon": "home",
        "layout": "grid",
        "theme": "c36118d89231e820",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "58509b8f7aabbcd9",
        "type": "ui-group",
        "name": "Group 12",
        "page": "ef53b3175bfc4718",
        "width": 5,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "e62640c7b7c1da3e",
        "type": "ui-group",
        "name": "Group 13",
        "page": "ef53b3175bfc4718",
        "width": 12,
        "height": 1,
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "eaccea2c082b8fd0",
        "type": "ui-group",
        "name": "Group 14",
        "page": "ef53b3175bfc4718",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "636b2b18226b6725",
        "type": "ui-group",
        "name": "Group 15",
        "page": "a7775962898c810b",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f9c8d9d099ef3c0f",
        "type": "ui-group",
        "name": "Group 16",
        "page": "a7775962898c810b",
        "width": 7,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "15d1a3f2871fcd4b",
        "type": "ui-group",
        "name": "Group 17",
        "page": "ef53b3175bfc4718",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "52126a3fe99bfbfc",
        "type": "ui-group",
        "name": "Group 18",
        "page": "ef53b3175bfc4718",
        "width": 7,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "511ad6509db9b9c7",
        "type": "ui-spacer",
        "group": "91d552a2cc1894bb",
        "name": "spacer",
        "tooltip": "",
        "order": 1,
        "width": 1,
        "height": 1,
        "className": ""
    },
    {
        "id": "5adf58f2e9857013",
        "type": "ui-spacer",
        "group": "58509b8f7aabbcd9",
        "name": "spacer",
        "tooltip": "",
        "order": 1,
        "width": 1,
        "height": 1,
        "className": ""
    },
    {
        "id": "d50d0c9f.31e858",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "fb79b5093b5e05ec",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "d50d0c9f.31e858",
        "clientid": "noderedserver",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "10918f088766112a",
        "type": "ui-theme",
        "name": "Dark",
        "colors": {
            "surface": "#5f5959",
            "primary": "#0094ce",
            "bgPage": "#000000",
            "groupBg": "#ffffff",
            "groupOutline": "#fff5f5"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a45a41da6860ce4e",
        "type": "ui-page",
        "name": "OEE",
        "ui": "b7f3cf648fd1b434",
        "path": "/OEE",
        "icon": "home",
        "layout": "grid",
        "theme": "c36118d89231e820",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "1a7923b295955b5d",
        "type": "ui-group",
        "name": "Group 1",
        "page": "a45a41da6860ce4e",
        "width": 4,
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "65630edffb558002",
        "type": "ui-group",
        "name": "Group 2",
        "page": "a45a41da6860ce4e",
        "width": 4,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "05b7886182ed7bff",
        "type": "ui-group",
        "name": "Group 3",
        "page": "a45a41da6860ce4e",
        "width": 4,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "82b6df8563e666cf",
        "type": "ui-group",
        "name": "Group 4",
        "page": "a45a41da6860ce4e",
        "width": 4,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "cffef3faccffbe3a",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "OEE",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "ff03da4a14f7deff",
        "type": "ui-group",
        "name": "Group 5",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 7,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "2bcedee2b1e94811",
        "type": "ui-group",
        "name": "Group 7",
        "page": "a45a41da6860ce4e",
        "width": 12,
        "height": 1,
        "order": 9,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "15de81e4b21c7524",
        "type": "ui-group",
        "name": "Group 12",
        "page": "a45a41da6860ce4e",
        "width": 6,
        "height": 1,
        "order": 10,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9b49a2c5d5e2a93c",
        "type": "ui-group",
        "name": "Group 23",
        "page": "a7775962898c810b",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "513294d33bfbec69",
        "type": "ui-group",
        "name": "Group 6",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 8,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5fb217260d9c348d",
        "type": "ui-spacer",
        "group": "ff03da4a14f7deff",
        "name": "spacer",
        "order": 2,
        "width": 4,
        "height": 1,
        "className": ""
    },
    {
        "id": "5fb21f4ed2f4f2e3",
        "type": "ui-spacer",
        "group": "513294d33bfbec69",
        "name": "spacer",
        "order": 2,
        "width": 4,
        "height": 1,
        "className": ""
    },
    {
        "id": "cc1f224031314102",
        "type": "ui-group",
        "name": "Group 13",
        "page": "a45a41da6860ce4e",
        "width": 6,
        "height": 1,
        "order": 11,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d1cf79e2d9bc8f56",
        "type": "ui-group",
        "name": "Group 8",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 6,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "59698d88fae320a7",
        "type": "ui-group",
        "name": "Group 9",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "604cb9b111f76e8a",
        "type": "ui-spacer",
        "group": "59698d88fae320a7",
        "name": "spacer",
        "order": 2,
        "width": 2,
        "height": 1,
        "className": ""
    },
    {
        "id": "604cb838a7610afa",
        "type": "ui-spacer",
        "group": "d1cf79e2d9bc8f56",
        "name": "spacer",
        "order": 2,
        "width": 2,
        "height": 1,
        "className": ""
    },
    {
        "id": "79408791acbd8130",
        "type": "modbus-client",
        "name": "DVP12SE",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.239",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "13753e35400c3fa9",
        "type": "ui-page",
        "name": "Flow Switch",
        "ui": "b7f3cf648fd1b434",
        "path": "/page6",
        "icon": "home",
        "layout": "grid",
        "theme": "10918f088766112a",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 6,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "e46597166eb2f909",
        "type": "ui-group",
        "name": "Group 10",
        "page": "13753e35400c3fa9",
        "width": 12,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "25de850168ffbe68",
        "type": "ui-group",
        "name": "Group 9",
        "page": "a45a41da6860ce4e",
        "width": 6,
        "height": 1,
        "order": 12,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5075a7d8e4947586",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "0404f620fb95519c",
        "type": "ui-group",
        "name": "Group 10",
        "page": "a45a41da6860ce4e",
        "width": 6,
        "height": 1,
        "order": 13,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "c1ed5948ef423032",
        "type": "ui-group",
        "name": "Pareto Chart",
        "page": "a45a41da6860ce4e",
        "width": 12,
        "height": 1,
        "order": 14,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6e4667f37eedab14",
        "type": "ui-group",
        "name": "Top Planned Losses",
        "page": "a45a41da6860ce4e",
        "width": 6,
        "height": 1,
        "order": 15,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "b93144e266b84c0a",
        "type": "ui-group",
        "name": "Top 5 Unplanned Losses",
        "page": "a45a41da6860ce4e",
        "width": 6,
        "height": 1,
        "order": 16,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "f9efd5999726a1f2",
        "type": "ui-group",
        "name": "Group 17",
        "page": "a45a41da6860ce4e",
        "width": 12,
        "height": 1,
        "order": 17,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0ac538a39d87e106",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Ind_engg",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "b1ab8b7ee8dac0a5",
        "type": "ui-page",
        "name": "Machine Process",
        "ui": "b7f3cf648fd1b434",
        "path": "/Machine",
        "icon": "home",
        "layout": "grid",
        "theme": "c36118d89231e820",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d5dd1799fe74810b",
        "type": "ui-group",
        "name": "Group 1",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d3e467f74bd28ca0",
        "type": "ui-group",
        "name": "Group 2",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 5,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "a4d147d17f966596",
        "type": "ui-page",
        "name": "Charts",
        "ui": "b7f3cf648fd1b434",
        "path": "/charts",
        "icon": "home",
        "layout": "notebook",
        "theme": "5075a7d8e4947586",
        "breakpoints": [
            {
                "name": "Default",
                "px": 0,
                "cols": 3
            },
            {
                "name": "Tablet",
                "px": 576,
                "cols": 6
            },
            {
                "name": "Small Desktop",
                "px": 768,
                "cols": 9
            },
            {
                "name": "Desktop",
                "px": 1024,
                "cols": 12
            }
        ],
        "order": 7,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "7f237ce29a6a24c2",
        "type": "ui-group",
        "name": "Group 3",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 6,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "be853953ba43af6f",
        "type": "ui-group",
        "name": "Group 4",
        "page": "b1ab8b7ee8dac0a5",
        "width": 2,
        "height": 1,
        "order": 2,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "0166851d4aa00eb7",
        "type": "ui-group",
        "name": "Group 5",
        "page": "b1ab8b7ee8dac0a5",
        "width": 2,
        "height": 1,
        "order": 3,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "24fd345344f36802",
        "type": "ui-group",
        "name": "Group 6",
        "page": "b1ab8b7ee8dac0a5",
        "width": 2,
        "height": 1,
        "order": 4,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9b1e88b27ae1de24",
        "type": "ui-group",
        "name": "Group 7",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 11,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "b888ef9647775b4c",
        "type": "ui-group",
        "name": "Group 8",
        "page": "b1ab8b7ee8dac0a5",
        "width": 2,
        "height": 1,
        "order": 8,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "fac2ad649387de9f",
        "type": "ui-group",
        "name": "Group 9",
        "page": "b1ab8b7ee8dac0a5",
        "width": 2,
        "height": 1,
        "order": 9,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "52f1056208436336",
        "type": "ui-group",
        "name": "Group 10",
        "page": "b1ab8b7ee8dac0a5",
        "width": 2,
        "height": 1,
        "order": 7,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "fb55ffd51d3e34eb",
        "type": "ui-group",
        "name": "Group 11",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 12,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8104398c681a6662",
        "type": "ui-group",
        "name": "Group 14",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 13,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "e8fec061e5d14096",
        "type": "ui-group",
        "name": "Group 15",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 10,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "89159c2fb6c924db",
        "type": "ui-group",
        "name": "Group 16",
        "page": "b1ab8b7ee8dac0a5",
        "width": 6,
        "height": 1,
        "order": 14,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "897c1e7895de15d8",
        "type": "ui-group",
        "name": "Group 20",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 19,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "3827df99aea3b700",
        "type": "ui-group",
        "name": "Group 24",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 18,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "5137f65501696ca0",
        "type": "ui-group",
        "name": "Group 25",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 26,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "232df039cd26ad94",
        "type": "ui-group",
        "name": "Group 26",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 28,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "fe39032fd1b497f7",
        "type": "ui-group",
        "name": "Group 27",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 24,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "8e1ceca219849b97",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "Process",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "d9ca2781810d1bec",
        "type": "ui-group",
        "name": "Group 21",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 22,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "740942dcc256b295",
        "type": "ui-group",
        "name": "Group 22",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 29,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9c90f50ab5e80b6a",
        "type": "ui-group",
        "name": "Group 23",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 23,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "55c31ee9dbb34ebc",
        "type": "ui-group",
        "name": "Group 28",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 27,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "7226ecce32b199a2",
        "type": "ui-group",
        "name": "Group 29",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 25,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "edb4776cadb2a593",
        "type": "ui-group",
        "name": "Group 30",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 20,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "357dacbe34c50d2e",
        "type": "ui-group",
        "name": "Group 31",
        "page": "a45a41da6860ce4e",
        "width": 2,
        "height": 1,
        "order": 21,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "703fe2be46ffae05",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "64px"
        }
    },
    {
        "id": "35ee7753b5b3599b",
        "type": "ui-theme",
        "name": "Theme Name",
        "colors": {
            "surface": "#16234b",
            "primary": "#1d44b9",
            "bgPage": "#ecf2f8",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        }
    },
    {
        "id": "1c6e6163b86b217f",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "b13caa9bd8852776",
        "type": "ui-group",
        "name": "Group 1",
        "page": "a4d147d17f966596",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": false,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "de766f091410f1ac",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "5f0410d3f06f7681",
        "type": "mqtt-broker",
        "name": "",
        "broker": "0a8926ff283644b5894dedaed07f99a2.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "de766f091410f1ac",
        "clientid": "KSB_test",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1db47cc56271f160",
        "type": "mqtt in",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "",
        "topic": "devices/Device01/telemetry",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "31c9c60208bab385",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 80,
        "wires": [
            [
                "0a5a558fb2b137b0",
                "ced40abf422048d0"
            ]
        ]
    },
    {
        "id": "0a5a558fb2b137b0",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "Store to Context",
        "func": "var payload = msg.payload;\n\n// Ensure the payload is an object\nif (typeof payload === 'object' && payload !== null) {\n    // Iterate over the keys in the object\n    for (var tagName in payload) {\n        if (payload.hasOwnProperty(tagName)) {\n            var value = payload[tagName]; // Extract the value\n\n            // Ensure the value is a number before processing\n            if (typeof value === 'number') {\n                // Round the value to two decimal places\n                var roundedValue = parseFloat(value.toFixed(2));\n\n                // Store the rounded value in a flow variable using the tag name as the key\n                flow.set(tagName, roundedValue);\n\n                // Debug output (optional)\n                //node.warn(`Stored ${roundedValue} in flow variable with tag ${tagName}`);\n            } else {\n                // Debug if the value is not a number\n                //    node.warn(`Value for tag ${tagName} is not a number: ${value}`);\n            }\n        }\n    }\n} else {\n    // Debug if the payload is not an object\n    //node.warn(\"Unexpected payload format: \" + JSON.stringify(payload));\n}\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cff9910862916bad",
        "type": "mqtt in",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "",
        "topic": "office/level",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "31c9c60208bab385",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 140,
        "wires": [
            [
                "715cb981d9ec3707",
                "ced40abf422048d0"
            ]
        ]
    },
    {
        "id": "715cb981d9ec3707",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "Store to Context",
        "func": "// var Top_Tank_mm = msg.payload.TopTank_mm;\n// flow.set('Top_Tank_mm', Top_Tank_mm);\n\n// var Underground_Tank_mm = msg.payload.UnderTank_mm;\n// flow.set('Underground_Tank_mm', Underground_Tank_mm);\n\n// var TopTankLitres = msg.payload.TopTankLitres;\n// flow.set('TopTankLitres', TopTankLitres);\n\n// var UnderTankLitres = msg.payload.UnderTankLitres;\n// flow.set('UnderTankLitres', UnderTankLitres);\n\n// var CumulFlow = flow.get('FlowMeter/cumuflow');\n\n// msg.payload = {\n//     \"Top_Tank_mm\": Top_Tank_mm,\n//     \"Underground_Tank_mm\": Underground_Tank_mm,\n//     CumulFlow: CumulFlow,\n//     TopTankLitres: TopTankLitres,\n//     UnderTankLitres: UnderTankLitres\n\n\n// };\n// return msg;\n\n\n// Top Tank values\nvar Top_Tank_mm = msg.payload.TopTank_mm;\nflow.set('Top_Tank_mm', Top_Tank_mm);\n\nvar TopTankLitres = msg.payload.TopTank_litres;\nflow.set('TopTankLitres', TopTankLitres);\n\nvar TopTankPercentage = msg.payload.TopTank_percentage;\nflow.set('TopTankPercentage', TopTankPercentage);\n\n// Underground Tank values\nvar Underground_Tank_mm = msg.payload.UnderTank_mm;\nflow.set('Underground_Tank_mm', Underground_Tank_mm);\n\nvar UnderTankLitres = msg.payload.UnderTank_litres;\nflow.set('UnderTankLitres', UnderTankLitres);\n\nvar UnderTankPercentage = msg.payload.UnderTank_percentage;\nflow.set('UnderTankPercentage', UnderTankPercentage);\n\nvar motorStatus = msg.payload.motor_status;\nflow.set('motor_status', motorStatus);\n\nvar valveStatus = msg.payload.Valve_status;\nflow.set('Valve_status', valveStatus);\n\nvar autoRunning = msg.payload.Auto_Running;\nflow.set('auto_Running', autoRunning);\n\n// Flow meter cumulative flow\nvar CumulFlow = flow.get('FlowMeter/cumuflow');\n\n// Prepare payload for debug or further use\nmsg.payload = {\n    \"Top_Tank_mm\": Top_Tank_mm,\n    \"Underground_Tank_mm\": Underground_Tank_mm,\n    \"CumulFlow\": CumulFlow,\n    \"TopTankLitres\": TopTankLitres,\n    \"UnderTankLitres\": UnderTankLitres,\n    \"TopTankPercentage\": TopTankPercentage,\n    \"UnderTankPercentage\": UnderTankPercentage,\n    \"Auto_Running\": autoRunning,\n    \"motor_status\": motorStatus,\n    \"Valve_status\": valveStatus\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "76050310c80a394d",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "Overhead Tank",
        "func": "\nmsg.payload = flow.get('TopLevel_percentage');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "ce9be82eb0c39b7a"
            ]
        ]
    },
    {
        "id": "e3fbf2a686b5352c",
        "type": "inject",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "76050310c80a394d",
                "51881daf6ab3c804"
            ]
        ]
    },
    {
        "id": "51881daf6ab3c804",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "Under Tank",
        "func": "msg.payload = flow.get('UndergroundLevel_percentage');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "b0a57bbc42302acf"
            ]
        ]
    },
    {
        "id": "0c7ea0999c7c1591",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "6ef26cf98acacb81",
        "name": "Auto Running",
        "func": "msg.payload = flow.get('auto_Running');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 680,
        "wires": [
            [
                "9ba6514c2ef5fae8"
            ]
        ]
    },
    {
        "id": "92f6640e99bf5c9e",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "6ef26cf98acacb81",
        "name": "Pump Status",
        "func": "msg.payload = flow.get('motor_status');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 740,
        "wires": [
            [
                "e3c0d64879a42a3e"
            ]
        ]
    },
    {
        "id": "1ad2311446bf9d07",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "6ef26cf98acacb81",
        "name": "Valve Status",
        "func": "msg.payload = flow.get('Valve_status');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 800,
        "wires": [
            [
                "871d2844084d28d6"
            ]
        ]
    },
    {
        "id": "b82f57300ea37363",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "Cumul Flow Graph",
        "func": "// var y = {CumulFlow: flow.get('FlowMeter/cumuflow')};\n\n// msg.payload = y;\n\n// return msg;\n\nlet cumulFlow = flow.get('FlowMeter/cumuflow');\nflow.set('cumulFlow', cumulFlow);\n\nlet a = new Date().toISOString();\n\nlet data = { x: a, y: cumulFlow};\n\nmsg.payload = data;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "9dacf4c9b5d1fd90",
        "type": "debug",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 520,
        "wires": []
    },
    {
        "id": "df43aaf23215f26b",
        "type": "mqtt in",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "",
        "topic": "office/FlowMeter/ground",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "31c9c60208bab385",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "a44923eb2b4cd796",
                "ced40abf422048d0"
            ]
        ]
    },
    {
        "id": "a44923eb2b4cd796",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "Store to Context",
        "func": "var dailyConsumption = msg.payload.dailyConsumption;\nflow.set('dailyConsumption', dailyConsumption);\n\nmsg.payload = { dailyConsumption: dailyConsumption};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "adcd48979b3f0ea3",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "Daily Consumption",
        "func": "// var a = Number(flow.get(\"FlowMeter/cumuflow\")) || 0;\n\n// // Multiply by 1000\n// var b = a * 1000;\n\n// // Get stored previous value, defaulting to 0 if not set\n// var previous = flow.get(\"previousvalue\") || 0;\n\n// // Save the current value for future use\n// flow.set(\"previousvalue\", b);\n\n// // Calculate the difference\n// var difference = b - previous;\n// flow.set(\"flow_difference\", difference);\n\n// // Create a JSON object for the output\n// // msg.payload = { dailyconsumption: difference };\n// // return msg;\n\nlet dailyConsumption = flow.get('dailyConsumption');\nlet c = new Date().toISOString();\n\nlet data = { x: c, dailyConsumption: dailyConsumption};\n\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "7927dae16e44c5d6"
            ]
        ]
    },
    {
        "id": "968196ea8af45d46",
        "type": "inject",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "adcd48979b3f0ea3"
            ]
        ]
    },
    {
        "id": "ee2ff28c91b6861f",
        "type": "inject",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "10 mins",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 180,
        "y": 500,
        "wires": [
            [
                "b82f57300ea37363"
            ]
        ]
    },
    {
        "id": "a21041acca6abaaf",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "Time Range filter",
        "func": "// var days = parseInt(msg.payload, 10);\n\n// if ([1, 3, 7].includes(days)) {\n//     msg.topic = `SELECT timestamp, cumulFlow FROM water_dashboard WHERE timestamp >= NOW() - INTERVAL ${days} DAY;`;\n// } else {\n//     msg.topic = \"\";\n//     msg.payload = \"Invalid input. Please send 1, 3, or 7.\";\n// }\n\n// return msg;\n\nvar input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_cf', timeFilter);\n\nmsg.topic = `SELECT timestamp, cumulFlow FROM CumulFlow WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n\n\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, cumulFlow FROM CumulFlow WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, cumulFlow FROM CumulFlow WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, cumulFlow FROM CumulFlow WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n} else if (input === 15) {\n    msg.topic = `SELECT timestamp, cumulFlow FROM CumulFlow WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n} else if (input === 60) {\n    msg.topic = `SELECT timestamp, cumulFlow FROM CumulFlow WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n} else if (input === 12) {\n    msg.topic = `SELECT timestamp, cumulFlow FROM CumulFlow WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1040,
        "wires": [
            [
                "e59d6f7017528777"
            ]
        ]
    },
    {
        "id": "d8de8a1b7189c730",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "Insert Cumul Flow from context to DB",
        "func": "// let CumulFlow = flow.get('FlowMeter/cumuflow');\n\n// let dailyConsumption = flow.get('flow_difference');\n\n// msg.topic = \"INSERT INTO water_dashboard (CumulFlow, dailyConsumption) VALUES (?, ?)\";\n// msg.payload = [CumulFlow, dailyConsumption];\n\n// return msg;\n\nlet CumulFlow = flow.get('FlowMeter/cumuflow') || 0;\n\nnode.warn(`CumulFlow: ${CumulFlow}`);\n\nmsg.topic = \"INSERT INTO CumulFlow (cumulFlow) VALUES (?)\";\nmsg.payload = [CumulFlow];\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "e59d6f7017528777"
            ]
        ]
    },
    {
        "id": "37c3b9706483bddd",
        "type": "inject",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "d8de8a1b7189c730"
            ]
        ]
    },
    {
        "id": "70608b116cb74e9c",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "Cumul Flow Graph",
        "func": "// let dbData = msg.payload;\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// let graphData = dbData.map(row => ({\n//     x: row.timestamp,  // Ensure column name matches DB\n//     y: row.cumulFlow\n// }));\n\n// msg.payload = graphData;\n// return msg;\n\n\nlet dbData = msg.payload;\nlet timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Keep the original graph data structure unchanged\nlet graphData = dbData.map(row => ({\n    x: row.timestamp,  // Ensure column name matches DB\n    y: row.cumulFlow\n}));\n\n// Attach the selected time range to the message for reference\nmsg.timeRange = timeFilter;\n\nmsg.payload = graphData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1120,
        "wires": [
            [
                "ebcbc1a9162cfddd"
            ]
        ]
    },
    {
        "id": "5dd6ad4fdf95252a",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "Time Range filter",
        "func": "// var days = parseInt(msg.payload, 10);\n\n// if ([1, 3, 7].includes(days)) {\n//     msg.topic = `SELECT timestamp, cumulFlow FROM water_dashboard WHERE timestamp >= NOW() - INTERVAL ${days} DAY;`;\n// } else {\n//     msg.topic = \"\";\n//     msg.payload = \"Invalid input. Please send 1, 3, or 7.\";\n// }\n\n// return msg;\n\nvar input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_dc', timeFilter);\n\n\nmsg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 1 DAY AND dailyConsumption IS NOT NULL;`;\n\n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 1 DAY AND dailyConsumption IS NOT NULL;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 3 DAY AND dailyConsumption IS NOT NULL;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 7 DAY AND dailyConsumption IS NOT NULL;`;\n}else if (timeFilter === 30) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 30 DAY AND dailyConsumption IS NOT NULL;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1440,
        "wires": [
            [
                "c405cc2499f956c1"
            ]
        ]
    },
    {
        "id": "89954b5dd01346de",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "Daily Consumption Graph",
        "func": "\nlet dbData = msg.payload;\nlet timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Keep the original graph data structure unchanged\nlet graphData = dbData.map(row => ({\n    Timestamp: row.timestamp,  // Ensure column name matches DB\n    \"Daily Consumption\": row.dailyConsumption\n}));\n\n// Attach the selected time range to the message for reference\nmsg.timeRange = timeFilter;\n\nmsg.payload = graphData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1660,
        "wires": [
            [
                "00b1b6a14934e05a"
            ]
        ]
    },
    {
        "id": "9ed30864ee620966",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "Insert Consumption from context to DB",
        "func": "// let CumulFlow = flow.get('FlowMeter/cumuflow');\n\n// let dailyConsumption = flow.get('flow_difference');\n\n// msg.topic = \"INSERT INTO water_dashboard (CumulFlow, dailyConsumption) VALUES (?, ?)\";\n// msg.payload = [CumulFlow, dailyConsumption];\n\n// return msg;\n\nlet dailyConsumption = flow.get('dailyConsumption') || 0;\n\n\n\nmsg.topic = \"INSERT INTO dailyConsumption (dailyConsumption) VALUES (?)\";\nmsg.payload = [dailyConsumption];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "c405cc2499f956c1"
            ]
        ]
    },
    {
        "id": "dc07b877c6e5c0d4",
        "type": "inject",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 250,
        "y": 1600,
        "wires": [
            [
                "9ed30864ee620966"
            ]
        ]
    },
    {
        "id": "0ad8b5059ce8a4a6",
        "type": "delay",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 980,
        "wires": [
            [
                "a21041acca6abaaf"
            ]
        ]
    },
    {
        "id": "7936aafbcc3e3a2a",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1000,
        "wires": [
            [
                "ebcbc1a9162cfddd"
            ]
        ]
    },
    {
        "id": "b4490fa924fe5b80",
        "type": "delay",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "5dd6ad4fdf95252a"
            ]
        ]
    },
    {
        "id": "6e8b45480a858fe6",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1420,
        "wires": [
            [
                "2647c6a164744fb3"
            ]
        ]
    },
    {
        "id": "b4e61c4be896eef5",
        "type": "ui-button-group",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "",
        "group": "f7669899d011c7e3",
        "order": 3,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "a21041acca6abaaf",
                "0ad8b5059ce8a4a6",
                "7936aafbcc3e3a2a"
            ]
        ]
    },
    {
        "id": "7927dae16e44c5d6",
        "type": "ui-table",
        "z": "028e9d3a169f5453",
        "d": true,
        "g": "3ea0e6b5f1d881df",
        "group": "9348171b7a68b50e",
        "name": "",
        "label": "Daily Consumption",
        "order": 1,
        "width": 12,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [
            {
                "title": "Daily Consumption",
                "key": "dailyConsumption",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "center"
            }
        ],
        "mobileBreakpoint": "lg",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 570,
        "y": 560,
        "wires": [
            [
                "9dacf4c9b5d1fd90"
            ]
        ]
    },
    {
        "id": "ebcbc1a9162cfddd",
        "type": "ui-chart",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "group": "f7669899d011c7e3",
        "name": "",
        "label": "Cummulative Flow",
        "order": 1,
        "chartType": "line",
        "category": "Cumul Flow",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#2b00ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "label {     font-size: 28px !important;  /* Huge labels */     color: #000000 !important;  /* Black text */     font-weight: bold;     }",
        "interpolation": "linear",
        "x": 910,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "2647c6a164744fb3",
        "type": "ui-chart",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "group": "119f1ae0363c4b4b",
        "name": "",
        "label": "Daily Consumption",
        "order": 1,
        "chartType": "bar",
        "category": "Daily Consumption",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "500",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0008ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "label {     font-size: 40px !important;  /* Bigger labels */     color: #000000 !important;   /* Black text */     font-weight: bold; }",
        "interpolation": "linear",
        "x": 1130,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "ce9be82eb0c39b7a",
        "type": "ui-gauge",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "Top",
        "group": "66744047c1c0bacf",
        "order": 1,
        "width": 5,
        "height": 9,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Overhead Tank Cap - 5102 L",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "15",
                "color": "#07cee9"
            },
            {
                "from": "35",
                "color": "#7bbaea"
            },
            {
                "from": "50",
                "color": "#00a4db"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "text-color: white",
        "x": 510,
        "y": 380,
        "wires": []
    },
    {
        "id": "b0a57bbc42302acf",
        "type": "ui-gauge",
        "z": "028e9d3a169f5453",
        "g": "3ea0e6b5f1d881df",
        "name": "UG",
        "group": "a5025da6860a8f46",
        "order": 1,
        "width": 5,
        "height": 9,
        "gtype": "gauge-tank",
        "gstyle": "needle",
        "title": "Underground Tank Cap - 6080 L",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#a8f5ff"
            },
            {
                "from": "15",
                "color": "#16d1e9"
            },
            {
                "from": "35",
                "color": "#7bbaea"
            },
            {
                "from": "50",
                "color": "#00a4db"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 510,
        "y": 440,
        "wires": []
    },
    {
        "id": "db3521d86a02fbed",
        "type": "ui-template",
        "z": "028e9d3a169f5453",
        "group": "",
        "page": "",
        "ui": "b7f3cf648fd1b434",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "/* General Page Styling */\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4; /* Light background */\n    color: black !important; /* Global black text */\n    text-align: center;\n    margin: 0;\n    padding: 0;\n}\n\n/* Dashboard Container */\n.dashboard-container {\n    max-width: 1200px;\n    margin: auto;\n    padding: 20px;\n    background: #ffffff; /* White background */\n    border-radius: 10px;\n    box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);\n    color: black !important;\n}\n\n/* LED Indicators */\n.status {\n    display: flex;\n    justify-content: center;\n    gap: 50px;\n    margin: 20px 0;\n}\n\n.led {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    border: 5px solid black;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 16px;\n    text-transform: uppercase;\n    color: black !important; /* Black text */\n}\n\n/* LED Colors */\n.led.green {\n    background-color: green;\n}\n\n.led.red {\n    background-color: red;\n}\n\n/* Tank Status Styling */\n.tank-status {\n    display: flex;\n    justify-content: space-around;\n    margin: 20px 0;\n}\n\n.tank {\n    width: 45%;\n    padding: 10px;\n    text-align: center;\n    border: 2px solid #007BFF;\n    border-radius: 10px;\n    background: #f9f9f9;\n    color: black !important;\n    font-weight: normal;\n    font-size: 18px;\n}\n\n/* Tank Level Bars */\n.tank-bar {\n    width: 100%;\n    background-color: #ddd;\n    height: 40px;\n    border-radius: 10px;\n    overflow: hidden;\n    margin-top: 10px;\n    position: relative;\n}\n\n/* Tank Level Indicator */\n.tank-level {\n    height: 100%;\n    text-align: center;\n    line-height: 40px;\n    color: black !important; /* Black text */\n    background-color: #cfcfcf !important; /* Light gray background */\n    font-weight: normal !important;\n    transition: width 0.5s ease-in-out;\n    position: absolute;\n    left: 0;\n    top: 0;\n}\n\n/* Dropdown Container */\n.dropdown-container {\n    margin: 20px 0;\n}\n\n/* Updated Widget Label Styling */\nlabel, \n.nr-dashboard-card-title, \n.nr-dashboard-gauge text, \n.nr-dashboard-chart text {\n    font-size: 22px !important;\n    font-weight: bold !important;\n    color: black !important; /* Black text */\n}\n\n/* Dropdown Styling */\n.select-container {\n    position: relative;\n    display: inline-block;\n}\n\nselect {\n    padding: 10px;\n    font-size: 16px;\n    border-radius: 5px;\n    border: 1px solid #007BFF;\n    cursor: pointer;\n    background-color: #ffffff;\n    color: black !important;\n    outline: none;\n    transition: all 0.3s ease-in-out;\n}\n\nselect:hover {\n    border-color: #0056b3;\n}\n\n/* Button Styling */\n.button-container {\n    margin-top: 20px;\n}\n\nbutton {\n    padding: 10px 15px;\n    font-size: 16px;\n    background-color: #007BFF;\n    color: black !important;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    transition: background 0.3s ease-in-out;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\n/* Charts */\n.chart-container {\n    margin-top: 20px;\n}\n\ncanvas {\n    max-width: 100%;\n    border-radius: 5px;\n}\n\n/* Chart Text in Black */\n.nr-dashboard-chart text {\n    fill: black !important; /* Ensures text inside charts is black */\n}\n\n/* Ensures all text in widgets is black */\n.nr-dashboard-text, \n.nr-dashboard-gauge text, \n.nr-dashboard-chart text, \n.nr-dashboard-label, \n.nr-dashboard-table, \n.nr-dashboard-group {\n    color: black !important;\n}\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "site:style",
        "className": "",
        "x": 880,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "9ba6514c2ef5fae8",
        "type": "ui-led",
        "z": "028e9d3a169f5453",
        "g": "6ef26cf98acacb81",
        "name": "AUTO",
        "group": "0e52e24279476a46",
        "order": 1,
        "width": 2,
        "height": 3,
        "label": "AUTO",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "states": [
            {
                "value": "0",
                "valueType": "num",
                "color": "#ff0000"
            },
            {
                "value": "1",
                "valueType": "num",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": false,
        "showGlow": false,
        "x": 570,
        "y": 680,
        "wires": []
    },
    {
        "id": "e3c0d64879a42a3e",
        "type": "ui-led",
        "z": "028e9d3a169f5453",
        "g": "6ef26cf98acacb81",
        "name": "Pump",
        "group": "0e52e24279476a46",
        "order": 3,
        "width": 2,
        "height": 3,
        "label": "PUMP",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "states": [
            {
                "value": "0",
                "valueType": "num",
                "color": "#ff0000"
            },
            {
                "value": "1",
                "valueType": "num",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": false,
        "showGlow": false,
        "x": 550,
        "y": 740,
        "wires": []
    },
    {
        "id": "871d2844084d28d6",
        "type": "ui-led",
        "z": "028e9d3a169f5453",
        "g": "6ef26cf98acacb81",
        "name": "Valve",
        "group": "0e52e24279476a46",
        "order": 2,
        "width": 2,
        "height": 3,
        "label": "VALVE",
        "labelPlacement": "left",
        "labelAlignment": "center",
        "states": [
            {
                "value": "0",
                "valueType": "num",
                "color": "#ff0000"
            },
            {
                "value": "1",
                "valueType": "num",
                "color": "#00ff00"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showBorder": false,
        "showGlow": false,
        "x": 550,
        "y": 800,
        "wires": []
    },
    {
        "id": "e59d6f7017528777",
        "type": "mysql",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "mydb": "4037aa9824eaf062",
        "name": "",
        "x": 510,
        "y": 1100,
        "wires": [
            [
                "70608b116cb74e9c",
                "8b98608ea0beb98a"
            ]
        ]
    },
    {
        "id": "c405cc2499f956c1",
        "type": "mysql",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "mydb": "4037aa9824eaf062",
        "name": "",
        "x": 510,
        "y": 1480,
        "wires": [
            [
                "4cd6382872db64fa",
                "a16ff513d35c12ca"
            ]
        ]
    },
    {
        "id": "139288461b9d9ecd",
        "type": "inject",
        "z": "028e9d3a169f5453",
        "g": "6ef26cf98acacb81",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "0c7ea0999c7c1591",
                "92f6640e99bf5c9e",
                "1ad2311446bf9d07"
            ]
        ]
    },
    {
        "id": "b7b5f9d094e5352a",
        "type": "mqtt in",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "",
        "topic": "local/rpiserver2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "ea380550660ffbb0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "92eaefe37489ccf4"
            ]
        ]
    },
    {
        "id": "92eaefe37489ccf4",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "3c0e6d158f5b3c08",
        "name": "Store to Context",
        "func": "var a = msg.payload.Valve_status;\nflow.set('Valve_status', a);\n\nvar b = msg.payload.motor_status;\nflow.set('motor_status', b);\n\nvar c = msg.payload.auto_Running;\nflow.set('auto_Running', c);\n\nmsg.payload = {a, b, c};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "267484c23b039df4",
        "type": "ui-button-group",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "",
        "group": "119f1ae0363c4b4b",
        "order": 3,
        "width": 4,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 30 days",
                "icon": "",
                "value": "30",
                "valueType": "num",
                "color": "#20a2f3"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 1380,
        "wires": [
            [
                "b4490fa924fe5b80",
                "6e8b45480a858fe6",
                "5dd6ad4fdf95252a"
            ]
        ]
    },
    {
        "id": "210af43464826d5d",
        "type": "ui-template",
        "z": "028e9d3a169f5453",
        "group": "f7669899d011c7e3",
        "page": "",
        "ui": "",
        "name": "",
        "order": 2,
        "width": 1,
        "height": null,
        "head": "",
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;\">\n    <button class=\"nr-dashboard-button\"\n        onclick=\"window.location.href='http://13.201.130.80:1880/cumulFlow.csv';\"\n        style=\"width: 100%; height: 100%; font-size: 18px; font-weight: bold; \n               color: white; background-color: #007bff; border: none; border-radius: 8px;\n               cursor: pointer; transition: background-color 0.3s ease;\">\n        DOWNLOAD\n    </button>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 400,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "101df6795ec51f14",
        "type": "ui-template",
        "z": "028e9d3a169f5453",
        "group": "119f1ae0363c4b4b",
        "page": "",
        "ui": "",
        "name": "",
        "order": 2,
        "width": 1,
        "height": "",
        "head": "",
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;\">\n    <button class=\"nr-dashboard-button\"\n        onclick=\"window.location.href='http://13.201.130.80:1880/dailyConsumption.csv';\"\n        style=\"width: 100%; height: 100%; font-size: 18px; font-weight: bold; \n               color: white; background-color: #007bff; border: none; border-radius: 8px;\n               cursor: pointer; transition: background-color 0.3s ease;\">\n        DOWNLOAD\n    </button>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "8b98608ea0beb98a",
        "type": "csv",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, cumulFlow ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 630,
        "y": 1180,
        "wires": [
            [
                "668b0ebba780a5f3"
            ]
        ]
    },
    {
        "id": "668b0ebba780a5f3",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "function 14",
        "func": "msg.path = '/home/ubuntu/.node-red/public/cumulFlow.csv';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1180,
        "wires": [
            [
                "f5742b14647679c5"
            ]
        ]
    },
    {
        "id": "f5742b14647679c5",
        "type": "file",
        "z": "028e9d3a169f5453",
        "g": "75aa9304b4195775",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 940,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "4cd6382872db64fa",
        "type": "csv",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, dailyConsumption",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 650,
        "y": 1560,
        "wires": [
            [
                "7990df3504305ccd"
            ]
        ]
    },
    {
        "id": "7990df3504305ccd",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "function 15",
        "func": "msg.path = '/home/ubuntu/.node-red/public/dailyConsumption.csv';\n// return msg;\n\n// msg.path = \"/data/static/files/cumulFlow.csv\";\n\n// msg.path = \"D:\\new\\cumulFlow.csv\";\n\n// msg.topic = \"open-file\";  // This triggers the UI to handle the download\n// msg.payload = \"open\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1560,
        "wires": [
            [
                "b3dbb404c3547bce"
            ]
        ]
    },
    {
        "id": "b3dbb404c3547bce",
        "type": "file",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 960,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "c51178e8b5812d3c",
        "type": "debug",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 1500,
        "wires": []
    },
    {
        "id": "a16ff513d35c12ca",
        "type": "function",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "name": "Clean timestamp",
        "func": "// Extract the payload\nlet data = msg.payload;\n\n// Process the array safely\nmsg.payload = data.map(({ timestamp, dailyConsumption }) => {\n    let date = new Date(timestamp); // Convert to Date object\n    let formattedDate = (`0${date.getMonth() + 1}`).slice(-2) + '-' + (`0${date.getDate()}`).slice(-2); // Format MM-DD\n    return { x: formattedDate, y: dailyConsumption }; // Rename keys\n});\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1480,
        "wires": [
            [
                "c51178e8b5812d3c",
                "2647c6a164744fb3"
            ]
        ]
    },
    {
        "id": "836cb9fcda2d38f1",
        "type": "mysql",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "mydb": "4037aa9824eaf062",
        "name": "",
        "x": 630,
        "y": 1660,
        "wires": [
            [
                "89954b5dd01346de"
            ]
        ]
    },
    {
        "id": "83e9603c03f17e8c",
        "type": "inject",
        "z": "028e9d3a169f5453",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 1660,
        "wires": [
            [
                "0597fdfe1323c574"
            ]
        ]
    },
    {
        "id": "0597fdfe1323c574",
        "type": "function",
        "z": "028e9d3a169f5453",
        "name": "Daily Consumption",
        "func": "msg.topic = \"SELECT * FROM dailyConsumption ORDER BY id DESC LIMIT 1\";\n// msg.topic = \"SELECT * FROM dailyConsumption\";\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1660,
        "wires": [
            [
                "836cb9fcda2d38f1"
            ]
        ]
    },
    {
        "id": "00b1b6a14934e05a",
        "type": "ui-table",
        "z": "028e9d3a169f5453",
        "g": "5d0f97c15eb0324e",
        "group": "9348171b7a68b50e",
        "name": "",
        "label": "Daily Consumption",
        "order": 2,
        "width": 12,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [
            {
                "title": "Daily Consumption",
                "key": "dailyConsumption",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "center"
            }
        ],
        "mobileBreakpoint": "lg",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1090,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "ced40abf422048d0",
        "type": "debug",
        "z": "028e9d3a169f5453",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 160,
        "wires": []
    },
    {
        "id": "e241d838999c12c6",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "cce22110e2dbd586",
        "name": "function 1",
        "func": "msg.payload = {\n    voltage: parseFloat((220 + Math.random() * 10).toFixed(2)),   // Random between 220-230V\n    current: parseFloat((5 + Math.random() * 2).toFixed(2)),      // Random between 5-7A\n    power: parseFloat((1000 + Math.random() * 200).toFixed(2)),   // Random between 1000-1200W\n    pf: parseFloat((0.8 + Math.random() * 0.2).toFixed(2))        // Random between 0.8-1.0\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "87dc6cddce666765",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "cce22110e2dbd586",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "e241d838999c12c6",
                "80638f2a379d7343",
                "fa322366673a8e12"
            ]
        ]
    },
    {
        "id": "889bb5a44db097b2",
        "type": "ui-template",
        "z": "40cf4b8ddc4940be",
        "g": "cce22110e2dbd586",
        "group": "91d552a2cc1894bb",
        "page": "",
        "ui": "",
        "name": "",
        "order": 2,
        "width": 3,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div class=\"energy-meter\">\n    <div class=\"header\">\n      <h2>VYOM Energy Meter</h2>\n      <div class=\"status-indicator\"></div>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Voltage</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.voltage ?? 0 }}</span>\n      <span class=\"unit\">V</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Current</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.current ?? 0 }}</span>\n      <span class=\"unit\">A</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Power</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.power ?? 0 }}</span>\n      <span class=\"unit\">kW</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Energy</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.energy ?? 0 }}</span>\n      <span class=\"unit\">kWh</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">PF</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.pf ? msg.payload.pf.toFixed(2) : \"0.00\" }}</span>\n      <span class=\"unit invisible\">W</span> <!-- Invisible unit for alignment -->\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {};\n</script>\n\n<style>\n@font-face {\n  font-family: 'DSEG7 Classic';\n  src: url('/fonts/DSEG7Classic-Bold.ttf') format('truetype');\n}\n\n.energy-meter {\n  width: 400px;\n  padding: 20px 20px 15px 20px;\n  background: linear-gradient(to bottom, #444, #222);\n  border: 2px solid #ccc;\n  border-radius: 10px;\n  box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.3);\n  text-align: left;\n  position: relative;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n}\n\nh2 {\n  font-size: 22px;\n  color: #fff;\n  background: #333;\n  padding: 12px 30px 12px 15px; /* Smaller background width, shifted left */\n  border-radius: 8px;\n}\n\n.parameter {\n  display: flex;\n  align-items: center;\n  font-size: 18px;\n  margin: 12px 0;\n}\n\n.label {\n  flex: 0 0 80px;\n  color: #ccc;\n  font-weight: bold;\n}\n\n.triangle {\n  color: #ccc;\n  margin-right: 8px;\n}\n\n/* .value {\n  background: #700000;\n  color: #ff3b3b;\n  font-family: 'DSEG7 Classic', sans-serif;\n  font-size: 32px;\n  padding: 10px 16px;\n  border-radius: 8px;\n  flex: 1;\n  text-align: center;\n  margin-right: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n} */\n\n.value {\n  background: #700000;\n  color: #ff3b3b;\n  font-family: 'DSEG7 Classic', sans-serif;\n  font-size: 32px;\n  padding: 10px 16px;\n  border-radius: 8px;\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n  /* 🔹 Fix width & height for uniformity */\n  width: 200px; /* Adjust as needed */\n  height: 50px; /* Adjust as needed */\n  min-width: 150px;\n  min-height: 50px;\n  max-width: 2000px;\n  max-height: 50px;\n}\n\n\n.unit {\n  color: #ccc;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.invisible {\n  visibility: hidden;\n}\n\n.status-indicator {\n  width: 16px; /* Increased size */\n  height: 16px; /* Increased size */\n  background: #555;\n  border-radius: 50%;\n  animation: blink 1s infinite;\n}\n\n@keyframes blink {\n  0% { background: #555; }\n  50% { background: #3bff3b; }\n  100% { background: #555; }\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4909e54d29f21d7a",
        "type": "mqtt in",
        "z": "40cf4b8ddc4940be",
        "name": "",
        "topic": "devices/Device01/telemetry",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "31c9c60208bab385",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 40,
        "wires": [
            [
                "524f2556dfbad554"
            ]
        ]
    },
    {
        "id": "524f2556dfbad554",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "name": "Store to Context",
        "func": "var payload = msg.payload;\n\n// Ensure the payload is an object\nif (typeof payload === 'object' && payload !== null) {\n    // Iterate over the keys in the object\n    for (var tagName in payload) {\n        if (payload.hasOwnProperty(tagName)) {\n            var value = payload[tagName]; // Extract the value\n\n            // Ensure the value is a number before processing\n            if (typeof value === 'number') {\n                // Round the value to two decimal places\n                var roundedValue = parseFloat(value.toFixed(2));\n\n                // Store the rounded value in a flow variable using the tag name as the key\n                flow.set(tagName, roundedValue);\n\n                // Debug output (optional)\n                //node.warn(`Stored ${roundedValue} in flow variable with tag ${tagName}`);\n            } else {\n                // Debug if the value is not a number\n                //    node.warn(`Value for tag ${tagName} is not a number: ${value}`);\n            }\n        }\n    }\n} else {\n    // Debug if the payload is not an object\n    //node.warn(\"Unexpected payload format: \" + JSON.stringify(payload));\n}\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "80638f2a379d7343",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "cce22110e2dbd586",
        "name": "function 2",
        "func": "msg.payload = {\n    voltage: flow.get('Energy_Meter/30006_Average_Voltage_LN'),   // Random between 220-230V\n    current: flow.get('Energy_Meter/30022_Average_Current'),\n    power: flow.get('Energy_Meter/30042_Total_kW'),      // Random between 5-7A\n    energy: flow.get('Energy_Meter/30058_Total_Net_kWh'),   // Random between 1000-1200W\n    pf: flow.get('Energy_Meter/30054_Average_PF')       // Random between 0.8-1.0\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 160,
        "wires": [
            [
                "889bb5a44db097b2"
            ]
        ]
    },
    {
        "id": "fa322366673a8e12",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "cce22110e2dbd586",
        "name": "function 4",
        "func": "msg.payload = {\n    voltage: flow.get('Je_Energy/Max_Voltage_L_to_N_Average'),   // Random between 220-230V\n    current: flow.get('Je_Energy/Current_Average'),\n    power: flow.get('Je_Energy/Active_Power_TOTAL'),      // Random between 5-7A\n    energy: flow.get('Je_Energy/Active_Energy_Delivered_plus_Received'),   // Random between 1000-1200W\n    pf: flow.get('Je_Energy/PowerFactor')       // Random between 0.8-1.0\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 280,
        "wires": [
            [
                "4ef2365f08abb4f7"
            ]
        ]
    },
    {
        "id": "4ef2365f08abb4f7",
        "type": "ui-template",
        "z": "40cf4b8ddc4940be",
        "g": "cce22110e2dbd586",
        "group": "58509b8f7aabbcd9",
        "page": "",
        "ui": "",
        "name": "",
        "order": 2,
        "width": 4,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div class=\"energy-meter\">\n    <div class=\"header\">\n      <h2>JE Energy Meter</h2>\n      <div class=\"status-indicator\"></div>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Voltage</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.voltage ?? 0 }}</span>\n      <span class=\"unit\">V</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Current</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.current ?? 0 }}</span>\n      <span class=\"unit\">A</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Power</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.power ?? 0 }}</span>\n      <span class=\"unit\">kW</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">Energy</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.energy ?? 0 }}</span>\n      <span class=\"unit\">kWh</span>\n    </div>\n    <div class=\"parameter\">\n      <span class=\"label\">PF</span>\n      <span class=\"triangle\">▶</span>\n      <span class=\"value\">{{ msg?.payload?.pf ? msg.payload.pf.toFixed(2) : \"0.00\" }}</span>\n      <span class=\"unit invisible\">W</span> <!-- Invisible unit for alignment -->\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {};\n</script>\n\n<style>\n@font-face {\n  font-family: 'DSEG7 Classic';\n  src: url('/fonts/DSEG7Classic-Bold.ttf') format('truetype');\n}\n\n.energy-meter {\n  width: 400px;\n  padding: 20px 20px 15px 20px;\n  background: linear-gradient(to bottom, #444, #222);\n  border: 2px solid #ccc;\n  border-radius: 10px;\n  box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.3);\n  text-align: left;\n  position: relative;\n}\n\n.header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n}\n\nh2 {\n  font-size: 22px;\n  color: #fff;\n  background: #333;\n  padding: 12px 30px 12px 15px; /* Smaller background width, shifted left */\n  border-radius: 8px;\n}\n\n.parameter {\n  display: flex;\n  align-items: center;\n  font-size: 18px;\n  margin: 12px 0;\n}\n\n.label {\n  flex: 0 0 80px;\n  color: #ccc;\n  font-weight: bold;\n}\n\n.triangle {\n  color: #ccc;\n  margin-right: 8px;\n}\n\n/* .value {\n  background: #700000;\n  color: #ff3b3b;\n  font-family: 'DSEG7 Classic', sans-serif;\n  font-size: 32px;\n  padding: 10px 16px;\n  border-radius: 8px;\n  flex: 1;\n  text-align: center;\n  margin-right: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n} */\n\n.value {\nbackground: #700000;\ncolor: #ff3b3b;\nfont-family: 'DSEG7 Classic', sans-serif;\nfont-size: 32px;\npadding: 10px 16px;\nborder-radius: 8px;\ntext-align: center;\ndisplay: flex;\nalign-items: center;\njustify-content: center;\n\n/* 🔹 Fix width & height for uniformity */\nwidth: 200px; /* Adjust as needed */\nheight: 50px; /* Adjust as needed */\nmin-width: 150px;\nmin-height: 50px;\nmax-width: 2000px;\nmax-height: 50px;\n}\n\n.unit {\n  color: #ccc;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.invisible {\n  visibility: hidden;\n}\n\n.status-indicator {\n  width: 16px; /* Increased size */\n  height: 16px; /* Increased size */\n  background: #555;\n  border-radius: 50%;\n  animation: blink 1s infinite;\n}\n\n@keyframes blink {\n  0% { background: #555; }\n  50% { background: #3bff3b; }\n  100% { background: #555; }\n}\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 500,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "0fba57e3cd638c15",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "function 5",
        "func": "let voltage = flow.get('Energy_Meter/30006_Average_Voltage_LN');   \nlet current = flow.get('Energy_Meter/30022_Average_Current');\nlet power = flow.get('Energy_Meter/30042_Total_kW');     \nlet energy = flow.get('Energy_Meter/30058_Total_Net_kWh');   \nlet pf = flow.get('Energy_Meter/30054_Average_PF'); \n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n// let c = new Date().toISOString();\n\nlet data = { \n    timestamp: istTime, \n    voltage: voltage, \n    current: current, \n    power: power, \n    energy: energy, \n    pf: pf\n};\n\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 120,
        "wires": [
            [
                "aa8399d09d0d3b20"
            ]
        ]
    },
    {
        "id": "64385add7e9b0769",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "0fba57e3cd638c15"
            ]
        ]
    },
    {
        "id": "f9b5ea41eca4b151",
        "type": "mysql",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "mydb": "42831c22369bb13a",
        "name": "",
        "x": 870,
        "y": 540,
        "wires": [
            [
                "ca3d7002a405ee76",
                "0590ef0df5c523fb"
            ]
        ]
    },
    {
        "id": "3378ac47676e754a",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Insert voltage from context to DB",
        "func": "\n\nlet voltage = flow.get('Energy_Meter/30006_Average_Voltage_LN') || 0;\n\n\n\nmsg.topic = \"INSERT INTO voltage (voltage) VALUES (?)\";\nmsg.payload = [voltage];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 482.8000183105469,
        "y": 549.8000183105469,
        "wires": [
            [
                "f9b5ea41eca4b151"
            ]
        ]
    },
    {
        "id": "47a29bd96adb8f52",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 640,
        "wires": [
            [
                "3378ac47676e754a",
                "b3a990fea4bfcbf4",
                "2f9ca011c1cc8b9e",
                "606c79fec274aeb3",
                "5a511a05a10ec975"
            ]
        ]
    },
    {
        "id": "68b4fcda512a56c0",
        "type": "ui-button-group",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "",
        "group": "9b49a2c5d5e2a93c",
        "order": 3,
        "width": 5,
        "height": 1,
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 440,
        "wires": [
            [
                "e3561d27e0223ed4",
                "3f08b4119e1ed7f3"
            ]
        ]
    },
    {
        "id": "e3561d27e0223ed4",
        "type": "delay",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 420,
        "wires": [
            [
                "8225d148f3ecc184"
            ]
        ]
    },
    {
        "id": "8225d148f3ecc184",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Time Range filter",
        "func": "// var input = msg.payload;  \n// var timeFilter = parseInt(input, 10);\n// var parameter = flow.get('parameter');\n\n// // Set reset flag to destroy the chart before updating\n// msg.reset = true;  \n\n// if (timeFilter === 1) {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n// } else if (timeFilter === 3) {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n// } else if (timeFilter === 7) {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n// } else if (input === \"15\") {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n// } else if (input === \"60\") {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n// } else if (input === \"12\") {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n// } else {\n//     msg.topic = \"\";\n//     msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n// }\n\n// return msg;\n\n\nvar input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_EM', timeFilter);\n  \nvar parameter = flow.get('parameter');  // Retrieve selected parameter from flow context\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\n// Allowed parameters list\nconst allowedParameters = [\"pf\", \"voltage\", \"power\", \"energy\", \"current\"];\n\n// Check if the selected parameter is valid\nif (!allowedParameters.includes(parameter)) {\n    msg.payload = \"Invalid parameter. Please select 'pf', 'voltage', 'power', 'energy', or 'current'.\";\n    return msg;\n}\n\n// Define the time condition based on selection\nlet timeCondition = \"\";\nif (timeFilter === 1) {\n    timeCondition = \"NOW() - INTERVAL 1 DAY\";\n} else if (timeFilter === 3) {\n    timeCondition = \"NOW() - INTERVAL 3 DAY\";\n} else if (timeFilter === 7) {\n    timeCondition = \"NOW() - INTERVAL 7 DAY\";\n} else if (input === 15) {\n    timeCondition = \"NOW() - INTERVAL 15 MINUTE\";\n} else if (input === 60) {\n    timeCondition = \"NOW() - INTERVAL 1 HOUR\";\n} else if (input === 12) {\n    timeCondition = \"NOW() - INTERVAL 12 HOUR\";\n} else {\n    msg.payload = \"Invalid time range. Please select 15, 60, 12, 1, 3, or 7.\";\n    return msg;\n}\n\n// Construct the SQL query dynamically\nmsg.topic = `SELECT timestamp, ${parameter} FROM ${parameter} WHERE timestamp >= ${timeCondition};`;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 460,
        "wires": [
            [
                "f9b5ea41eca4b151"
            ]
        ]
    },
    {
        "id": "3f08b4119e1ed7f3",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 420,
        "wires": [
            [
                "e4b832d087a9f827"
            ]
        ]
    },
    {
        "id": "ca3d7002a405ee76",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Energy Meter Graph",
        "func": "// let dbData = msg.payload;\n// let timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Keep the original graph data structure unchanged\n// let graphData = dbData.map(row => ({\n//     x: row.timestamp,  // Ensure column name matches DB\n//     y: row.voltage\n// }));\n\n// // Attach the selected time range to the message for reference\n// msg.timeRange = timeFilter;\n\n// msg.payload = graphData;\n// return msg;\n\n\nlet dbData = msg.payload;\n// let timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\nlet timeFilter = flow.get('timeFilter_EM') || 1;\nlet parameter = flow.get('parameter') || \"voltage\"; // Retrieve selected parameter\n\n// Ensure data is valid\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Ensure parameter is set and valid\nconst allowedParameters = [\"pf\", \"voltage\", \"power\", \"energy\", \"current\"];\nif (!allowedParameters.includes(parameter)) {\n    msg.payload = \"Invalid parameter. Please select 'pf', 'voltage', 'power', 'energy', or 'current'.\";\n    return msg;\n}\n\n// Convert DB data into graph data format\nlet graphData = dbData.map(row => ({\n    x: row.timestamp,  // Ensure the timestamp column exists\n    y: row[parameter]  // Dynamically select the correct parameter\n}));\n\n// Attach the selected time range for reference\nmsg.timeRange = timeFilter;\nmsg.payload = graphData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 540,
        "wires": [
            [
                "e4b832d087a9f827"
            ]
        ]
    },
    {
        "id": "e4b832d087a9f827",
        "type": "ui-chart",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "group": "9b49a2c5d5e2a93c",
        "name": "",
        "label": "VYOM Energy Meter",
        "order": 2,
        "chartType": "line",
        "category": "VYOM Energy Meter",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#2b00ff",
            "#ff0000",
            "#e9c307",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 8,
        "height": 7,
        "className": "label {     font-size: 28px !important;  /* Huge labels */     color: #000000 !important;  /* Black text */     font-weight: bold;     }",
        "interpolation": "linear",
        "x": 1260,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "3ea5f537b5074c0e",
        "type": "ui-button-group",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "parameters",
        "group": "9b49a2c5d5e2a93c",
        "order": 1,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Voltage (V)",
                "icon": "",
                "value": "voltage",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "Current (A)",
                "icon": "",
                "value": "current",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "Power (kW)",
                "icon": "",
                "value": "power",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "Energy (kWh)",
                "icon": "",
                "value": "energy",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "PF",
                "icon": "",
                "value": "pf",
                "valueType": "str",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "0130887cec015fde"
            ]
        ]
    },
    {
        "id": "0130887cec015fde",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Parameter Filter",
        "func": "var a = msg.payload;\nflow.set('parameter', a);\n\nvar timeFilter = flow.get('timeFilter_EM');\n\nconst allowedParameters = [\"pf\", \"voltage\", \"power\", \"energy\", \"current\"];\n\n// Check if the selected parameter is valid\nif (!allowedParameters.includes(a)) {\n    msg.payload = \"Invalid parameter. Please select 'pf', 'voltage', 'power', 'energy', or 'current'.\";\n    return msg;\n}\n\n// Define the time condition based on selection\nlet timeCondition = \"\";\nif (timeFilter === 1) {\n    timeCondition = \"NOW() - INTERVAL 1 DAY\";\n} else if (timeFilter === 3) {\n    timeCondition = \"NOW() - INTERVAL 3 DAY\";\n} else if (timeFilter === 7) {\n    timeCondition = \"NOW() - INTERVAL 7 DAY\";\n} else if (timeFilter === 15) {\n    timeCondition = \"NOW() - INTERVAL 15 MINUTE\";\n} else if (timeFilter === 60) {\n    timeCondition = \"NOW() - INTERVAL 1 HOUR\";\n} else if (timeFilter === 12) {\n    timeCondition = \"NOW() - INTERVAL 12 HOUR\";\n} else {\n    msg.payload = \"Invalid time range. Please select 15, 60, 12, 1, 3, or 7.\";\n    return msg;\n}\n\n// Construct the SQL query dynamically\nmsg.topic = `SELECT timestamp, ${a} FROM ${a} WHERE timestamp >= ${timeCondition};`;\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 500,
        "wires": [
            [
                "f9b5ea41eca4b151"
            ]
        ]
    },
    {
        "id": "b3a990fea4bfcbf4",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Insert current from context to DB",
        "func": "\n\nlet current = flow.get('Energy_Meter/30022_Average_Current') || 0;\n\n\n\nmsg.topic = \"INSERT INTO current (current) VALUES (?)\";\nmsg.payload = [current];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "f9b5ea41eca4b151"
            ]
        ]
    },
    {
        "id": "2f9ca011c1cc8b9e",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Insert power from context to DB",
        "func": "\n\nlet power = flow.get('Energy_Meter/30042_Total_kW') || 0;\n\n\n\nmsg.topic = \"INSERT INTO power (power) VALUES (?)\";\nmsg.payload = [power];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 640,
        "wires": [
            [
                "f9b5ea41eca4b151"
            ]
        ]
    },
    {
        "id": "606c79fec274aeb3",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Insert energy from context to DB",
        "func": "\n\nlet energy = flow.get('Energy_Meter/30058_Total_Net_kWh') || 0;\n\n\n\nmsg.topic = \"INSERT INTO energy (energy) VALUES (?)\";\nmsg.payload = [energy];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 680,
        "wires": [
            [
                "f9b5ea41eca4b151"
            ]
        ]
    },
    {
        "id": "5a511a05a10ec975",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "Insert pf from context to DB",
        "func": "\n\nlet pf = flow.get('Energy_Meter/30054_Average_PF') || 0;\n\n\n\nmsg.topic = \"INSERT INTO pf (pf) VALUES (?)\";\nmsg.payload = [pf];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "f9b5ea41eca4b151"
            ]
        ]
    },
    {
        "id": "efea353a9dae3dae",
        "type": "mysql",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "mydb": "6cbf753a184c0e83",
        "name": "",
        "x": 790,
        "y": 980,
        "wires": [
            [
                "3e3b8ac44a2ef7ba",
                "1761074a580bf070"
            ]
        ]
    },
    {
        "id": "d1d720ab4febaabf",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Insert voltage from context to DB",
        "func": "\n\nlet voltage = flow.get('Je_Energy/Voltage_L_to_N_Average') || 0;\n\n\n\nmsg.topic = \"INSERT INTO voltage (voltage) VALUES (?)\";\nmsg.payload = [voltage];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 482.8000183105469,
        "y": 949.8000183105469,
        "wires": [
            [
                "efea353a9dae3dae"
            ]
        ]
    },
    {
        "id": "a76d38145e0c5997",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 1040,
        "wires": [
            [
                "d1d720ab4febaabf",
                "344a397f68402b6f",
                "411a43f420358668",
                "399316c48446e0b6",
                "3d4f3cf2d39983da"
            ]
        ]
    },
    {
        "id": "37aff543db8eb316",
        "type": "ui-button-group",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "",
        "group": "eaccea2c082b8fd0",
        "order": 3,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": true,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 840,
        "wires": [
            [
                "58b686a510fc8d60",
                "2b7c76538de37f11",
                "15ea348e72b58056"
            ]
        ]
    },
    {
        "id": "2b7c76538de37f11",
        "type": "delay",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 820,
        "wires": [
            [
                "58b686a510fc8d60"
            ]
        ]
    },
    {
        "id": "58b686a510fc8d60",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Time Range filter",
        "func": "// var input = msg.payload;  \n// var timeFilter = parseInt(input, 10);\n// var parameter = flow.get('parameter');\n\n// // Set reset flag to destroy the chart before updating\n// msg.reset = true;  \n\n// if (timeFilter === 1) {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n// } else if (timeFilter === 3) {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n// } else if (timeFilter === 7) {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n// } else if (input === \"15\") {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n// } else if (input === \"60\") {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n// } else if (input === \"12\") {\n//     msg.topic = `SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n// } else {\n//     msg.topic = \"\";\n//     msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n// }\n\n// return msg;\n\n\nvar input = msg.payload;  \nvar timeFilter = parseInt(input, 10);  \nflow.set('timeFilter_JE', timeFilter);\nvar parameter = flow.get('parameter');  // Retrieve selected parameter from flow context\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\n// Allowed parameters list\nconst allowedParameters = [\"pf\", \"voltage\", \"power\", \"energy\", \"current\"];\n\n// Check if the selected parameter is valid\nif (!allowedParameters.includes(parameter)) {\n    msg.payload = \"Invalid parameter. Please select 'pf', 'voltage', 'power', 'energy', or 'current'.\";\n    return msg;\n}\n\n// Define the time condition based on selection\nlet timeCondition = \"\";\nif (timeFilter === 1) {\n    timeCondition = \"NOW() - INTERVAL 1 DAY\";\n} else if (timeFilter === 3) {\n    timeCondition = \"NOW() - INTERVAL 3 DAY\";\n} else if (timeFilter === 7) {\n    timeCondition = \"NOW() - INTERVAL 7 DAY\";\n} else if (input === 15) {\n    timeCondition = \"NOW() - INTERVAL 15 MINUTE\";\n} else if (input === 60) {\n    timeCondition = \"NOW() - INTERVAL 1 HOUR\";\n} else if (input === 12) {\n    timeCondition = \"NOW() - INTERVAL 12 HOUR\";\n} else {\n    msg.payload = \"Invalid time range. Please select 15, 60, 12, 1, 3, or 7.\";\n    return msg;\n}\n\n// Construct the SQL query dynamically\nmsg.topic = `SELECT timestamp, ${parameter} FROM ${parameter} WHERE timestamp >= ${timeCondition};`;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 860,
        "wires": [
            [
                "efea353a9dae3dae"
            ]
        ]
    },
    {
        "id": "15ea348e72b58056",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 820,
        "wires": [
            [
                "4ba5494f8073fe30"
            ]
        ]
    },
    {
        "id": "3e3b8ac44a2ef7ba",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Energy Meter Graph",
        "func": "// let dbData = msg.payload;\n// let timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Keep the original graph data structure unchanged\n// let graphData = dbData.map(row => ({\n//     x: row.timestamp,  // Ensure column name matches DB\n//     y: row.voltage\n// }));\n\n// // Attach the selected time range to the message for reference\n// msg.timeRange = timeFilter;\n\n// msg.payload = graphData;\n// return msg;\n\n\nlet dbData = msg.payload;\nlet timeFilter = flow.get('timeFilter_JE') || 1;  // Ensure the selected time range is passed\nlet parameter = flow.get('parameter') || \"voltage\"; // Retrieve selected parameter\n\n// Ensure data is valid\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Ensure parameter is set and valid\nconst allowedParameters = [\"pf\", \"voltage\", \"power\", \"energy\", \"current\"];\nif (!allowedParameters.includes(parameter)) {\n    msg.payload = \"Invalid parameter. Please select 'pf', 'voltage', 'power', 'energy', or 'current'.\";\n    return msg;\n}\n\n// Convert DB data into graph data format\nlet graphData = dbData.map(row => ({\n    x: row.timestamp,  // Ensure the timestamp column exists\n    y: row[parameter]  // Dynamically select the correct parameter\n}));\n\n// Attach the selected time range for reference\nmsg.timeRange = timeFilter;\nmsg.payload = graphData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 980,
        "wires": [
            [
                "4ba5494f8073fe30"
            ]
        ]
    },
    {
        "id": "4ba5494f8073fe30",
        "type": "ui-chart",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "group": "eaccea2c082b8fd0",
        "name": "",
        "label": "JE Energy Meter",
        "order": 2,
        "chartType": "line",
        "category": "JE Energy Meter",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#2b00ff",
            "#ff0000",
            "#e9c307",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": "8",
        "height": 7,
        "className": "label {     font-size: 28px !important;  /* Huge labels */     color: #000000 !important;  /* Black text */     font-weight: bold;     }",
        "interpolation": "linear",
        "x": 1130,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "b66fb9b61de06934",
        "type": "ui-button-group",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "",
        "group": "eaccea2c082b8fd0",
        "order": 1,
        "width": 4,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Voltage (V)",
                "icon": "",
                "value": "voltage",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "Current (A)",
                "icon": "",
                "value": "current",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "Power (kW)",
                "icon": "",
                "value": "power",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "Energy (kWh)",
                "icon": "",
                "value": "energy",
                "valueType": "str",
                "color": "#1fa3e5"
            },
            {
                "label": "PF",
                "icon": "",
                "value": "pf",
                "valueType": "str",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "f7c88c8a8e8e8069"
            ]
        ]
    },
    {
        "id": "344a397f68402b6f",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Insert current from context to DB",
        "func": "\n\nlet current = flow.get('Je_Energy/Current_Average') || 0;\n\n\n\nmsg.topic = \"INSERT INTO current (current) VALUES (?)\";\nmsg.payload = [current];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1000,
        "wires": [
            [
                "efea353a9dae3dae"
            ]
        ]
    },
    {
        "id": "411a43f420358668",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Insert power from context to DB",
        "func": "\n\nlet power = flow.get('Je_Energy/Active_Power_TOTAL') || 0;\n\n\n\nmsg.topic = \"INSERT INTO power (power) VALUES (?)\";\nmsg.payload = [power];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1040,
        "wires": [
            [
                "efea353a9dae3dae"
            ]
        ]
    },
    {
        "id": "399316c48446e0b6",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Insert energy from context to DB",
        "func": "\n\nlet energy = flow.get('Je_Energy/Active_Energy_Delivered_plus_Received') || 0;\n\n\n\nmsg.topic = \"INSERT INTO energy (energy) VALUES (?)\";\nmsg.payload = [energy];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "efea353a9dae3dae"
            ]
        ]
    },
    {
        "id": "3d4f3cf2d39983da",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Insert pf from context to DB",
        "func": "\n\nlet pf = flow.get('Je_Energy/PowerFactor') || 0;\n\n\n\nmsg.topic = \"INSERT INTO pf (pf) VALUES (?)\";\nmsg.payload = [pf];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1120,
        "wires": [
            [
                "efea353a9dae3dae"
            ]
        ]
    },
    {
        "id": "c8d02dbb2df02dfc",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "function 11",
        "func": "let voltage= flow.get('Je_Energy/Max_Voltage_L_to_N_Average');   \nlet current= flow.get('Je_Energy/Current_Average');\nlet power= flow.get('Je_Energy/Active_Power_TOTAL');   \nlet energy= flow.get('Je_Energy/Active_Energy_Delivered_plus_Received');   \nlet pf= flow.get('Je_Energy/PowerFactor');   \n\n// let c = new Date().toISOString();\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\nlet data = { \n    timestamp: istTime, \n    voltage: voltage, \n    current: current, \n    power: power, \n    energy: energy, \n    pf: pf\n};\n\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 180,
        "wires": [
            [
                "8eac5deb628ac111"
            ]
        ]
    },
    {
        "id": "c44ba17fdbe84bdf",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 180,
        "wires": [
            [
                "c8d02dbb2df02dfc"
            ]
        ]
    },
    {
        "id": "61bf10f22aaa6000",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "function 12",
        "func": "// Retrieve CumulFlow from flow context and ensure it's a number\nvar a = Number(flow.get(\"Energy_Meter/30058_Total_Net_kWh\")) || 0;\n\n// Get stored previous value, defaulting to 0 if not set\nvar previous = flow.get(\"EM_previousvalue\") || 0;\n\n// Save the current value for future use\nflow.set(\"EM_previousvalue\", a);\n\n// Calculate the difference\nvar difference = a - previous;\nflow.set(\"EM_difference\", difference.toFixed(2));\n\n// Create a JSON object for the output\n// msg.payload = { energy_dailyconsumption: difference };\n// let c = new Date().toISOString();\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\nlet data = { timestamp: istTime, dailyConsumption: difference.toFixed(2)};\n\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b1e8fa112a27ad1c",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 240,
        "wires": [
            [
                "6c7f735cdf69117f"
            ]
        ]
    },
    {
        "id": "bee3090e52202cdb",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "function 13",
        "func": "// Retrieve CumulFlow from flow context and ensure it's a number\nvar a = Number(flow.get(\"Je_Energy/Active_Energy_Delivered_plus_Received\")) || 0;\n\n// Get stored previous value, defaulting to 0 if not set\nvar previous = flow.get(\"JE_EM_previousvalue\") || 0;\n\n// Save the current value for future use\nflow.set(\"JE_EM_previousvalue\", a);\n\n// Calculate the difference\nvar difference = a - previous;\nflow.set(\"JE_EM_difference\", difference.toFixed(2));\n\n// Create a JSON object for the output\n// msg.payload = { energy_dailyconsumption: difference };\n// let c = new Date().toISOString();\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\nlet data = { timestamp: istTime, dailyConsumption: difference.toFixed(2)};\n\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "f7b8f37aab1ee1bd",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 770,
        "y": 300,
        "wires": [
            [
                "2f320244e0c3c80d"
            ]
        ]
    },
    {
        "id": "66aea95eada30f48",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "Time Range filter",
        "func": "// var days = parseInt(msg.payload, 10);\n\n// if ([1, 3, 7].includes(days)) {\n//     msg.topic = `SELECT timestamp, cumulFlow FROM water_dashboard WHERE timestamp >= NOW() - INTERVAL ${days} DAY;`;\n// } else {\n//     msg.topic = \"\";\n//     msg.payload = \"Invalid input. Please send 1, 3, or 7.\";\n// }\n\n// return msg;\n\nvar input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 1 DAY AND dailyConsumption IS NOT NULL;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 3 DAY AND dailyConsumption IS NOT NULL;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 7 DAY AND dailyConsumption IS NOT NULL;`;\n}else if (timeFilter === 30) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 30 DAY AND dailyConsumption IS NOT NULL;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1300,
        "wires": [
            [
                "3cb01eb9496fc2df"
            ]
        ]
    },
    {
        "id": "26fb0a1d4f62c782",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "Daily Consumption Graph",
        "func": "\n// let dbData = msg.payload;\n// let timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Keep the original graph data structure unchanged\n// let graphData = dbData.map(row => ({\n//     x: row.timestamp,  // Ensure column name matches DB\n//     y: row.dailyConsumption\n// }));\n\n// // Attach the selected time range to the message for reference\n// msg.timeRange = timeFilter;\n\n// msg.payload = graphData;\n// return msg;\n\n\n// Extract the payload\nlet data = msg.payload;\n\n// Process the array safely\nmsg.payload = data.map(({ timestamp, dailyConsumption }) => {\n    let date = new Date(timestamp); // Convert to Date object\n    let formattedDate = (`0${date.getMonth() + 1}`).slice(-2) + '-' + (`0${date.getDate()}`).slice(-2); // Format MM-DD\n    return { x: formattedDate, y: dailyConsumption }; // Rename keys\n});\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "fca1b91c75a8836b"
            ]
        ]
    },
    {
        "id": "9577d9b9dcfb4a85",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "Insert Consumption from context to DB",
        "func": "let EM_difference = flow.get('EM_difference') || 0;\nlet dailyConsumption = parseFloat(EM_difference).toFixed(2); // Ensure it's a float with 2 decimal places\n\nmsg.topic = \"INSERT INTO dailyConsumption (dailyConsumption) VALUES (?)\";\nmsg.payload = [parseFloat(dailyConsumption)]; // Ensure it's stored as a number, not a string\n\nreturn msg;\n\n\n// let dailyConsumption = parseFloat(flow.get('EM_difference').toFixed(2)) || 0;\n\n// // dailyConsumption = parseFloat(dailyConsumption.toFixed(2));\n\n// msg.topic = \"INSERT INTO dailyConsumption (dailyConsumption) VALUES (?)\";\n// msg.payload = [dailyConsumption];\n\n// return msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1400,
        "wires": [
            [
                "3cb01eb9496fc2df"
            ]
        ]
    },
    {
        "id": "aff9fe8d2ebdc483",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 270,
        "y": 1460,
        "wires": [
            [
                "9577d9b9dcfb4a85"
            ]
        ]
    },
    {
        "id": "fca1b91c75a8836b",
        "type": "ui-chart",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "group": "636b2b18226b6725",
        "name": "",
        "label": "Daily Consumption",
        "order": 1,
        "chartType": "bar",
        "category": "Daily Consumption",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0008ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "label {     font-size: 40px !important;  /* Bigger labels */     color: #000000 !important;   /* Black text */     font-weight: bold; }",
        "interpolation": "linear",
        "x": 950,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "419bc0293d116778",
        "type": "delay",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 1240,
        "wires": [
            [
                "66aea95eada30f48"
            ]
        ]
    },
    {
        "id": "3b84d93a2811d3ba",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1280,
        "wires": [
            [
                "fca1b91c75a8836b"
            ]
        ]
    },
    {
        "id": "3cb01eb9496fc2df",
        "type": "mysql",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "mydb": "42831c22369bb13a",
        "name": "",
        "x": 530,
        "y": 1340,
        "wires": [
            [
                "26fb0a1d4f62c782",
                "fe70233c55c7f817"
            ]
        ]
    },
    {
        "id": "4d17a333eb9da38a",
        "type": "ui-button-group",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "",
        "group": "636b2b18226b6725",
        "order": 2,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 30 days",
                "icon": "",
                "value": "30",
                "valueType": "num",
                "color": "#33b1f0"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 1240,
        "wires": [
            [
                "419bc0293d116778",
                "3b84d93a2811d3ba",
                "66aea95eada30f48"
            ]
        ]
    },
    {
        "id": "fdee96dea0047a3b",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "Time Range filter",
        "func": "// var days = parseInt(msg.payload, 10);\n\n// if ([1, 3, 7].includes(days)) {\n//     msg.topic = `SELECT timestamp, cumulFlow FROM water_dashboard WHERE timestamp >= NOW() - INTERVAL ${days} DAY;`;\n// } else {\n//     msg.topic = \"\";\n//     msg.payload = \"Invalid input. Please send 1, 3, or 7.\";\n// }\n\n// return msg;\n\nvar input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 1 DAY AND dailyConsumption IS NOT NULL;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 3 DAY AND dailyConsumption IS NOT NULL;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 7 DAY AND dailyConsumption IS NOT NULL;`;\n}else if (timeFilter === 30) {\n    msg.topic = `SELECT timestamp, dailyConsumption FROM dailyConsumption WHERE timestamp >= NOW() - INTERVAL 30 DAY AND dailyConsumption IS NOT NULL;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1660,
        "wires": [
            [
                "b1dfa26899a3b099"
            ]
        ]
    },
    {
        "id": "f3991dc5f0199c04",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "Daily Consumption Graph",
        "func": "\n// let dbData = msg.payload;\n// let timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Keep the original graph data structure unchanged\n// let graphData = dbData.map(row => ({\n//     x: row.timestamp,  // Ensure column name matches DB\n//     y: row.dailyConsumption\n// }));\n\n// // Attach the selected time range to the message for reference\n// msg.timeRange = timeFilter;\n\n// msg.payload = graphData;\n// return msg;\n\n// Extract the payload\nlet data = msg.payload;\n\n// Process the array safely\nmsg.payload = data.map(({ timestamp, dailyConsumption }) => {\n    let date = new Date(timestamp); // Convert to Date object\n    let formattedDate = (`0${date.getMonth() + 1}`).slice(-2) + '-' + (`0${date.getDate()}`).slice(-2); // Format MM-DD\n    return { x: formattedDate, y: dailyConsumption }; // Rename keys\n});\n\n// Return the modified message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1700,
        "wires": [
            [
                "aea85bb5afc0f671"
            ]
        ]
    },
    {
        "id": "eb22cd1e4e44d422",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "Insert Consumption from context to DB",
        "func": "let EM_difference = flow.get('JE_EM_difference') || 0;\nlet dailyConsumption = parseFloat(EM_difference).toFixed(2); // Ensure it's a float with 2 decimal places\n\nmsg.topic = \"INSERT INTO dailyConsumption (dailyConsumption) VALUES (?)\";\nmsg.payload = [parseFloat(dailyConsumption)]; // Ensure it's stored as a number, not a string\n\n// re\n// let dailyConsumption = flow.get('JE_EM_difference') || 0;\n\n// dailyConsumption = parseFloat(dailyConsumption.toFixed(2));\n\n// msg.topic = \"INSERT INTO dailyConsumption (dailyConsumption) VALUES (?)\";\n// msg.payload = [dailyConsumption];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1760,
        "wires": [
            [
                "b1dfa26899a3b099"
            ]
        ]
    },
    {
        "id": "71879dbc307077c9",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 270,
        "y": 1820,
        "wires": [
            [
                "eb22cd1e4e44d422"
            ]
        ]
    },
    {
        "id": "aea85bb5afc0f671",
        "type": "ui-chart",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "group": "15d1a3f2871fcd4b",
        "name": "",
        "label": "Daily Consumption",
        "order": 1,
        "chartType": "bar",
        "category": "Daily Consumption",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0008ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "label {     font-size: 40px !important;  /* Bigger labels */     color: #000000 !important;   /* Black text */     font-weight: bold; }",
        "interpolation": "linear",
        "x": 950,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "0ae16abdbf11d8d9",
        "type": "delay",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 1600,
        "wires": [
            [
                "fdee96dea0047a3b"
            ]
        ]
    },
    {
        "id": "bd6c0fd677f2e6e6",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1640,
        "wires": [
            [
                "aea85bb5afc0f671"
            ]
        ]
    },
    {
        "id": "b1dfa26899a3b099",
        "type": "mysql",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "mydb": "6cbf753a184c0e83",
        "name": "",
        "x": 530,
        "y": 1700,
        "wires": [
            [
                "f3991dc5f0199c04",
                "58d1e670a984068e"
            ]
        ]
    },
    {
        "id": "d148d3f4969b825e",
        "type": "ui-button-group",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "",
        "group": "15d1a3f2871fcd4b",
        "order": 2,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 30 days",
                "icon": "",
                "value": "30",
                "valueType": "num",
                "color": "#1094f9"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 1600,
        "wires": [
            [
                "0ae16abdbf11d8d9",
                "bd6c0fd677f2e6e6",
                "fdee96dea0047a3b"
            ]
        ]
    },
    {
        "id": "f7c88c8a8e8e8069",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "Parameter Filter",
        "func": "var a = msg.payload;\nflow.set('parameter', a);\n\nvar timeFilter = flow.get('timeFilter_JE');\n\nconst allowedParameters = [\"pf\", \"voltage\", \"power\", \"energy\", \"current\"];\n\n// Check if the selected parameter is valid\nif (!allowedParameters.includes(a)) {\n    msg.payload = \"Invalid parameter. Please select 'pf', 'voltage', 'power', 'energy', or 'current'.\";\n    return msg;\n}\n\n// Define the time condition based on selection\nlet timeCondition = \"\";\nif (timeFilter === 1) {\n    timeCondition = \"NOW() - INTERVAL 1 DAY\";\n} else if (timeFilter === 3) {\n    timeCondition = \"NOW() - INTERVAL 3 DAY\";\n} else if (timeFilter === 7) {\n    timeCondition = \"NOW() - INTERVAL 7 DAY\";\n} else if (timeFilter === 15) {\n    timeCondition = \"NOW() - INTERVAL 15 MINUTE\";\n} else if (timeFilter === 60) {\n    timeCondition = \"NOW() - INTERVAL 1 HOUR\";\n} else if (timeFilter === 12) {\n    timeCondition = \"NOW() - INTERVAL 12 HOUR\";\n} else {\n    msg.payload = \"Invalid time range. Please select 15, 60, 12, 1, 3, or 7.\";\n    return msg;\n}\n\n// Construct the SQL query dynamically\nmsg.topic = `SELECT timestamp, ${a} FROM ${a} WHERE timestamp >= ${timeCondition};`;\n\nreturn msg;\n\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 900,
        "wires": [
            [
                "efea353a9dae3dae"
            ]
        ]
    },
    {
        "id": "0590ef0df5c523fb",
        "type": "csv",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, voltage, current, power, energy, pf ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 970,
        "y": 640,
        "wires": [
            [
                "c637b9d207e2d823"
            ]
        ]
    },
    {
        "id": "c637b9d207e2d823",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "function 3",
        "func": "msg.path = '/home/ubuntu/.node-red/public/vyom_em.csv';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 640,
        "wires": [
            [
                "0f0accf392e5b4cd"
            ]
        ]
    },
    {
        "id": "0f0accf392e5b4cd",
        "type": "file",
        "z": "40cf4b8ddc4940be",
        "g": "aa6f127b8db4f06b",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1280,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "705128a0207fd2ab",
        "type": "ui-template",
        "z": "40cf4b8ddc4940be",
        "group": "9b49a2c5d5e2a93c",
        "page": "",
        "ui": "",
        "name": "",
        "order": 4,
        "width": 1,
        "height": "",
        "head": "",
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;\">\n    <button class=\"nr-dashboard-button\"\n        onclick=\"window.location.href='http://13.201.130.80:1880/vyom_em.csv';\"\n        style=\"width: 130%; height: 100%; font-size: 18px; font-weight: bold; \n               color: white; background-color: #007bff; border: none; border-radius: 8px;\n               cursor: pointer; transition: background-color 0.3s ease;\">\n        DOWNLOAD\n    </button>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 698,
        "wires": [
            []
        ]
    },
    {
        "id": "1761074a580bf070",
        "type": "csv",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, voltage, current, power, energy, pf ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 830,
        "y": 1080,
        "wires": [
            [
                "044d51871d788a0e"
            ]
        ]
    },
    {
        "id": "044d51871d788a0e",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "function 6",
        "func": "msg.path = '/home/ubuntu/.node-red/public/je_em.csv';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1080,
        "wires": [
            [
                "fbe55bbac8733f07"
            ]
        ]
    },
    {
        "id": "fbe55bbac8733f07",
        "type": "file",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "04883e5804718bb3",
        "type": "ui-template",
        "z": "40cf4b8ddc4940be",
        "g": "3de4a8e5fec16ed8",
        "group": "eaccea2c082b8fd0",
        "page": "",
        "ui": "",
        "name": "",
        "order": 4,
        "width": 1,
        "height": "",
        "head": "",
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;\">\n    <button class=\"nr-dashboard-button\"\n        onclick=\"window.location.href='http://13.201.130.80:1880/je_em.csv';\"\n        style=\"width: 130%; height: 100%; font-size: 18px; font-weight: bold; \n               color: white; background-color: #007bff; border: none; border-radius: 8px;\n               cursor: pointer; transition: background-color 0.3s ease;\">\n        DOWNLOAD\n    </button>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "fe70233c55c7f817",
        "type": "csv",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, dailyConsumption",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 670,
        "y": 1400,
        "wires": [
            [
                "717fee0a7ffde581"
            ]
        ]
    },
    {
        "id": "717fee0a7ffde581",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "function 7",
        "func": "msg.path = '/home/ubuntu/.node-red/public/vyom_dailyconsumption.csv';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1400,
        "wires": [
            [
                "ac21cd4fe55c5019"
            ]
        ]
    },
    {
        "id": "ac21cd4fe55c5019",
        "type": "file",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "dacea0b32ead4dba",
        "type": "ui-template",
        "z": "40cf4b8ddc4940be",
        "g": "28caaea4bf500d9e",
        "group": "636b2b18226b6725",
        "page": "",
        "ui": "",
        "name": "",
        "order": 3,
        "width": 1,
        "height": "",
        "head": "",
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;\">\n    <button class=\"nr-dashboard-button\"\n        onclick=\"window.location.href='http://13.201.130.80:1880/vyom_dailyconsumption.csv';\"\n        style=\"width: 130%; height: 100%; font-size: 18px; font-weight: bold; \n               color: white; background-color: #007bff; border: none; border-radius: 8px;\n               cursor: pointer; transition: background-color 0.3s ease;\">\n        DOWNLOAD\n    </button>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 590,
        "y": 1478,
        "wires": [
            []
        ]
    },
    {
        "id": "58d1e670a984068e",
        "type": "csv",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, dailyConsumption",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 670,
        "y": 1780,
        "wires": [
            [
                "af1e785084a0c4eb"
            ]
        ]
    },
    {
        "id": "af1e785084a0c4eb",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "function 8",
        "func": "msg.path = '/home/ubuntu/.node-red/public/je_dailyconsumption.csv';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1780,
        "wires": [
            [
                "eb3c237b610bf050"
            ]
        ]
    },
    {
        "id": "aa4e5a98d1ce5fb2",
        "type": "ui-template",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "group": "15d1a3f2871fcd4b",
        "page": "",
        "ui": "",
        "name": "",
        "order": 3,
        "width": 1,
        "height": "",
        "head": "",
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;\">\n    <button class=\"nr-dashboard-button\"\n        onclick=\"window.location.href='http://13.201.130.80:1880/je_dailyconsumption.csv';\"\n        style=\"width: 130%; height: 100%; font-size: 18px; font-weight: bold; \n               color: white; background-color: #007bff; border: none; border-radius: 8px;\n               cursor: pointer; transition: background-color 0.3s ease;\">\n        DOWNLOAD\n    </button>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 590,
        "y": 1818,
        "wires": [
            []
        ]
    },
    {
        "id": "eb3c237b610bf050",
        "type": "file",
        "z": "40cf4b8ddc4940be",
        "g": "d69be3c20cda8d1b",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 980,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "aa8399d09d0d3b20",
        "type": "ui-table",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "group": "eee475b1b5fe3e5f",
        "name": "",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1110,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "8eac5deb628ac111",
        "type": "ui-table",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "group": "e62640c7b7c1da3e",
        "name": "",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1110,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "5d09d11f6e78d98e",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "Daily Consumption Graph",
        "func": "\nlet dbData = msg.payload;\nlet timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Keep the original graph data structure unchanged\nlet graphData = dbData.map(row => ({\n    Timestamp: row.timestamp,  // Ensure column name matches DB\n    \"Daily Consumption\": row.dailyConsumption\n}));\n\n// Attach the selected time range to the message for reference\n// msg.timeRange = timeFilter;\n\nmsg.payload = graphData;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 300,
        "wires": [
            [
                "7d3a84ea808e7b2b"
            ]
        ]
    },
    {
        "id": "e0ece47f4077a6b7",
        "type": "mysql",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "mydb": "6cbf753a184c0e83",
        "name": "",
        "x": 1110,
        "y": 300,
        "wires": [
            [
                "5d09d11f6e78d98e"
            ]
        ]
    },
    {
        "id": "feb2280af1350e14",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "Daily Consumption Graph",
        "func": "\nlet dbData = msg.payload;\nlet timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Keep the original graph data structure unchanged\nlet graphData = dbData.map(row => ({\n    Timestamp: row.timestamp,  // Ensure column name matches DB\n    \"Daily Consumption\": row.dailyConsumption\n}));\n\n// Attach the selected time range to the message for reference\n// msg.timeRange = timeFilter;\n\nmsg.payload = graphData;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 240,
        "wires": [
            [
                "91815a367cdf971e"
            ]
        ]
    },
    {
        "id": "6c7f735cdf69117f",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "function 34",
        "func": "msg.topic = \"SELECT * FROM dailyConsumption  ORDER BY id DESC LIMIT 1\";\n\n// msg.topic = \"SELECT * FROM dailyConsumption\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 240,
        "wires": [
            [
                "e2d8ebd35c7e7c8a"
            ]
        ]
    },
    {
        "id": "e2d8ebd35c7e7c8a",
        "type": "mysql",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "mydb": "42831c22369bb13a",
        "name": "",
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "feb2280af1350e14"
            ]
        ]
    },
    {
        "id": "2f320244e0c3c80d",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "function 30",
        "func": "msg.topic = \"SELECT * FROM dailyConsumption ORDER BY id DESC LIMIT 1\";\n\n// msg.topic = \"SELECT * FROM dailyConsumption\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 300,
        "wires": [
            [
                "e0ece47f4077a6b7"
            ]
        ]
    },
    {
        "id": "e29df939957ac1fd",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 17 * * *",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1290,
        "y": 80,
        "wires": [
            [
                "61bf10f22aaa6000",
                "bee3090e52202cdb"
            ]
        ]
    },
    {
        "id": "afe9fba231b6c461",
        "type": "ui-control",
        "z": "40cf4b8ddc4940be",
        "name": "",
        "ui": "b7f3cf648fd1b434",
        "events": "all",
        "x": 1360,
        "y": 800,
        "wires": [
            [
                "5e6cf4763b2f344d"
            ]
        ]
    },
    {
        "id": "5e6cf4763b2f344d",
        "type": "function",
        "z": "40cf4b8ddc4940be",
        "name": "function 37",
        "func": "var a = msg.payload;\n\nif(a === \"change\"){\n    flow.set('timeFilter_EM', 1);\n    flow.set('parameter', \"voltage\");\n    // flow.set('timeFilter_JE', 1);\n\n    msg.topic = \"SELECT timestamp, voltage FROM voltage WHERE timestamp >= NOW() - INTERVAL 1 DAY\"\n}else {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "029016ccf36dcda7",
        "type": "inject",
        "z": "40cf4b8ddc4940be",
        "d": true,
        "g": "aa6f127b8db4f06b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "68b4fcda512a56c0"
            ]
        ]
    },
    {
        "id": "7d3a84ea808e7b2b",
        "type": "ui-table",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "group": "52126a3fe99bfbfc",
        "name": "",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 7,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1550,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "91815a367cdf971e",
        "type": "ui-table",
        "z": "40cf4b8ddc4940be",
        "g": "ce495c1c3a23c0bb",
        "group": "f9c8d9d099ef3c0f",
        "name": "",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 1,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1530,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "6702dc66f5bd7c6c",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "4e3e7fe5b909b663"
            ]
        ]
    },
    {
        "id": "4e3e7fe5b909b663",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Increment Count",
        "func": "\n// Retrieve previous count value from context, default to 0 if undefined\n// Retrieve previous count value from context, default to 0 if undefined\nvar count = flow.get('count') || 0;\n\n// Increment count\ncount += 1;\n\n// Store updated count in context\nflow.set(\"count\", count);\n\n// Return count as message payload\nmsg.payload = {\n    count: count\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            [
                "67ab6ff33039fbe5"
            ]
        ]
    },
    {
        "id": "67ab6ff33039fbe5",
        "type": "debug",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 360,
        "wires": []
    },
    {
        "id": "fd7912a0dd290af8",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Performance and Reset Count",
        "func": "var actualSpeed = flow.get('count');\nflow.set(\"actualSpeed\", actualSpeed);\nflow.set('count', 0);\n\nvar designedSpeed = 65;\nflow.set('designedSpeed', designedSpeed);\n\nvar performance = actualSpeed / designedSpeed;\nflow.set('performance', performance);\n\nmsg.payload = {\n    actualSpeed: actualSpeed,\n    designedSpeed: designedSpeed,\n    performance: performance\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1f8540c919c89c6e",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "fd7912a0dd290af8",
                "073a1f6706801dde"
            ]
        ]
    },
    {
        "id": "073a1f6706801dde",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Quality",
        "func": "var totalProduction = flow.get('actualSpeed');\n\n// var a = totalProduction++;\n// flow.set('totalProduction', a);\n\nvar rejected = flow.get('BadCount');\n\nvar good = totalProduction - rejected;\nflow.set('GoodCount', good);\n\nvar quality = good / totalProduction;\nflow.set('Quality', quality);\n\nmsg.payload = {\n    totalProduction : totalProduction,\n    BadCount: rejected,\n    GoodCount: good,\n    Quality: quality\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "809e2db64409b1e4",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Quality",
        "func": "\n// var rejected = msg.payload;\n\nconst rejected = Math.floor(Math.random() * 10) + 1;\nflow.set('BadCount', rejected);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c9461d54dd83f180",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1390,
        "y": 220,
        "wires": [
            [
                "9adb62a8d09f59a3"
            ]
        ]
    },
    {
        "id": "ce74a922127d8102",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Availibility",
        "func": "var shiftTime = 480;\n\nvar shutdown = (flow.get('lunch') || 0) + (flow.get('maintenance') || 0) + (flow.get('No_Production') || 0) + (flow.get('trials') || 0);\n\nvar plannedTime = shiftTime - shutdown;\nflow.set('plannedTime', plannedTime);\n\nvar unplannedTime = (flow.get('mech_brk') || 0) + (flow.get('powerFailure') || 0) + (flow.get('Electrical') || 0) + (flow.get('minorStop') || 0) + (flow.get('sku') || 0) + (flow.get('startup') || 0);\nflow.set('unplannedTime', unplannedTime);\n\nvar runTime = plannedTime - unplannedTime;\nflow.set(\"runTime\", runTime);\n\nvar availability = runTime / plannedTime;\nflow.set('availability', availability);\n\nmsg.payload = {\n    availability: availability,\n    runTime: runTime,\n    plannedTime: plannedTime,\n    unplannedTime: unplannedTime,\n    shiftTime: shiftTime\n};\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1e9b4f37fe044c1e",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 300,
        "wires": [
            [
                "ce74a922127d8102"
            ]
        ]
    },
    {
        "id": "842a47108682c180",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "OEE",
        "func": "var availability = flow.get('availability');\nvar quality = flow.get('Quality');\nvar performance = flow.get('performance');\n\nvar oee = availability * quality * performance;\nflow.set('oee', oee);\n\nmsg.payload = oee;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "b761355f021c6afd",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "842a47108682c180"
            ]
        ]
    },
    {
        "id": "69b94051e3979457",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Accumulate Data every min",
        "func": "// Retrieve accumulated values or initialize if not set\nvar accumulatedTotalProduction = flow.get('accumulatedTotalProduction') || 0;\nvar accumulatedGoodCount = flow.get('accumulatedGoodCount') || 0;\nvar accumulatedBadCount = flow.get('accumulatedBadCount') || 0;\nvar accumulatedDesignedSpeed = flow.get('accumulatedDesignedSpeed') || 0;\n\n// Get the latest 1-minute batch values\nvar currentTotalProduction = flow.get('actualSpeed') || 0;\nvar currentBadCount = flow.get('BadCount') || 0;\nvar currentGoodCount = currentTotalProduction - currentBadCount;\nvar currentDesignedSpeed = flow.get('designedSpeed') || 0;\n\n// Accumulate values\naccumulatedTotalProduction += currentTotalProduction;\naccumulatedGoodCount += currentGoodCount;\naccumulatedBadCount += currentBadCount;\naccumulatedDesignedSpeed += currentDesignedSpeed;\n\n// Store updated totals\nflow.set('accumulatedTotalProduction', accumulatedTotalProduction);\nflow.set('accumulatedGoodCount', accumulatedGoodCount);\nflow.set('accumulatedBadCount', accumulatedBadCount);\nflow.set('accumulatedDesignedSpeed', accumulatedDesignedSpeed);\n\n// No message output, just accumulation\nreturn null;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "0c4997979c5976a5",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "69b94051e3979457"
            ]
        ]
    },
    {
        "id": "380141edccb7a959",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "Shift A",
        "func": "// Retrieve accumulated values\nvar accumulatedTotalProduction = flow.get('accumulatedTotalProduction') || 0;\nvar accumulatedGoodCount = flow.get('accumulatedGoodCount') || 0;\nvar accumulatedBadCount = flow.get('accumulatedBadCount') || 0;\n\nvar accumulatedDesignedSpeed = flow.get('accumulatedDesignedSpeed') || 0;\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\n// Create payload for daily report\nlet data = {\n    timestamp: istTime,\n    Shift_totalProduction: accumulatedTotalProduction,\n    Shift_goodCount: accumulatedGoodCount,\n    Shift_badCount: accumulatedBadCount\n};\n\nmsg.payload = data;\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 520,
        "wires": [
            [
                "664a676551b7eeca"
            ]
        ]
    },
    {
        "id": "588c77bcf9ead504",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "Shift A 3AM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 21 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 830,
        "y": 520,
        "wires": [
            [
                "380141edccb7a959",
                "8902803ba4735add",
                "640a5249a899f2c6"
            ]
        ]
    },
    {
        "id": "11cb7e534174bb0d",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "Shift B 11 AM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 05 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 840,
        "y": 560,
        "wires": [
            [
                "380141edccb7a959",
                "8902803ba4735add",
                "640a5249a899f2c6"
            ]
        ]
    },
    {
        "id": "27cfc6fc018724f9",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "Shift C 7 PM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 13 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 840,
        "y": 600,
        "wires": [
            [
                "380141edccb7a959",
                "8902803ba4735add",
                "640a5249a899f2c6"
            ]
        ]
    },
    {
        "id": "e27c247e4311833d",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "Trials",
        "func": "var a = 60;\nflow.set('trials', a);\n\nmsg.payload = {\n    trials: a\n}\n\n// setTimeout(() => {\n//     flow.set('trials', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "0a2e92875d2c7709",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "No production",
        "func": "var a = 80;\nflow.set('No_Production', a);\n\nmsg.payload = {\n    No_Production: a\n}\n\n// setTimeout(() => {\n//     flow.set('No_Production', 0);\n\n// }, 10000);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "1f6ff09b038e415c",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "Maintenance",
        "func": "var a = 120;\nflow.set('maintenance', a);\n\nmsg.payload = {\n    maintenance: a\n}\n\n\n// setTimeout(() => {\n//     flow.set('maintenance', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "861e565d129be742",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "Lunch",
        "func": "var a = 40;\nflow.set('lunch', a);\n\nmsg.payload = {\n    lunch: a\n}\n\n// setTimeout(() => {\n//     flow.set('lunch', 0);\n// }, 10000);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "64b980207c49283e",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 07 * * 1,2,3,4,5,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "861e565d129be742"
            ]
        ]
    },
    {
        "id": "61828b43a0feb666",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 10 * * 2,4,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "e27c247e4311833d"
            ]
        ]
    },
    {
        "id": "a7b81bd10dd5a4a7",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 05 * * 1,5,0",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 870,
        "y": 360,
        "wires": [
            [
                "1f6ff09b038e415c"
            ]
        ]
    },
    {
        "id": "49ee5ba83c531b9b",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "875dd8acbf1f9402",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 870,
        "y": 400,
        "wires": [
            [
                "0a2e92875d2c7709"
            ]
        ]
    },
    {
        "id": "e951c3ed5df2e670",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "Material Shortage",
        "func": "// // var a = 20;\n// // flow.set('material_shortage', a);\n\n// // msg.payload = {\n// //     material_shortage: a\n// // }\n\n// // return msg;\n\n// let a = 20;\n// flow.set('material_shortage', a);\n\n// // Get previous endtime from flow context\n// let prevEndStr = flow.get('material_endtime');\n// let prevEnd;\n\n// // Ensure prevEnd is a valid Date object\n// if (prevEndStr) {\n//     prevEnd = new Date(prevEndStr);\n//     if (isNaN(prevEnd.getTime())) {\n//         node.warn(\"Invalid prev_endtime detected. Falling back.\");\n//         prevEnd = new Date(Date.now() - a * 60000); // fallback\n//     }\n// } else {\n//     prevEnd = new Date(Date.now() - a * 60000); // fallback\n// }\n\n// // Get current time as start\n// let currStart = new Date();\n// if (isNaN(currStart.getTime())) {\n//     node.error(\"Invalid current time\");\n//     return null;\n// }\n\n// // Debug log for diagnosis\n// node.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// // Get incident count\n// let incidentCount = flow.get('material_count') || 1;\n\n// //  Now safely subtract\n// let diffMs = currStart.getTime() - prevEnd.getTime(); // use .getTime() for numeric subtraction\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// // Calculate end time\n// let endTime = new Date(currStart.getTime() + a * 60000);\n\n// // Save for next incident\n// flow.set('material_endtime', endTime.toISOString());\n// flow.set('material_count', incidentCount + 1);\n\n// // Insert into DB\n// msg.topic = \"INSERT INTO material_shortage (starttime, endtime, MTBF) VALUES (?, ?, ?)\";\n// msg.payload = [\n//     currStart.toISOString().slice(0, 19).replace('T', ' '),\n//     endTime.toISOString().slice(0, 19).replace('T', ' '),\n//     mtbf\n// ];\n\n// return msg;\n\n\nlet a = 20;\nflow.set('material_shortage', a); // store for reference\n\n// Get previous endtime\nlet prevEndStr = flow.get('material_endtime');\nlet prevEnd;\n\nif (prevEndStr) {\n    prevEnd = new Date(prevEndStr);\n    if (isNaN(prevEnd.getTime())) {\n        node.warn(\"Invalid prev_endtime detected. Falling back.\");\n        prevEnd = new Date(Date.now() - a * 60000); // fallback\n    }\n} else {\n    prevEnd = new Date(Date.now() - a * 60000); // fallback\n}\n\n// Current time\nlet currStart = new Date();\nif (isNaN(currStart.getTime())) {\n    node.error(\"Invalid current time\");\n    return null;\n}\n\n// Debug\nnode.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// Incident/failure count\nlet incidentCount = flow.get('material_count') || 1;\n\n// 🧠 MTBF Calculation\nlet diffMs = currStart.getTime() - prevEnd.getTime();\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// End time (current start + duration 'a')\nlet endTime = new Date(currStart.getTime() + a * 60000);\n\n// --- New Calculations for OEE Metrics ---\n\n// Total accumulated uptime (for MTTF)\nlet totalUptime = flow.get('material_total_uptime') || 0;\n// totalUptime += mtbf;\n\n// Total accumulated repair time (for MTTR)\nlet repairTime = flow.get('material_last_repair_time') || 10; // assume fixed repair time 10 mins for now\nlet totalRepairTime = flow.get('material_total_repair') || 0;\ntotalRepairTime += repairTime;\n\nlet totalTime = totalUptime + totalRepairTime;\n\n\nlet mttf = Math.floor(totalTime / incidentCount);\n\n// Update counts\nflow.set('material_total_uptime', totalUptime);\nflow.set('material_total_repair', totalRepairTime);\n\n// MTTF = total operating time / number of failures\nlet mtbf = Math.floor(totalUptime / incidentCount);\n\n// MTTR = total repair time / number of failures\nlet mttr = Math.floor(totalRepairTime / incidentCount);\n\n// MTBSI and MTBM = MTBF + MTTR\n// let mtbsi = (mtbf + mttr) / incidentCount;\n\nlet mtbsi = totalTime / incidentCount;\n\nlet mtbm = mtbf + mttr;\n\n\n\n// Availability (%) = (MTBF / (MTBF + MTTR)) * 100\nlet availability = (mtbf / (mtbf + mttr)) * 100;\navailability = Math.floor(availability);\n\n// Failure Rate = 1 / MTTF\nlet failureRate = (mttf !== 0) ? (1 / mttf).toFixed(4) : 0;\n\n// Placeholder for MTTA (time to acknowledge) and MTTD (time to detect)\nlet mtta = 5;  // assuming 5 minutes for MTTA\nlet mttd = 3;  // assuming 3 minutes for MTTD\n\n// --- Save context for next calculation ---\nflow.set('material_endtime', endTime.toISOString());\nflow.set('material_count', incidentCount + 1);\n\n// --- Final Insert Query ---\nmsg.topic = \"INSERT INTO material_shortage (starttime, endtime, Incidents, Uptime, Downtime, MTBF, MTTR, MTTF, MTBSI, Availability, FailureRate, MTBM, MTTA, MTTD, TotalTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    currStart.toISOString().slice(0, 19).replace('T', ' '),\n    endTime.toISOString().slice(0, 19).replace('T', ' '),\n    incidentCount,\n    totalUptime,\n    totalRepairTime,\n    mtbf,\n    mttr,\n    mttf,\n    mtbsi,\n    availability,\n    failureRate,\n    mtbm,\n    mtta,\n    mttd,\n    totalTime\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 100,
        "wires": [
            [
                "68e3d1ef082936ec"
            ]
        ]
    },
    {
        "id": "3af72093016a856d",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "Electrical",
        "func": "// // var a = 30;\n// // flow.set('Electrical', a);\n\n// // msg.payload = {\n// //     Electrical: a\n// // }\n\n// // return msg;\n\n\n\n// let a = 30;\n// flow.set('Electrical', a);\n\n// // Get previous endtime from flow context\n// let prevEndStr = flow.get('Electrical_endtime');\n// let prevEnd;\n\n// // Ensure prevEnd is a valid Date object\n// if (prevEndStr) {\n//     prevEnd = new Date(prevEndStr);\n//     if (isNaN(prevEnd.getTime())) {\n//         node.warn(\"Invalid prev_endtime detected. Falling back.\");\n//         prevEnd = new Date(Date.now() - a * 60000); // fallback\n//     }\n// } else {\n//     prevEnd = new Date(Date.now() - a * 60000); // fallback\n// }\n\n// // Get current time as start\n// let currStart = new Date();\n// if (isNaN(currStart.getTime())) {\n//     node.error(\"Invalid current time\");\n//     return null;\n// }\n\n// // Debug log for diagnosis\n// node.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// // Get incident count\n// let incidentCount = flow.get('Electrical_count') || 1;\n\n// // 🧠 Now safely subtract\n// let diffMs = currStart.getTime() - prevEnd.getTime(); // use .getTime() for numeric subtraction\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// // Calculate end time\n// let endTime = new Date(currStart.getTime() + a * 60000);\n\n// // Save for next incident\n// flow.set('Electrical_endtime', endTime.toISOString());\n// flow.set('Electrical_count', incidentCount + 1);\n\n// // Insert into DB\n// msg.topic = \"INSERT INTO electrical (starttime, endtime, MTBF) VALUES (?, ?, ?)\";\n// msg.payload = [\n//     currStart.toISOString().slice(0, 19).replace('T', ' '),\n//     endTime.toISOString().slice(0, 19).replace('T', ' '),\n//     mtbf\n// ];\n\n// return msg;\n\nlet a = 30;\nflow.set('Electrical', a); // store for reference\n\n// Get previous endtime\nlet prevEndStr = flow.get('Electrical_endtime');\nlet prevEnd;\n\nif (prevEndStr) {\n    prevEnd = new Date(prevEndStr);\n    if (isNaN(prevEnd.getTime())) {\n        node.warn(\"Invalid prev_endtime detected. Falling back.\");\n        prevEnd = new Date(Date.now() - a * 60000); // fallback\n    }\n} else {\n    prevEnd = new Date(Date.now() - a * 60000); // fallback\n}\n\n// Current time\nlet currStart = new Date();\nif (isNaN(currStart.getTime())) {\n    node.error(\"Invalid current time\");\n    return null;\n}\n\n// Debug\nnode.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// Incident/failure count\nlet incidentCount = flow.get('Electrical_count') || 1;\n\n// 🧠 MTBF Calculation\nlet diffMs = currStart.getTime() - prevEnd.getTime();\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// End time (current start + duration 'a')\nlet endTime = new Date(currStart.getTime() + a * 60000);\n\n// --- New Calculations for OEE Metrics ---\n\n// Total accumulated uptime (for MTTF)\nlet totalUptime = flow.get('Electrical_total_uptime') || 0;\n// totalUptime += mtbf;\n\n// Total accumulated repair time (for MTTR)\nlet repairTime = flow.get('Electrical_last_repair_time') || 10; // assume fixed repair time 10 mins for now\nlet totalRepairTime = flow.get('Electrical_total_repair') || 0;\ntotalRepairTime += repairTime;\n\n// Update counts\nflow.set('Electrical_total_uptime', totalUptime);\nflow.set('Electrical_total_repair', totalRepairTime);\n\n// MTTF = total operating time / number of failures\nlet mtbf = Math.floor(totalUptime / incidentCount);\n\n// MTTR = total repair time / number of failures\nlet mttr = Math.floor(totalRepairTime / incidentCount);\n\n// MTBSI and MTBM = MTBF + MTTR\n// let mtbsi = (mtbf + mttr) / incidentCount;\n\n\nlet mtbm = mtbf + mttr;\n\n// Availability (%) = (MTBF / (MTBF + MTTR)) * 100\nlet availability = (mtbf / (mtbf + mttr)) * 100;\navailability = Math.floor(availability);\n\nlet totalTime = totalUptime + totalRepairTime;\n\nlet mtbsi = totalTime / incidentCount;\n\n\nlet mttf = Math.floor(totalTime / incidentCount);\n\n\n// Failure Rate = 1 / MTTF\nlet failureRate = (mttf !== 0) ? (1 / mttf).toFixed(4) : 0;\n\n// Placeholder for MTTA (time to acknowledge) and MTTD (time to detect)\nlet mtta = 5;  // assuming 5 minutes for MTTA\nlet mttd = 3;  // assuming 3 minutes for MTTD\n\n// --- Save context for next calculation ---\nflow.set('Electrical_endtime', endTime.toISOString());\nflow.set('Electrical_count', incidentCount + 1);\n\n// --- Final Insert Query ---\nmsg.topic = \"INSERT INTO electrical (starttime, endtime, Incidents, Uptime, Downtime, MTBF, MTTR, MTTF, MTBSI, Availability, FailureRate, MTBM, MTTA, MTTD, TotalTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    currStart.toISOString().slice(0, 19).replace('T', ' '),\n    endTime.toISOString().slice(0, 19).replace('T', ' '),\n    incidentCount,\n    totalUptime,\n    totalRepairTime,\n    mtbf,\n    mttr,\n    mttf,\n    mtbsi,\n    availability,\n    failureRate,\n    mtbm,\n    mtta,\n    mttd,\n    totalTime\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 180,
        "wires": [
            [
                "68e3d1ef082936ec"
            ]
        ]
    },
    {
        "id": "8ee66768d70ffd63",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "Power Failure",
        "func": "// var a = 90;\n// flow.set('powerFailure', a);\n\n// msg.payload = {\n//     powerFailure: a\n// }\n\n// return msg;\n\n// let a = 90;\n// flow.set('powerFailure', a);\n\n// // Get previous endtime from flow context\n// let prevEndStr = flow.get('powerFailure_endtime');\n// let prevEnd;\n\n// // Ensure prevEnd is a valid Date object\n// if (prevEndStr) {\n//     prevEnd = new Date(prevEndStr);\n//     if (isNaN(prevEnd.getTime())) {\n//         node.warn(\"Invalid prev_endtime detected. Falling back.\");\n//         prevEnd = new Date(Date.now() - a * 60000); // fallback\n//     }\n// } else {\n//     prevEnd = new Date(Date.now() - a * 60000); // fallback\n// }\n\n// // Get current time as start\n// let currStart = new Date();\n// if (isNaN(currStart.getTime())) {\n//     node.error(\"Invalid current time\");\n//     return null;\n// }\n\n// // Debug log for diagnosis\n// node.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// // Get incident count\n// let incidentCount = flow.get('powerFailure_count') || 1;\n\n// // 🧠 Now safely subtract\n// let diffMs = currStart.getTime() - prevEnd.getTime(); // use .getTime() for numeric subtraction\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// // Calculate end time\n// let endTime = new Date(currStart.getTime() + a * 60000);\n\n// // Save for next incident\n// flow.set('powerFailure_endtime', endTime.toISOString());\n// flow.set('powerFailure_count', incidentCount + 1);\n\n// // Insert into DB\n// msg.topic = \"INSERT INTO powerfailure (starttime, endtime, MTBF) VALUES (?, ?, ?)\";\n// msg.payload = [\n//     currStart.toISOString().slice(0, 19).replace('T', ' '),\n//     endTime.toISOString().slice(0, 19).replace('T', ' '),\n//     mtbf\n// ];\n\n// return msg;\n\n\nlet a = 90;\nflow.set('powerFailure', a); // store for reference\n\n// Get previous endtime\nlet prevEndStr = flow.get('powerFailure_endtime');\nlet prevEnd;\n\nif (prevEndStr) {\n    prevEnd = new Date(prevEndStr);\n    if (isNaN(prevEnd.getTime())) {\n        node.warn(\"Invalid prev_endtime detected. Falling back.\");\n        prevEnd = new Date(Date.now() - a * 60000); // fallback\n    }\n} else {\n    prevEnd = new Date(Date.now() - a * 60000); // fallback\n}\n\n// Current time\nlet currStart = new Date();\nif (isNaN(currStart.getTime())) {\n    node.error(\"Invalid current time\");\n    return null;\n}\n\n// Debug\nnode.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// Incident/failure count\nlet incidentCount = flow.get('powerFailure_count') || 1;\n\n// 🧠 MTBF Calculation\nlet diffMs = currStart.getTime() - prevEnd.getTime();\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// End time (current start + duration 'a')\nlet endTime = new Date(currStart.getTime() + a * 60000);\n\n// --- New Calculations for OEE Metrics ---\n\n// Total accumulated uptime (for MTTF)\nlet totalUptime = flow.get('powerFailure_total_uptime') || 0;\n// totalUptime += mtbf;\n\n// Total accumulated repair time (for MTTR)\nlet repairTime = flow.get('powerFailure_last_repair_time') || 10; // assume fixed repair time 10 mins for now\nlet totalRepairTime = flow.get('powerFailure_total_repair') || 0;\ntotalRepairTime += repairTime;\n\nlet totalTime = totalUptime + totalRepairTime;\n\nlet mttf = Math.floor(totalTime / incidentCount);\n\n\n// Update counts\nflow.set('powerFailure_total_uptime', totalUptime);\nflow.set('powerFailure_total_repair', totalRepairTime);\n\n// MTTF = total operating time / number of failures\nlet mtbf = Math.floor(totalUptime / incidentCount);\n\n// MTTR = total repair time / number of failures\nlet mttr = Math.floor(totalRepairTime / incidentCount);\n\n// MTBSI and MTBM = MTBF + MTTR\n// let mtbsi = (mtbf + mttr) / incidentCount;\n\nlet mtbsi = totalTime / incidentCount;\n\nlet mtbm = mtbf + mttr;\n\n// Availability (%) = (MTBF / (MTBF + MTTR)) * 100\nlet availability = (mtbf / (mtbf + mttr)) * 100;\navailability = Math.floor(availability);\n\n\n// Failure Rate = 1 / MTTF\nlet failureRate = (mttf !== 0) ? (1 / mttf).toFixed(4) : 0;\n\n// Placeholder for MTTA (time to acknowledge) and MTTD (time to detect)\nlet mtta = 5;  // assuming 5 minutes for MTTA\nlet mttd = 3;  // assuming 3 minutes for MTTD\n\n// --- Save context for next calculation ---\nflow.set('powerFailure_endtime', endTime.toISOString());\nflow.set('powerFailure_count', incidentCount + 1);\n\n// --- Final Insert Query ---\nmsg.topic = \"INSERT INTO powerfailure (starttime, endtime, Incidents, Uptime, Downtime, MTBF, MTTR, MTTF, MTBSI, Availability, FailureRate, MTBM, MTTA, MTTD, TotalTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    currStart.toISOString().slice(0, 19).replace('T', ' '),\n    endTime.toISOString().slice(0, 19).replace('T', ' '),\n    incidentCount,\n    totalUptime,\n    totalRepairTime,\n    mtbf,\n    mttr,\n    mttf,\n    mtbsi,\n    availability,\n    failureRate,\n    mtbm,\n    mtta,\n    mttd,\n    totalTime\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 140,
        "wires": [
            [
                "68e3d1ef082936ec"
            ]
        ]
    },
    {
        "id": "806de01c271c12af",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "Mechanical Breakdown",
        "func": "// // var a = 30;\n// // flow.set('mech_brk', a);\n\n// // msg.payload = {\n// //     Mechanical_Breakdown: a\n// // }\n\n// // return msg;\n\n// let a = 30;\n// flow.set('mech_brk', a); // duration in minutes\n\n// // Get previous endtime from flow context\n// let prevEndStr = flow.get('mech_endtime');\n// let prevEnd;\n\n// // Ensure prevEnd is a valid Date object\n// if (prevEndStr) {\n//     prevEnd = new Date(prevEndStr);\n//     if (isNaN(prevEnd.getTime())) {\n//         node.warn(\"Invalid prev_endtime detected. Falling back.\");\n//         prevEnd = new Date(Date.now() - a * 60000); // fallback\n//     }\n// } else {\n//     prevEnd = new Date(Date.now() - a * 60000); // fallback\n// }\n\n// // Get current time as start\n// let currStart = new Date();\n// if (isNaN(currStart.getTime())) {\n//     node.error(\"Invalid current time\");\n//     return null;\n// }\n\n// // Debug log for diagnosis\n// node.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// // Get incident count\n// let incidentCount = flow.get('mech_count') || 1;\n\n// // 🧠 Now safely subtract\n// let diffMs = currStart.getTime() - prevEnd.getTime(); // use .getTime() for numeric subtraction\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// // Calculate end time\n// let endTime = new Date(currStart.getTime() + a * 60000);\n\n// // Save for next incident\n// flow.set('mech_endtime', endTime.toISOString());\n// flow.set('mech_count', incidentCount + 1);\n\n// // Insert into DB\n// msg.topic = \"INSERT INTO mech_brk (starttime, endtime, MTBF) VALUES (?, ?, ?)\";\n// msg.payload = [\n//     currStart.toISOString().slice(0, 19).replace('T', ' '),\n//     endTime.toISOString().slice(0, 19).replace('T', ' '),\n//     mtbf\n// ];\n\n// return msg;\n\n\n\n// Assume your failure duration \"a\" (for example, 30 minutes)\nlet a = 30;\nflow.set('mech_brk', a); // store for reference\n\n// Get previous endtime\nlet prevEndStr = flow.get('mech_endtime');\nlet prevEnd;\n\nif (prevEndStr) {\n    prevEnd = new Date(prevEndStr);\n    if (isNaN(prevEnd.getTime())) {\n        node.warn(\"Invalid prev_endtime detected. Falling back.\");\n        prevEnd = new Date(Date.now() - a * 60000); // fallback\n    }\n} else {\n    prevEnd = new Date(Date.now() - a * 60000); // fallback\n}\n\n// Current time\nlet currStart = new Date();\nif (isNaN(currStart.getTime())) {\n    node.error(\"Invalid current time\");\n    return null;\n}\n\n// Debug\nnode.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// Incident/failure count\nlet incidentCount = flow.get('mech_count') || 1;\n\n// 🧠 MTBF Calculation\nlet diffMs = currStart.getTime() - prevEnd.getTime();\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// End time (current start + duration 'a')\nlet endTime = new Date(currStart.getTime() + a * 60000);\n\n// --- New Calculations for OEE Metrics ---\n\n// Total accumulated uptime (for MTTF)\nlet totalUptime = flow.get('mech_total_uptime') || 0;\n// totalUptime += mtbf;\n\n// Total accumulated repair time (for MTTR)\nlet repairTime = flow.get('mech_last_repair_time') || 10; // assume fixed repair time 10 mins for now\nlet totalRepairTime = flow.get('mech_total_repair') || 0;\ntotalRepairTime += repairTime;\n\nlet totalTime = totalUptime + totalRepairTime;\n\nlet mttf = Math.floor(totalTime / incidentCount);\n\n// Update counts\nflow.set('mech_total_uptime', totalUptime);\nflow.set('mech_total_repair', totalRepairTime);\n\n// MTTF = total operating time / number of failures\nlet mtbf = Math.floor(totalUptime / incidentCount);\n\n// MTTR = total repair time / number of failures\nlet mttr = Math.floor(totalRepairTime / incidentCount);\n\n// MTBSI and MTBM = MTBF + MTTR\n// let mtbsi = (mtbf + mttr) / incidentCount;\n\nlet mtbsi = totalTime / incidentCount;\n\nlet mtbm = mtbf + mttr;\n\n// Availability (%) = (MTBF / (MTBF + MTTR)) * 100\nlet availability = (mtbf / (mtbf + mttr)) * 100;\navailability = Math.floor(availability);\n\n// Failure Rate = 1 / MTTF\nlet failureRate = (mttf !== 0) ? (1 / mttf).toFixed(4) : 0;\n\n// Placeholder for MTTA (time to acknowledge) and MTTD (time to detect)\nlet mtta = 5;  // assuming 5 minutes for MTTA\nlet mttd = 3;  // assuming 3 minutes for MTTD\n\n// --- Save context for next calculation ---\nflow.set('mech_endtime', endTime.toISOString());\nflow.set('mech_count', incidentCount + 1);\n\n// --- Final Insert Query ---\nmsg.topic = \"INSERT INTO mech_brk (starttime, endtime, Incidents, Uptime, Downtime, MTBF, MTTR, MTTF, MTBSI, Availability, FailureRate, MTBM, MTTA, MTTD, TotalTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    currStart.toISOString().slice(0, 19).replace('T', ' '),\n    endTime.toISOString().slice(0, 19).replace('T', ' '),\n    incidentCount,\n    totalUptime,\n    totalRepairTime,\n    mtbf,\n    mttr,\n    mttf,\n    mtbsi,\n    availability,\n    failureRate,\n    mtbm,\n    mtta,\n    mttd,\n    totalTime\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 60,
        "wires": [
            [
                "68e3d1ef082936ec"
            ]
        ]
    },
    {
        "id": "33af2b36c60ac4b8",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 09 * * 3,5",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1390,
        "y": 60,
        "wires": [
            [
                "806de01c271c12af"
            ]
        ]
    },
    {
        "id": "04115b17e8da1192",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 10 * * 2,4,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1390,
        "y": 100,
        "wires": [
            [
                "e951c3ed5df2e670"
            ]
        ]
    },
    {
        "id": "db5f7979e23d4a95",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 05 * * 1,3,5,0",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1390,
        "y": 140,
        "wires": [
            [
                "8ee66768d70ffd63"
            ]
        ]
    },
    {
        "id": "89fb7e86b9e12876",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 06 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1390,
        "y": 180,
        "wires": [
            [
                "3af72093016a856d"
            ]
        ]
    },
    {
        "id": "8555341694376891",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "SKU Change",
        "func": "// var a = 30;\n// flow.set('sku', a);\n\n// msg.payload = {\n//     sku: a\n// }\n\n// return msg;\n\n\n\n// let a = 30;\n// flow.set('sku', a);\n\n// // Get previous endtime from flow context\n// let prevEndStr = flow.get('sku_endtime');\n// let prevEnd;\n\n// // Ensure prevEnd is a valid Date object\n// if (prevEndStr) {\n//     prevEnd = new Date(prevEndStr);\n//     if (isNaN(prevEnd.getTime())) {\n//         node.warn(\"Invalid prev_endtime detected. Falling back.\");\n//         prevEnd = new Date(Date.now() - a * 60000); // fallback\n//     }\n// } else {\n//     prevEnd = new Date(Date.now() - a * 60000); // fallback\n// }\n\n// // Get current time as start\n// let currStart = new Date();\n// if (isNaN(currStart.getTime())) {\n//     node.error(\"Invalid current time\");\n//     return null;\n// }\n\n// // Debug log for diagnosis\n// node.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// // Get incident count\n// let incidentCount = flow.get('sku_count') || 1;\n\n// // 🧠 Now safely subtract\n// let diffMs = currStart.getTime() - prevEnd.getTime(); // use .getTime() for numeric subtraction\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// // Calculate end time\n// let endTime = new Date(currStart.getTime() + a * 60000);\n\n// // Save for next incident\n// flow.set('sku_endtime', endTime.toISOString());\n// flow.set('sku_count', incidentCount + 1);\n\n// // Insert into DB\n// msg.topic = \"INSERT INTO sku (starttime, endtime, MTBF) VALUES (?, ?, ?)\";\n// msg.payload = [\n//     currStart.toISOString().slice(0, 19).replace('T', ' '),\n//     endTime.toISOString().slice(0, 19).replace('T', ' '),\n//     mtbf\n// ];\n\n// return msg;\n\n\nlet a = 30;\nflow.set('sku', a); // store for reference\n\n// Get previous endtime\nlet prevEndStr = flow.get('sku_endtime');\nlet prevEnd;\n\nif (prevEndStr) {\n    prevEnd = new Date(prevEndStr);\n    if (isNaN(prevEnd.getTime())) {\n        node.warn(\"Invalid prev_endtime detected. Falling back.\");\n        prevEnd = new Date(Date.now() - a * 60000); // fallback\n    }\n} else {\n    prevEnd = new Date(Date.now() - a * 60000); // fallback\n}\n\n// Current time\nlet currStart = new Date();\nif (isNaN(currStart.getTime())) {\n    node.error(\"Invalid current time\");\n    return null;\n}\n\n// Debug\nnode.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// Incident/failure count\nlet incidentCount = flow.get('sku_count') || 1;\n\n// 🧠 MTBF Calculation\nlet diffMs = currStart.getTime() - prevEnd.getTime();\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// End time (current start + duration 'a')\nlet endTime = new Date(currStart.getTime() + a * 60000);\n\n// --- New Calculations for OEE Metrics ---\n\n// Total accumulated uptime (for MTTF)\nlet totalUptime = flow.get('sku_total_uptime') || 0;\n// totalUptime += mtbf;\n\n// Total accumulated repair time (for MTTR)\nlet repairTime = flow.get('sku_last_repair_time') || 10; // assume fixed repair time 10 mins for now\nlet totalRepairTime = flow.get('sku_total_repair') || 0;\ntotalRepairTime += repairTime;\n\n// Update counts\nflow.set('sku_total_uptime', totalUptime);\nflow.set('sku_total_repair', totalRepairTime);\n\n// MTTF = total operating time / number of failures\nlet mtbf = Math.floor(totalUptime / incidentCount);\n\n// MTTR = total repair time / number of failures\nlet mttr = Math.floor(totalRepairTime / incidentCount);\n\n// MTBSI and MTBM = MTBF + MTTR\n// let mtbsi = (mtbf + mttr) / incidentCount;\nlet mtbm = mtbf + mttr;\n\n// Availability (%) = (MTBF / (MTBF + MTTR)) * 100\nlet availability = (mtbf / (mtbf + mttr)) * 100;\navailability = Math.floor(availability);\n\nlet totalTime = totalUptime + totalRepairTime;\n\n\nlet mtbsi = totalTime / incidentCount;\n\n\nlet mttf = Math.floor(totalTime / incidentCount);\n\n\n// Failure Rate = 1 / MTTF\nlet failureRate = (mttf !== 0) ? (1 / mttf).toFixed(4) : 0;\n\n// Placeholder for MTTA (time to acknowledge) and MTTD (time to detect)\nlet mtta = 5;  // assuming 5 minutes for MTTA\nlet mttd = 3;  // assuming 3 minutes for MTTD\n\n// --- Save context for next calculation ---\nflow.set('sku_endtime', endTime.toISOString());\nflow.set('sku_count', incidentCount + 1);\n\n// --- Final Insert Query ---\nmsg.topic = \"INSERT INTO sku (starttime, endtime, Incidents, Uptime, Downtime, MTBF, MTTR, MTTF, MTBSI, Availability, FailureRate, MTBM, MTTA, MTTD, TotalTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    currStart.toISOString().slice(0, 19).replace('T', ' '),\n    endTime.toISOString().slice(0, 19).replace('T', ' '),\n    incidentCount,\n    totalUptime,\n    totalRepairTime,\n    mtbf,\n    mttr,\n    mttf,\n    mtbsi,\n    availability,\n    failureRate,\n    mtbm,\n    mtta,\n    mttd,\n    totalTime\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 300,
        "wires": [
            [
                "68e3d1ef082936ec"
            ]
        ]
    },
    {
        "id": "e18a1fe5292c0f21",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,4,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1390,
        "y": 300,
        "wires": [
            [
                "8555341694376891"
            ]
        ]
    },
    {
        "id": "56d92074d0c236c4",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "Startup",
        "func": "// var a = 20;\n// flow.set('startup', a);\n\n// msg.payload = {\n//     startup: a\n// }\n\n// return msg;\n\n\n\n// let a = 20;\n// flow.set('startup', a);\n\n// // Get previous endtime from flow context\n// let prevEndStr = flow.get('startup_endtime');\n// let prevEnd;\n\n// // Ensure prevEnd is a valid Date object\n// if (prevEndStr) {\n//     prevEnd = new Date(prevEndStr);\n//     if (isNaN(prevEnd.getTime())) {\n//         node.warn(\"Invalid prev_endtime detected. Falling back.\");\n//         prevEnd = new Date(Date.now() - a * 60000); // fallback\n//     }\n// } else {\n//     prevEnd = new Date(Date.now() - a * 60000); // fallback\n// }\n\n// // Get current time as start\n// let currStart = new Date();\n// if (isNaN(currStart.getTime())) {\n//     node.error(\"Invalid current time\");\n//     return null;\n// }\n\n// // Debug log for diagnosis\n// node.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// // Get incident count\n// let incidentCount = flow.get('startup_count') || 1;\n\n// // 🧠 Now safely subtract\n// let diffMs = currStart.getTime() - prevEnd.getTime(); // use .getTime() for numeric subtraction\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// // Calculate end time\n// let endTime = new Date(currStart.getTime() + a * 60000);\n\n// // Save for next incident\n// flow.set('startup_endtime', endTime.toISOString());\n// flow.set('startup_count', incidentCount + 1);\n\n// // Insert into DB\n// msg.topic = \"INSERT INTO startup (starttime, endtime, MTBF) VALUES (?, ?, ?)\";\n// msg.payload = [\n//     currStart.toISOString().slice(0, 19).replace('T', ' '),\n//     endTime.toISOString().slice(0, 19).replace('T', ' '),\n//     mtbf\n// ];\n\n// return msg;\n\nlet a = 20;\nflow.set('startup', a); // store for reference\n\n// Get previous endtime\nlet prevEndStr = flow.get('startup_endtime');\nlet prevEnd;\n\nif (prevEndStr) {\n    prevEnd = new Date(prevEndStr);\n    if (isNaN(prevEnd.getTime())) {\n        node.warn(\"Invalid prev_endtime detected. Falling back.\");\n        prevEnd = new Date(Date.now() - a * 60000); // fallback\n    }\n} else {\n    prevEnd = new Date(Date.now() - a * 60000); // fallback\n}\n\n// Current time\nlet currStart = new Date();\nif (isNaN(currStart.getTime())) {\n    node.error(\"Invalid current time\");\n    return null;\n}\n\n// Debug\nnode.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// Incident/failure count\nlet incidentCount = flow.get('startup_count') || 1;\n\n// 🧠 MTBF Calculation\nlet diffMs = currStart.getTime() - prevEnd.getTime();\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// End time (current start + duration 'a')\nlet endTime = new Date(currStart.getTime() + a * 60000);\n\n// --- New Calculations for OEE Metrics ---\n\n// Total accumulated uptime (for MTTF)\nlet totalUptime = flow.get('startup_total_uptime') || 0;\n// totalUptime += mtbf;\n\n// Total accumulated repair time (for MTTR)\nlet repairTime = flow.get('startup_last_repair_time') || 10; // assume fixed repair time 10 mins for now\nlet totalRepairTime = flow.get('startup_total_repair') || 0;\ntotalRepairTime += repairTime;\n\nlet totalTime = totalUptime + totalRepairTime;\n\nlet mttf = Math.floor(totalTime / incidentCount);\n\n\n// Update counts\nflow.set('startup_total_uptime', totalUptime);\nflow.set('startup_total_repair', totalRepairTime);\n\n// MTTF = total operating time / number of failures\nlet mtbf = Math.floor(totalUptime / incidentCount);\n\n// MTTR = total repair time / number of failures\nlet mttr = Math.floor(totalRepairTime / incidentCount);\n\n// MTBSI and MTBM = MTBF + MTTR\n// let mtbsi = (mtbf + mttr) / incidentCount;\n\nlet mtbsi = totalTime / incidentCount;\n\nlet mtbm = mtbf + mttr;\n\n// Availability (%) = (MTBF / (MTBF + MTTR)) * 100\nlet availability = (mtbf / (mtbf + mttr)) * 100;\navailability = Math.floor(availability);\n\n// Failure Rate = 1 / MTTF\nlet failureRate = (mttf !== 0) ? (1 / mttf).toFixed(4) : 0;\n\n// Placeholder for MTTA (time to acknowledge) and MTTD (time to detect)\nlet mtta = 5;  // assuming 5 minutes for MTTA\nlet mttd = 3;  // assuming 3 minutes for MTTD\n\n// --- Save context for next calculation ---\nflow.set('startup_endtime', endTime.toISOString());\nflow.set('startup_count', incidentCount + 1);\n\n// --- Final Insert Query ---\nmsg.topic = \"INSERT INTO startup (starttime, endtime, Incidents, Uptime, Downtime, MTBF, MTTR, MTTF, MTBSI, Availability, FailureRate, MTBM, MTTA, MTTD, TotalTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    currStart.toISOString().slice(0, 19).replace('T', ' '),\n    endTime.toISOString().slice(0, 19).replace('T', ' '),\n    incidentCount,\n    totalUptime,\n    totalRepairTime,\n    mtbf,\n    mttr,\n    mttf,\n    mtbsi,\n    availability,\n    failureRate,\n    mtbm,\n    mtta,\n    mttd,\n    totalTime\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 260,
        "wires": [
            [
                "68e3d1ef082936ec"
            ]
        ]
    },
    {
        "id": "57cd673ba084d019",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "45 08 * * 1,2,6",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "56d92074d0c236c4"
            ]
        ]
    },
    {
        "id": "9adb62a8d09f59a3",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "name": "Minor Stoppage",
        "func": "// var a = 40;\n// flow.set('minorStop', a);\n\n// msg.payload = {\n//     minorStop: a\n// }\n\n// return msg;\n\n\n\n// let a = 40;\n// flow.set('minorStop', a);\n\n// // Get previous endtime from flow context\n// let prevEndStr = flow.get('minorStop_endtime');\n// let prevEnd;\n\n// // Ensure prevEnd is a valid Date object\n// if (prevEndStr) {\n//     prevEnd = new Date(prevEndStr);\n//     if (isNaN(prevEnd.getTime())) {\n//         node.warn(\"Invalid prev_endtime detected. Falling back.\");\n//         prevEnd = new Date(Date.now() - a * 60000); // fallback\n//     }\n// } else {\n//     prevEnd = new Date(Date.now() - a * 60000); // fallback\n// }\n\n// // Get current time as start\n// let currStart = new Date();\n// if (isNaN(currStart.getTime())) {\n//     node.error(\"Invalid current time\");\n//     return null;\n// }\n\n// // Debug log for diagnosis\n// node.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// // Get incident count\n// let incidentCount = flow.get('minorStop_count') || 1;\n\n// // 🧠 Now safely subtract\n// let diffMs = currStart.getTime() - prevEnd.getTime(); // use .getTime() for numeric subtraction\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// // Calculate end time\n// let endTime = new Date(currStart.getTime() + a * 60000);\n\n// // Save for next incident\n// flow.set('minorStop_endtime', endTime.toISOString());\n// flow.set('minorStop_count', incidentCount + 1);\n\n// // Insert into DB\n// msg.topic = \"INSERT INTO minorstop (starttime, endtime, MTBF) VALUES (?, ?, ?)\";\n// msg.payload = [\n//     currStart.toISOString().slice(0, 19).replace('T', ' '),\n//     endTime.toISOString().slice(0, 19).replace('T', ' '),\n//     mtbf\n// ];\n\n// return msg;\n\n\nlet a = 40;\nflow.set('minorStop', a); // store for reference\n\n// Get previous endtime\nlet prevEndStr = flow.get('minorStop_endtime');\nlet prevEnd;\n\nif (prevEndStr) {\n    prevEnd = new Date(prevEndStr);\n    if (isNaN(prevEnd.getTime())) {\n        node.warn(\"Invalid prev_endtime detected. Falling back.\");\n        prevEnd = new Date(Date.now() - a * 60000); // fallback\n    }\n} else {\n    prevEnd = new Date(Date.now() - a * 60000); // fallback\n}\n\n// Current time\nlet currStart = new Date();\nif (isNaN(currStart.getTime())) {\n    node.error(\"Invalid current time\");\n    return null;\n}\n\n// Debug\nnode.warn(`prevEnd: ${prevEnd.toISOString()}, currStart: ${currStart.toISOString()}`);\n\n// Incident/failure count\nlet incidentCount = flow.get('minorStop_count') || 1;\n\n// 🧠 MTBF Calculation\nlet diffMs = currStart.getTime() - prevEnd.getTime();\n// let mtbf = Math.floor(diffMs / (60000 * incidentCount)); // MTBF in minutes\n\n// End time (current start + duration 'a')\nlet endTime = new Date(currStart.getTime() + a * 60000);\n\n// --- New Calculations for OEE Metrics ---\n\n// Total accumulated uptime (for MTTF)\nlet totalUptime = flow.get('minorStop_total_uptime') || 0;\n// totalUptime += mtbf;\n\n// Total accumulated repair time (for MTTR)\nlet repairTime = flow.get('minorStop_last_repair_time') || 10; // assume fixed repair time 10 mins for now\nlet totalRepairTime = flow.get('minorStop_total_repair') || 0;\ntotalRepairTime += repairTime;\n\n// Update counts\nflow.set('minorStop_total_uptime', totalUptime);\nflow.set('minorStop_total_repair', totalRepairTime);\n\n// MTTF = total operating time / number of failures\nlet mtbf = Math.floor(totalUptime / incidentCount);\n\n// MTTR = total repair time / number of failures\nlet mttr = Math.floor(totalRepairTime / incidentCount);\n\n// MTBSI and MTBM = MTBF + MTTR\n// let mtbsi = (mtbf + mttr) / incidentCount;\nlet mtbm = mtbf + mttr;\n\n// Availability (%) = (MTBF / (MTBF + MTTR)) * 100\nlet availability = (mtbf / (mtbf + mttr)) * 100;\navailability = Math.floor(availability);\n\nlet totalTime = totalUptime + totalRepairTime;\n\nlet mtbsi = totalTime / incidentCount;\n\n\nlet mttf = Math.floor(totalTime / incidentCount);\n\n\n// Failure Rate = 1 / MTTF\nlet failureRate = (mttf !== 0) ? (1 / mttf).toFixed(4) : 0;\n\n// Placeholder for MTTA (time to acknowledge) and MTTD (time to detect)\nlet mtta = 5;  // assuming 5 minutes for MTTA\nlet mttd = 3;  // assuming 3 minutes for MTTD\n\n// --- Save context for next calculation ---\nflow.set('minorStop_endtime', endTime.toISOString());\nflow.set('minorStop_count', incidentCount + 1);\n\n// --- Final Insert Query ---\nmsg.topic = \"INSERT INTO minorstop (starttime, endtime, Incidents, Uptime, Downtime, MTBF, MTTR, MTTF, MTBSI, Availability, FailureRate, MTBM, MTTA, MTTD, TotalTime) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    currStart.toISOString().slice(0, 19).replace('T', ' '),\n    endTime.toISOString().slice(0, 19).replace('T', ' '),\n    incidentCount,\n    totalUptime,\n    totalRepairTime,\n    mtbf,\n    mttr,\n    mttf,\n    mtbsi,\n    availability,\n    failureRate,\n    mtbm,\n    mtta,\n    mttd,\n    totalTime\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 220,
        "wires": [
            [
                "68e3d1ef082936ec"
            ]
        ]
    },
    {
        "id": "32c243ecd0a09be7",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "809e2db64409b1e4"
            ]
        ]
    },
    {
        "id": "95a01976251f5bb8",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 790,
        "y": 120,
        "wires": [
            [
                "4f28581a762c1def",
                "d558a22774cc5eab",
                "62889a042256517a",
                "fd6bc5a976f782c7"
            ]
        ]
    },
    {
        "id": "4f28581a762c1def",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "UI OEE",
        "func": "msg.payload = parseFloat(flow.get('oee').toFixed(2));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 60,
        "wires": [
            [
                "d444118e6aa78f1f"
            ]
        ]
    },
    {
        "id": "d558a22774cc5eab",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "UI avail",
        "func": "msg.payload = parseFloat(flow.get('availability').toFixed(2));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 100,
        "wires": [
            [
                "c91ebb7e704a1c37"
            ]
        ]
    },
    {
        "id": "c91ebb7e704a1c37",
        "type": "ui-gauge",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "",
        "group": "65630edffb558002",
        "order": 1,
        "width": 4,
        "height": 5,
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "AVAILABILITY",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f31212"
            },
            {
                "from": "0.3",
                "color": "#f2f561"
            },
            {
                "from": "0.5",
                "color": "#53f99b"
            },
            {
                "from": "0.8",
                "color": "#0fff57"
            }
        ],
        "min": 0,
        "max": "1",
        "sizeThickness": "18",
        "sizeGap": "4",
        "sizeKeyThickness": "8",
        "styleRounded": true,
        "styleGlow": false,
        "className": "/* Apply styles to the UI Gauge */ .nr-dashboard-theme .nr-dashboard-ui_gauge {     border-radius: 20px;     box-shadow: 0 6px 15px rgba(0, 0, 0, 0.4);     background: rgba(50, 50, 50, 0.3); /* Semi-transparent glass effect */     backdrop-filter: blur(8px);     padding: 12px;     transition: transform 0.3s ease-in-out; }  /* Hover effect - Slight lift */ .nr-dashboard-theme .nr-dashboard-ui_gauge:hover {     transform: scale(1.05); }  /* Gauge Title */ .nr-dashboard-ui_gauge .nr-dashboard-widget-title {     font-size: 20px;     font-weight: bold;     color: #ffffff !important;     text-align: center;     margin-bottom: 8px;     text-transform: uppercase; }  /* Customizing the Gauge Meter */ .nr-dashboard-ui_gauge svg {     filter: drop-shadow(3px 3px 8px rgba(0, 255, 255, 0.4)); }  /* Gauge Value (Number inside Gauge) */ .nr-dashboard-ui_gauge text {     font-size: 22px !important;     font-weight: bold;     fill: #ffffff !important; }  /* Colorful Animated Border */ .nr-dashboard-ui_gauge {     border: 3px solid;     border-image: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce) 1;     animation: border-animation 5s infinite linear; }  /* Border Animation */ @keyframes border-animation {     0% {         border-image-source: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce);     }     25% {         border-image-source: linear-gradient(45deg, #0094ce, #ff7b00, #ff3d00, #ff00ff, #7700ff);     }     50% {         border-image-source: linear-gradient(45deg, #7700ff, #0094ce, #ff7b00, #ff3d00, #ff00ff);     }     75% {         border-image-source: linear-gradient(45deg, #ff00ff, #7700ff, #0094ce, #ff7b00, #ff3d00);     }     100% {         border-image-source: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce);     } }  /* Dark Background for Widget Group */ .nr-dashboard-ui_group {     background: rgba(40, 40, 40, 0.9) !important;     border-radius: 12px;     padding: 12px;     box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4); }  /* Dark Theme for the Whole Dashboard */ body {     background-color: #121212 !important;     color: #ffffff !important; }  /* Custom Scrollbar */ ::-webkit-scrollbar {     width: 10px; }  ::-webkit-scrollbar-track {     background: #2a2a2a; }  ::-webkit-scrollbar-thumb {     background: linear-gradient(45deg, #ff7b00, #ff3d00, #0094ce);     border-radius: 10px; }",
        "x": 1140,
        "y": 100,
        "wires": []
    },
    {
        "id": "ac2c223d6587fd4a",
        "type": "ui-gauge",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "",
        "group": "05b7886182ed7bff",
        "order": 1,
        "width": 4,
        "height": 5,
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "QUALITY",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#fd1717"
            },
            {
                "from": "0.3",
                "color": "#f2f561"
            },
            {
                "from": "0.5",
                "color": "#53f99b"
            },
            {
                "from": "0.8",
                "color": "#0fff57"
            }
        ],
        "min": 0,
        "max": "1",
        "sizeThickness": "18",
        "sizeGap": "4",
        "sizeKeyThickness": "8",
        "styleRounded": true,
        "styleGlow": false,
        "className": "/* Apply styles to the UI Gauge */ .nr-dashboard-theme .nr-dashboard-ui_gauge {     border-radius: 20px;     box-shadow: 0 6px 15px rgba(0, 0, 0, 0.4);     background: rgba(50, 50, 50, 0.3); /* Semi-transparent glass effect */     backdrop-filter: blur(8px);     padding: 12px;     transition: transform 0.3s ease-in-out; }  /* Hover effect - Slight lift */ .nr-dashboard-theme .nr-dashboard-ui_gauge:hover {     transform: scale(1.05); }  /* Gauge Title */ .nr-dashboard-ui_gauge .nr-dashboard-widget-title {     font-size: 20px;     font-weight: bold;     color: #ffffff !important;     text-align: center;     margin-bottom: 8px;     text-transform: uppercase; }  /* Customizing the Gauge Meter */ .nr-dashboard-ui_gauge svg {     filter: drop-shadow(3px 3px 8px rgba(0, 255, 255, 0.4)); }  /* Gauge Value (Number inside Gauge) */ .nr-dashboard-ui_gauge text {     font-size: 22px !important;     font-weight: bold;     fill: #ffffff !important; }  /* Colorful Animated Border */ .nr-dashboard-ui_gauge {     border: 3px solid;     border-image: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce) 1;     animation: border-animation 5s infinite linear; }  /* Border Animation */ @keyframes border-animation {     0% {         border-image-source: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce);     }     25% {         border-image-source: linear-gradient(45deg, #0094ce, #ff7b00, #ff3d00, #ff00ff, #7700ff);     }     50% {         border-image-source: linear-gradient(45deg, #7700ff, #0094ce, #ff7b00, #ff3d00, #ff00ff);     }     75% {         border-image-source: linear-gradient(45deg, #ff00ff, #7700ff, #0094ce, #ff7b00, #ff3d00);     }     100% {         border-image-source: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce);     } }  /* Dark Background for Widget Group */ .nr-dashboard-ui_group {     background: rgba(40, 40, 40, 0.9) !important;     border-radius: 12px;     padding: 12px;     box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4); }  /* Dark Theme for the Whole Dashboard */ body {     background-color: #121212 !important;     color: #ffffff !important; }  /* Custom Scrollbar */ ::-webkit-scrollbar {     width: 10px; }  ::-webkit-scrollbar-track {     background: #2a2a2a; }  ::-webkit-scrollbar-thumb {     background: linear-gradient(45deg, #ff7b00, #ff3d00, #0094ce);     border-radius: 10px; }",
        "x": 1120,
        "y": 140,
        "wires": []
    },
    {
        "id": "62889a042256517a",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "UI avail",
        "func": "msg.payload = parseFloat(flow.get('Quality').toFixed(2));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 140,
        "wires": [
            [
                "ac2c223d6587fd4a"
            ]
        ]
    },
    {
        "id": "fd6bc5a976f782c7",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "UI avail",
        "func": "msg.payload = parseFloat(flow.get('performance').toFixed(2));\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "cf7730b59646edf0"
            ]
        ]
    },
    {
        "id": "cf7730b59646edf0",
        "type": "ui-gauge",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "",
        "group": "82b6df8563e666cf",
        "order": 1,
        "width": 4,
        "height": 5,
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "PERFORMANCE",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f32020"
            },
            {
                "from": "0.3",
                "color": "#f2f561"
            },
            {
                "from": "0.5",
                "color": "#53f99b"
            },
            {
                "from": "0.8",
                "color": "#0fff57"
            }
        ],
        "min": 0,
        "max": "1",
        "sizeThickness": "18",
        "sizeGap": "4",
        "sizeKeyThickness": "8",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1150,
        "y": 180,
        "wires": []
    },
    {
        "id": "24fb177890e71e8e",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "mydb": "cffef3faccffbe3a",
        "name": "",
        "x": 710,
        "y": 920,
        "wires": [
            [
                "1029807760995099",
                "f72964651788e3ae"
            ]
        ]
    },
    {
        "id": "81ed3532d5bc2761",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 250,
        "y": 960,
        "wires": [
            [
                "ac8f77625d96c25d"
            ]
        ]
    },
    {
        "id": "ac8f77625d96c25d",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "Insert OEE from context to DB",
        "func": "let oee = parseFloat(flow.get('oee').toFixed(2)) || 0;\nlet availability = parseFloat(flow.get('availability').toFixed(2)) || 0;\nlet quality = parseFloat(flow.get('Quality').toFixed(2)) || 0;  // Fixed casing\nlet performance = parseFloat(flow.get('performance').toFixed(2)) || 0;\n\nmsg.topic = \"INSERT INTO OEE (oee, availability, quality, performance) VALUES (?, ?, ?, ?)\";\nmsg.payload = [oee, availability, quality, performance];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 920,
        "wires": [
            [
                "24fb177890e71e8e"
            ]
        ]
    },
    {
        "id": "5ef8a1a2dae7dd7c",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "TIme Range",
        "group": "2bcedee2b1e94811",
        "order": 3,
        "width": 11,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 290,
        "y": 760,
        "wires": [
            [
                "d3d2d427e3324fee",
                "d5c0b47aded5db9d",
                "323d2583a4ff5ed2"
            ]
        ]
    },
    {
        "id": "d5c0b47aded5db9d",
        "type": "delay",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 760,
        "wires": [
            [
                "d3d2d427e3324fee"
            ]
        ]
    },
    {
        "id": "d3d2d427e3324fee",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "Time Range filter",
        "func": "var input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_oee', timeFilter);\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, oee, availability, quality, performance FROM OEE WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, oee, availability, quality, performance FROM OEE WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, oee, availability, quality, performance FROM OEE WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n} else if (input === 15) {\n    msg.topic = `SELECT timestamp, oee, availability, quality, performance FROM OEE WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n} else if (input === 60) {\n    msg.topic = `SELECT timestamp, oee, availability, quality, performance FROM OEE WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n} else if (input === 12) {\n    msg.topic = `SELECT timestamp, oee, availability, quality, performance FROM OEE WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n// var input = msg.payload;  \n// var timeFilter = parseInt(input, 10);\n// flow.set('timeFilter_oee', timeFilter);\n\n// var mode = flow.get('average');  // \"average\" or \"none\"\n// msg.reset = true;  // destroy chart before updating\n\n// let timeCondition = \"\";\n\n// if (timeFilter === 1) {\n//     timeCondition = \"NOW() - INTERVAL 1 DAY\";\n// } else if (timeFilter === 3) {\n//     timeCondition = \"NOW() - INTERVAL 3 DAY\";\n// } else if (timeFilter === 7) {\n//     timeCondition = \"NOW() - INTERVAL 7 DAY\";\n// } else if (timeFilter === 15) {\n//     timeCondition = \"NOW() - INTERVAL 15 MINUTE\";\n// } else if (timeFilter === 60) {\n//     timeCondition = \"NOW() - INTERVAL 1 HOUR\";\n// } else if (timeFilter === 12) {\n//     timeCondition = \"NOW() - INTERVAL 12 HOUR\";\n// } else {\n//     msg.topic = \"\";\n//     msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n//     return msg;\n// }\n\n// // Build SQL query based on mode\n// if (mode === \"average\") {\n//     msg.topic = `\n//         SELECT \n//             AVG(oee) AS oee,\n//             AVG(availability) AS availability,\n//             AVG(quality) AS quality,\n//             AVG(performance) AS performance\n//         FROM OEE \n//         WHERE timestamp >= ${timeCondition};\n//     `;\n// } else {\n//     msg.topic = `\n//         SELECT \n//             timestamp, \n//             oee, \n//             availability, \n//             quality, \n//             performance \n//         FROM OEE \n//         WHERE timestamp >= ${timeCondition};\n//     `;\n// }\n\n// return msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 840,
        "wires": [
            [
                "24fb177890e71e8e"
            ]
        ]
    },
    {
        "id": "323d2583a4ff5ed2",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 760,
        "wires": [
            [
                "5074e18b421f3acf"
            ]
        ]
    },
    {
        "id": "1029807760995099",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "OEE Graph",
        "func": "// let dbData = msg.payload;\n// let timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Keep the original graph data structure unchanged\n// let graphData = dbData.map(row => ({\n//     x: row.timestamp,  // Ensure column name matches DB\n//     y: row.voltage\n// }));\n\n// // Attach the selected time range to the message for reference\n// msg.timeRange = timeFilter;\n\n// msg.payload = graphData;\n// return msg;\n\n\nlet dbData = msg.payload;\n// let timeFilter = msg.timeFilter;  // Ensure the selected time range is passed\nlet timeFilter = flow.get('timeFilter_oee') || 1; \nlet parameter = flow.get('parameter') || \"oee\"; // Retrieve selected parameter\n\n// Ensure data is valid\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Ensure parameter is set and valid\nconst allowedParameters = [\"oee\", \"availability\", \"quality\", \"performance\"];\nif (!allowedParameters.includes(parameter)) {\n    msg.payload = \"Invalid parameter. Please select 'oee', 'availability', 'quality', 'performance'\";\n    return msg;\n}\n\n// Convert DB data into graph data format\nlet graphData = dbData.map(row => ({\n    x: row.timestamp,  // Ensure the timestamp column exists\n    y: row[parameter]  // Dynamically select the correct parameter\n}));\n\n// Attach the selected time range for reference\nmsg.timeRange = timeFilter;\nmsg.payload = graphData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 920,
        "wires": [
            [
                "5074e18b421f3acf"
            ]
        ]
    },
    {
        "id": "ecca488a6fd1337d",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "Parameters",
        "group": "2bcedee2b1e94811",
        "order": 1,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "OEE",
                "icon": "",
                "value": "oee",
                "valueType": "str",
                "color": "#4400ff"
            },
            {
                "label": "Availability",
                "icon": "",
                "value": "availability",
                "valueType": "str",
                "color": "#0040ff"
            },
            {
                "label": "Quality",
                "icon": "",
                "value": "quality",
                "valueType": "str",
                "color": "#0b07e9"
            },
            {
                "label": "Performance",
                "icon": "",
                "value": "performance",
                "valueType": "str",
                "color": "#411df7"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 900,
        "wires": [
            [
                "c1753a22296ca877",
                "323d2583a4ff5ed2"
            ]
        ]
    },
    {
        "id": "c1753a22296ca877",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "Parameter Filter",
        "func": "var a = msg.payload;\nflow.set('parameter', a);\n\nvar timeFilter = flow.get('timeFilter_oee');\n\nconst allowedParameters = [\"oee\", \"availability\", \"quality\", \"performance\"];\n\n// Check if the selected parameter is valid\nif (!allowedParameters.includes(a)) {\n    msg.payload = \"Invalid parameter. Please select 'oee', 'availability', 'quality' or 'performance'\";\n    return msg;\n}\n\n// Define the time condition based on selection\nlet timeCondition = \"\";\nif (timeFilter === 1) {\n    timeCondition = \"NOW() - INTERVAL 1 DAY\";\n} else if (timeFilter === 3) {\n    timeCondition = \"NOW() - INTERVAL 3 DAY\";\n} else if (timeFilter === 7) {\n    timeCondition = \"NOW() - INTERVAL 7 DAY\";\n} else if (timeFilter === 15) {\n    timeCondition = \"NOW() - INTERVAL 15 MINUTE\";\n} else if (timeFilter === 60) {\n    timeCondition = \"NOW() - INTERVAL 1 HOUR\";\n} else if (timeFilter === 12) {\n    timeCondition = \"NOW() - INTERVAL 12 HOUR\";\n} else {\n    msg.payload = \"Invalid time range. Please select 15, 60, 12, 1, 3, or 7.\";\n    return msg;\n}\n\n// Construct the SQL query dynamically\nmsg.topic = `SELECT timestamp, ${a} FROM OEE WHERE timestamp >= ${timeCondition};`;\n\nreturn msg;\n\n\n\n// var a = msg.payload;\n// flow.set('parameter', a);\n\n// var timeFilter = flow.get('timeFilter_oee');\n// var mode = flow.get('average');  // could be \"average\" or \"none\"\n\n// const allowedParameters = [\"oee\", \"availability\", \"quality\", \"performance\"];\n\n// // Validate parameter\n// if (!allowedParameters.includes(a)) {\n//     msg.payload = \"Invalid parameter. Please select 'oee', 'availability', 'quality' or 'performance'\";\n//     return msg;\n// }\n\n// // Determine time condition\n// let timeCondition = \"\";\n// if (timeFilter === 1) {\n//     timeCondition = \"NOW() - INTERVAL 1 DAY\";\n// } else if (timeFilter === 3) {\n//     timeCondition = \"NOW() - INTERVAL 3 DAY\";\n// } else if (timeFilter === 7) {\n//     timeCondition = \"NOW() - INTERVAL 7 DAY\";\n// } else if (timeFilter === 15) {\n//     timeCondition = \"NOW() - INTERVAL 15 MINUTE\";\n// } else if (timeFilter === 60) {\n//     timeCondition = \"NOW() - INTERVAL 1 HOUR\";\n// } else if (timeFilter === 12) {\n//     timeCondition = \"NOW() - INTERVAL 12 HOUR\";\n// } else {\n//     msg.payload = \"Invalid time range. Please select 15, 60, 12, 1, 3, or 7.\";\n//     return msg;\n// }\n\n// // Construct query based on mode\n// if (mode === \"average\") {\n//     msg.topic = `SELECT AVG(${a}) AS ${a} FROM OEE WHERE timestamp >= ${timeCondition};`;\n// } else {\n//     msg.topic = `SELECT timestamp, ${a} FROM OEE WHERE timestamp >= ${timeCondition};`;\n// }\n\n// return msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 880,
        "wires": [
            [
                "24fb177890e71e8e"
            ]
        ]
    },
    {
        "id": "5074e18b421f3acf",
        "type": "ui-chart",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "group": "2bcedee2b1e94811",
        "name": "OEE",
        "label": "",
        "order": 2,
        "chartType": "line",
        "category": "",
        "categoryType": "none",
        "xAxisLabel": "",
        "xAxisProperty": "x",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "replace",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0e33ec",
            "#ff0000",
            "#e9c307",
            "#11e411",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 12,
        "height": 10,
        "className": "label {     font-size: 28px !important;  /* Huge labels */     color: #000000 !important;  /* Black text */     font-weight: bold;     }",
        "interpolation": "cubic",
        "x": 1150,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "0c97268ca263104f",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "group": "ff03da4a14f7deff",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "Good Count ✅",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "75",
        "color": "#0bf40f",
        "wrapText": false,
        "className": "",
        "x": 400,
        "y": 560,
        "wires": []
    },
    {
        "id": "a25fe7c3df4be154",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "function 9",
        "func": "msg.payload = flow.get('GoodCount');\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 560,
        "wires": [
            [
                "0c97268ca263104f"
            ]
        ]
    },
    {
        "id": "bf3ce2f80de036ca",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 70,
        "y": 560,
        "wires": [
            [
                "a25fe7c3df4be154",
                "1fe4a364a4a095ed",
                "79ef79294184ee15",
                "46168745aea635fe"
            ]
        ]
    },
    {
        "id": "6f68220d56210ed9",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "group": "513294d33bfbec69",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "Bad Count ❌",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "75",
        "color": "#f50505",
        "wrapText": false,
        "className": "",
        "x": 400,
        "y": 600,
        "wires": []
    },
    {
        "id": "1fe4a364a4a095ed",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "function 10",
        "func": "msg.payload = flow.get('BadCount');\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 600,
        "wires": [
            [
                "6f68220d56210ed9"
            ]
        ]
    },
    {
        "id": "e47dcd066b0deda1",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "OEE Table",
        "func": "let oee = parseFloat(flow.get('oee').toFixed(2)) || 0;\nlet availability = parseFloat(flow.get('availability').toFixed(2)) || 0;\nlet quality = parseFloat(flow.get('Quality').toFixed(2)) || 0;  // Fixed casing\nlet performance = parseFloat(flow.get('performance').toFixed(2)) || 0;\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\nlet data = { \n    timestamp: istTime, \n    oee: oee, \n    availability: availability, \n    quality: quality, \n    performance: performance\n};\n\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1220,
        "wires": [
            [
                "c858104cddad0c3a"
            ]
        ]
    },
    {
        "id": "c858104cddad0c3a",
        "type": "ui-table",
        "z": "55d7e6612f33eabf",
        "group": "15de81e4b21c7524",
        "name": "",
        "label": "OEE",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 850,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "d93d5c0ac204c711",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 430,
        "y": 1220,
        "wires": [
            [
                "e47dcd066b0deda1"
            ]
        ]
    },
    {
        "id": "664a676551b7eeca",
        "type": "ui-table",
        "z": "55d7e6612f33eabf",
        "group": "cc1f224031314102",
        "name": "",
        "label": "Shift Data",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1140,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "f72964651788e3ae",
        "type": "csv",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "",
        "spec": "",
        "sep": ",",
        "hdrin": false,
        "hdrout": "all",
        "multi": "one",
        "ret": "\\r\\n",
        "temp": "timestamp, oee, availability, quality, performance ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": "",
        "x": 870,
        "y": 980,
        "wires": [
            [
                "1d578377e711c173"
            ]
        ]
    },
    {
        "id": "1d578377e711c173",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "function 16",
        "func": "msg.path = '/home/ubuntu/.node-red/public/oee.csv';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 980,
        "wires": [
            [
                "129033b3ddfb84d3"
            ]
        ]
    },
    {
        "id": "129033b3ddfb84d3",
        "type": "file",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "name": "",
        "filename": "path",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1180,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "1d9708dc5d421b39",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "addd420705e01323",
        "group": "2bcedee2b1e94811",
        "page": "",
        "ui": "",
        "name": "",
        "order": 4,
        "width": 1,
        "height": "",
        "head": "",
        "format": "<div style=\"display: flex; justify-content: center; align-items: center; width: 100%; height: 100%;\">\n    <button class=\"nr-dashboard-button\"\n        onclick=\"window.location.href='http://13.201.130.80:1880/oee.csv';\"\n        style=\"width: 130%; height: 100%; font-size: 18px; font-weight: bold; \n               color: white; background-color: #007bff; border: none; border-radius: 8px;\n               cursor: pointer; transition: background-color 0.3s ease;\">\n        DOWNLOAD\n    </button>\n</div>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 700,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "8902803ba4735add",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "Shift A",
        "func": "// Retrieve accumulated values\nvar total_production = flow.get('accumulatedTotalProduction') || 0;\nvar good_count = flow.get('accumulatedGoodCount') || 0;\nvar bad_count = flow.get('accumulatedBadCount') || 0;\n\n\nmsg.topic = \"INSERT INTO Shift (total_production, good_count, bad_count) VALUES (?, ?, ?)\";\n\nmsg.payload = [total_production, good_count, bad_count];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 600,
        "wires": [
            [
                "25bdacdbf88ff6bb"
            ]
        ]
    },
    {
        "id": "715c59d9efcd2acd",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "Reset to 0",
        "func": "// Reset accumulated values after push\nflow.set('accumulatedTotalProduction', 0);\nflow.set('accumulatedGoodCount', 0);\nflow.set('accumulatedBadCount', 0);\nflow.set('accumulatedDesignedSpeed', 0);\n\nflow.set('lunch', 0);\nflow.set('maintenance', 0);\nflow.set('trials', 0);\nflow.set('No_Production', 0);\nflow.set('mech_brk', 0);\nflow.set('material_shortage', 0);\nflow.set('powerFailure', 0);\nflow.set('Electrical', 0);\nflow.set('minorStop', 0);\nflow.set('startup', 0);\nflow.set('sku', 0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "708c888829655cc5",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "Shift A 3AM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "31 21 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 620,
        "y": 1080,
        "wires": [
            [
                "715c59d9efcd2acd"
            ]
        ]
    },
    {
        "id": "984d6bd2406ce68e",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "Shift B 11 AM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "31 05 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 640,
        "y": 1120,
        "wires": [
            [
                "715c59d9efcd2acd"
            ]
        ]
    },
    {
        "id": "5324eb0b66532607",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "name": "Shift C 7 PM",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "31 13 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 640,
        "y": 1160,
        "wires": [
            [
                "715c59d9efcd2acd"
            ]
        ]
    },
    {
        "id": "79ef79294184ee15",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "function 18",
        "func": "msg.payload = flow.get('actualSpeed') + \" units/min\";\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 640,
        "wires": [
            [
                "27c5c412b462034e"
            ]
        ]
    },
    {
        "id": "27c5c412b462034e",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "group": "d1cf79e2d9bc8f56",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "Actual Speed ⚡︎ ",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Arial Narrow,Nimbus Sans L,sans-serif",
        "fontSize": "40",
        "color": "#1505f5",
        "wrapText": true,
        "className": "",
        "x": 410,
        "y": 640,
        "wires": []
    },
    {
        "id": "46168745aea635fe",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "function 19",
        "func": "msg.payload = flow.get('designedSpeed') +\" units/min\";\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 680,
        "wires": [
            [
                "498f1ed62119470b"
            ]
        ]
    },
    {
        "id": "498f1ed62119470b",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "group": "59698d88fae320a7",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "Designed Speed ⚡︎ ",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Arial Narrow,Nimbus Sans L,sans-serif",
        "fontSize": "40",
        "color": "#b505f5",
        "wrapText": true,
        "className": "",
        "x": 420,
        "y": 680,
        "wires": []
    },
    {
        "id": "766a752ea20bb955",
        "type": "ui-chart",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "group": "25de850168ffbe68",
        "name": "",
        "label": "Planned Losses",
        "order": 1,
        "chartType": "bar",
        "category": "[\"trials\", \"lunch\", \"maintenance\", \"no_prod\"]",
        "categoryType": "json",
        "xAxisLabel": "",
        "xAxisProperty": "ts",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "250",
        "bins": 10,
        "action": "replace",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#37a2eb",
            "#ff0000",
            "#e9c307",
            "#11e411",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#000000"
        ],
        "gridColorDefault": true,
        "width": 8,
        "height": 10,
        "className": "label {     font-size: 28px !important;  /* Huge labels */     color: #000000 !important;  /* Black text */     font-weight: bold;     }",
        "interpolation": "linear",
        "x": 1080,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "6a733a3988b1cb3f",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "Insert into DB",
        "func": "var lunch = flow.get('lunch');\nvar trials = flow.get('trials');\nvar maintenance = flow.get('maintenance');\nvar no_prod = flow.get('No_Production');\n\n\nmsg.topic = \"INSERT INTO Planned (lunch, trials, maintenance, no_prod) VALUES (?, ?, ?, ?)\";\n\nmsg.payload = [lunch, trials, maintenance, no_prod];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1460,
        "wires": [
            [
                "c5fdbda21a763a2c"
            ]
        ]
    },
    {
        "id": "c5fdbda21a763a2c",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "mydb": "cffef3faccffbe3a",
        "name": "",
        "x": 710,
        "y": 1460,
        "wires": [
            [
                "ab09bab39ac0414a"
            ]
        ]
    },
    {
        "id": "659317e702399550",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 13 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 1460,
        "wires": [
            [
                "6a733a3988b1cb3f"
            ]
        ]
    },
    {
        "id": "6c9dedb596e759fc",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "TIme Range",
        "group": "25de850168ffbe68",
        "order": 2,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 1340,
        "wires": [
            [
                "888c6fa927589485",
                "16f585c5eff3ebc9"
            ]
        ]
    },
    {
        "id": "888c6fa927589485",
        "type": "delay",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "e09f91118653b195"
            ]
        ]
    },
    {
        "id": "e09f91118653b195",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "Time Range filter",
        "func": "var input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_oee', timeFilter);\n\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, lunch, trials, maintenance, no_prod FROM Planned WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, lunch, trials, maintenance, no_prod FROM Planned WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, lunch, trials, maintenance, no_prod FROM Planned WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n} else if (input === 15) {\n    msg.topic = `SELECT timestamp, lunch, trials, maintenance, no_prod FROM Planned WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n} else if (input === 60) {\n    msg.topic = `SELECT timestamp, lunch, trials, maintenance, no_prod FROM Planned WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n} else if (input === 12) {\n    msg.topic = `SELECT timestamp, lunch, trials, maintenance, no_prod FROM Planned WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1400,
        "wires": [
            [
                "c5fdbda21a763a2c"
            ]
        ]
    },
    {
        "id": "16f585c5eff3ebc9",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1360,
        "wires": [
            [
                "766a752ea20bb955"
            ]
        ]
    },
    {
        "id": "ab09bab39ac0414a",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "Planned Graph",
        "func": "\n\n// let dbData = msg.payload;\n// let timeFilter = msg.timeFilter;\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Flatten each row into four individual points\n// let flatData = [];\n// dbData.forEach(row => {\n//     let timestamp = row.timestamp;\n\n//     flatData.push({ x: timestamp, y: row.trials ?? 0 });\n//     flatData.push({ x: timestamp, y: row.maintenance ?? 0 });\n//     flatData.push({ x: timestamp, y: row.no_prod ?? 0 });\n//     flatData.push({ x: timestamp, y: row.lunch ?? 0 });\n// });\n\n// // dbData.forEach(row =>{\n// //     let ts = row.timestamp;\n\n// //     flatData.push({x: ts, y: row.trials && row.lunch });\n// // });\n\n// msg.payload = flatData;\n// msg.timeRange = timeFilter;\n// return msg;\n\n\nlet dbData = msg.payload;\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Convert each row to required format\nlet formatted = dbData.map(row => {\n    return {\n        lunch: row.lunch ?? 0,\n        trials: row.trials ?? 0,\n        maintenance: row.maintenance ?? 0,\n        no_prod: row.no_prod ?? 0,\n        ts: row.timestamp\n    };\n});\n\nmsg.payload = formatted;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1460,
        "wires": [
            [
                "766a752ea20bb955"
            ]
        ]
    },
    {
        "id": "4b07c2b1b12f9b06",
        "type": "ui-chart",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "group": "0404f620fb95519c",
        "name": "",
        "label": "Unplanned Losses",
        "order": 1,
        "chartType": "bar",
        "category": "[\"startup\", \"electrical\", \"powerfailure\", \"material_shortage\", \"mech_brk\", \"minorstop\", \"sku\"]",
        "categoryType": "json",
        "xAxisLabel": "",
        "xAxisProperty": "ts",
        "xAxisPropertyType": "property",
        "xAxisType": "category",
        "xAxisFormat": "",
        "xAxisFormatType": "HH:mm",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "y",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "300",
        "bins": 10,
        "action": "replace",
        "stackSeries": true,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": "4",
        "removeOlderUnit": "604800",
        "removeOlderPoints": "",
        "colors": [
            "#0e33ec",
            "#f92f2f",
            "#fff829",
            "#38ff38",
            "#c267fe",
            "#f38a12",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#000000"
        ],
        "textColorDefault": false,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 8,
        "height": 10,
        "className": "label {     font-size: 28px !important;  /* Huge labels */     color: #000000 !important;  /* Black text */     font-weight: bold;     }",
        "interpolation": "linear",
        "x": 1090,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "953582c570954ae8",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "Insert into DB",
        "func": "var electrical = flow.get('Electrical');\nvar material_shortage = flow.get('material_shortage');\nvar mech_brk = flow.get('mech_brk');\nvar minorstop = flow.get('minorStop');\nvar sku = flow.get('sku');\nvar startup = flow.get('startup');\nvar powerfailure = flow.get('powerFailure');\n\n\nmsg.topic = \"INSERT INTO Unplanned (material_shortage, mech_brk, minorstop, sku, startup, powerfailure, electrical) VALUES (?, ?, ?, ?, ?, ?, ?)\";\n\nmsg.payload = [material_shortage, mech_brk, minorstop, sku, startup, powerfailure, electrical];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1740,
        "wires": [
            [
                "c8c0e9119b34193c"
            ]
        ]
    },
    {
        "id": "c8c0e9119b34193c",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "mydb": "cffef3faccffbe3a",
        "name": "",
        "x": 710,
        "y": 1740,
        "wires": [
            [
                "0cc3c8b13f4379e9"
            ]
        ]
    },
    {
        "id": "1e7b031d62f3280d",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 13 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 1740,
        "wires": [
            [
                "953582c570954ae8"
            ]
        ]
    },
    {
        "id": "17ec12b935f0ecdc",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "TIme Range",
        "group": "0404f620fb95519c",
        "order": 2,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 1620,
        "wires": [
            [
                "c67842980b932a45",
                "b2413e0de2ec72b6"
            ]
        ]
    },
    {
        "id": "c67842980b932a45",
        "type": "delay",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 490,
        "y": 1620,
        "wires": [
            [
                "c3ad0bf333f89845"
            ]
        ]
    },
    {
        "id": "c3ad0bf333f89845",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "Time Range filter",
        "func": "var input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_oee', timeFilter);\n\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage FROM Unplanned WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage FROM Unplanned WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage FROM Unplanned WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n} else if (input === 15) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage FROM Unplanned WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n} else if (input === 60) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage FROM Unplanned WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n} else if (input === 12) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage FROM Unplanned WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1680,
        "wires": [
            [
                "c8c0e9119b34193c"
            ]
        ]
    },
    {
        "id": "b2413e0de2ec72b6",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1640,
        "wires": [
            [
                "4b07c2b1b12f9b06"
            ]
        ]
    },
    {
        "id": "0cc3c8b13f4379e9",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "Planned Graph",
        "func": "\nlet dbData = msg.payload;\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Convert each row to required format\nlet formatted = dbData.map(row => {\n    return {\n        electrical: row.electrical ?? 0,\n        powerfailure: row.powerfailure ?? 0,\n        sku: row.sku ?? 0,\n        minorstop: row.minorstop ?? 0,\n        material_shortage: row.material_shortage ?? 0,\n        mech_brk: row.mech_brk ?? 0,\n        startup: row.startup ?? 0,\n        ts: row.timestamp\n    };\n});\n\nmsg.payload = formatted;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1740,
        "wires": [
            [
                "4b07c2b1b12f9b06"
            ]
        ]
    },
    {
        "id": "dc50c5b4b68ab89e",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "name": "Inject Pareto Data",
        "props": [],
        "repeat": "",
        "crontab": "00 13 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 310,
        "y": 2140,
        "wires": [
            [
                "16b9d393a9960d69"
            ]
        ]
    },
    {
        "id": "3659c7ae2bc7f5f7",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "group": "c1ed5948ef423032",
        "page": "",
        "ui": "",
        "name": "Pareto Chart",
        "order": 1,
        "width": 12,
        "height": 12,
        "format": "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>\n<canvas id=\"paretoChart\" style=\"height:400px;\"></canvas>\n\n<script>\n    let scope = this;  // <-- Add this line\n\n    let chart;\n\n    function createParetoChart(barData) {\n        const ctx = document.getElementById('paretoChart').getContext('2d');\n        \n        const labels = barData.map(d => d.label);\n        const barValues = barData.map(d => d.value);\n\n        const sortedData = [...barData].sort((a, b) => b.value - a.value);\n        const sortedLabels = sortedData.map(d => d.label);\n        const sortedValues = sortedData.map(d => d.value);\n\n        const total = sortedValues.reduce((a, b) => a + b, 0);\n        let cumulative = 0;\n        const cumulativePercent = sortedValues.map(val => {\n            cumulative += val;\n            return ((cumulative / total) * 100).toFixed(2);\n        });\n\n        if (chart) {\n            chart.destroy();\n        }\n\n        chart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: sortedLabels,\n                datasets: [\n                    {\n                        label: \"Downtime (Min)\",\n                        data: sortedValues,\n                        backgroundColor: \"rgba(55,162,235,0.5)\",\n                        borderColor: \"#37a2eb\",\n                        yAxisID: 'left',\n                        order: 1\n                    },\n                    {\n                        label: \"Cumulative %\",\n                        data: cumulativePercent,\n                        type: 'line',\n                        borderColor: \"#ff6384\",\n                        fill: false,\n                        yAxisID: 'right',\n                        order: 0\n                    }\n                ]\n            },\n            options: {\n                maintainAspectRatio: false,\n                legend: { display: true },\n                scales: {\n                    yAxes: [\n                        {\n                            id: 'left',\n                            position: 'left',\n                            scaleLabel: {\n                                display: true,\n                                labelString: 'Downtime (Min)'\n                            },\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        },\n                        {\n                            id: 'right',\n                            position: 'right',\n                            scaleLabel: {\n                                display: true,\n                                labelString: 'Cumulative %'\n                            },\n                            ticks: {\n                                beginAtZero: true,\n                                callback: function(value) {\n                                    return value + '%';\n                                }\n                            }\n                        }\n                    ],\n                    xAxes: [{\n                        offset: true\n                    }]\n                },\n                tooltips: {\n                    mode: 'index',\n                    intersect: false,\n                    callbacks: {\n                        label: function(tooltipItem, data) {\n                            const label = data.datasets[tooltipItem.datasetIndex].label || '';\n                            const value = tooltipItem.yLabel;\n                            return label.includes('%') ? `${label}: ${value}%` : `${label}: ${value}`;\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    scope.$watch('msg.payload', function(payload) {\n        console.log(\"Chart payload:\", payload);  // Debug\n        if (Array.isArray(payload)) {\n            createParetoChart(payload);\n        }\n    });\n</script>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "48e06e52afc781cd",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "f6b40d85e743a91b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 660,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "d098ac7abd827f36",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "113c5bc7c65ee1cc",
        "name": "function 21",
        "func": "// let dbData = msg.payload;\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Convert each row to required format\n// let formatted = dbData.map(row => {\n//     return {\n//         electrical: row.electrical ?? 0,\n//         powerfailure: row.powerfailure ?? 0,\n//         sku: row.sku ?? 0,\n//         minorstop: row.minorstop ?? 0,\n//         material_shortage: row.material_shortage ?? 0,\n//         mech_brk: row.mech_brk ?? 0,\n//         startup: row.startup ?? 0,\n//         ts: row.timestamp\n//     };\n// });\n\n// // Sort rows by total value descending\n// formatted.sort((a, b) => {\n//     const totalA = a.electrical + a.powerfailure + a.sku + a.minorstop + a.material_shortage + a.mech_brk + a.startup;\n//     const totalB = b.electrical + b.powerfailure + b.sku + b.minorstop + b.material_shortage + b.mech_brk + b.startup;\n//     return totalB - totalA; // descending\n// });\n\n// msg.payload = formatted;\n// return msg;\n\n\n\nlet dbData = msg.payload;\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\n// Convert and calculate total for sorting\nlet formatted = dbData.map(row => {\n    let electrical = row.electrical ?? 0;\n    let powerfailure = row.powerfailure ?? 0;\n    let sku = row.sku ?? 0;\n    let minorstop = row.minorstop ?? 0;\n    let material_shortage = row.material_shortage ?? 0;\n    let mech_brk = row.mech_brk ?? 0;\n    let startup = row.startup ?? 0;\n\n    return {\n        electrical,\n        powerfailure,\n        sku,\n        minorstop,\n        material_shortage,\n        mech_brk,\n        startup,\n        total: electrical + powerfailure + sku + minorstop + material_shortage + mech_brk + startup,\n        ts: row.timestamp || new Date().toISOString()\n    };\n});\n\n// Sort by total descending\nformatted.sort((a, b) => b.total - a.total);\n\n// Keep only top 5\nlet top5 = formatted.slice(0, 5);\n\n// Remove 'total' before sending to chart\nlet cleaned = top5.map(row => {\n    return {\n        electrical: row.electrical,\n        powerfailure: row.powerfailure,\n        sku: row.sku,\n        minorstop: row.minorstop,\n        material_shortage: row.material_shortage,\n        mech_brk: row.mech_brk,\n        startup: row.startup,\n        ts: row.ts\n    };\n});\n\nmsg.payload = cleaned;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "d444118e6aa78f1f",
        "type": "ui-gauge",
        "z": "55d7e6612f33eabf",
        "g": "f42c612394f66a69",
        "name": "",
        "group": "1a7923b295955b5d",
        "order": 1,
        "width": 4,
        "height": 5,
        "gtype": "gauge-34",
        "gstyle": "needle",
        "title": "OEE",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f31212"
            },
            {
                "from": "0.3",
                "color": "#f2f561"
            },
            {
                "from": "0.5",
                "color": "#53f99b"
            },
            {
                "from": "0.8",
                "color": "#0fff57"
            }
        ],
        "min": 0,
        "max": "1",
        "sizeThickness": "18",
        "sizeGap": "4",
        "sizeKeyThickness": "8",
        "styleRounded": true,
        "styleGlow": false,
        "className": "/* Apply styles to the UI Gauge */ .nr-dashboard-theme .nr-dashboard-ui_gauge {     border-radius: 20px;     box-shadow: 0 6px 15px rgba(0, 0, 0, 0.4);     background: rgba(50, 50, 50, 0.3); /* Semi-transparent glass effect */     backdrop-filter: blur(8px);     padding: 12px;     transition: transform 0.3s ease-in-out; }  /* Hover effect - Slight lift */ .nr-dashboard-theme .nr-dashboard-ui_gauge:hover {     transform: scale(1.05); }  /* Gauge Title */ .nr-dashboard-ui_gauge .nr-dashboard-widget-title {     font-size: 20px;     font-weight: bold;     color: #ffffff !important;     text-align: center;     margin-bottom: 8px;     text-transform: uppercase; }  /* Customizing the Gauge Meter */ .nr-dashboard-ui_gauge svg {     filter: drop-shadow(3px 3px 8px rgba(0, 255, 255, 0.4)); }  /* Gauge Value (Number inside Gauge) */ .nr-dashboard-ui_gauge text {     font-size: 22px !important;     font-weight: bold;     fill: #ffffff !important; }  /* Colorful Animated Border */ .nr-dashboard-ui_gauge {     border: 3px solid;     border-image: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce) 1;     animation: border-animation 5s infinite linear; }  /* Border Animation */ @keyframes border-animation {     0% {         border-image-source: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce);     }     25% {         border-image-source: linear-gradient(45deg, #0094ce, #ff7b00, #ff3d00, #ff00ff, #7700ff);     }     50% {         border-image-source: linear-gradient(45deg, #7700ff, #0094ce, #ff7b00, #ff3d00, #ff00ff);     }     75% {         border-image-source: linear-gradient(45deg, #ff00ff, #7700ff, #0094ce, #ff7b00, #ff3d00);     }     100% {         border-image-source: linear-gradient(45deg, #ff7b00, #ff3d00, #ff00ff, #7700ff, #0094ce);     } }  /* Dark Background for Widget Group */ .nr-dashboard-ui_group {     background: rgba(40, 40, 40, 0.9) !important;     border-radius: 12px;     padding: 12px;     box-shadow: 0 4px 10px rgba(0, 0, 0, 0.4); }  /* Dark Theme for the Whole Dashboard */ body {     background-color: #121212 !important;     color: #ffffff !important; }  /* Custom Scrollbar */ ::-webkit-scrollbar {     width: 10px; }  ::-webkit-scrollbar-track {     background: #2a2a2a; }  ::-webkit-scrollbar-thumb {     background: linear-gradient(45deg, #ff7b00, #ff3d00, #0094ce);     border-radius: 10px; }",
        "x": 1110,
        "y": 60,
        "wires": []
    },
    {
        "id": "5e33dc2a27a478ba",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Accumulate Losses",
        "func": "var electrical = flow.get('Electrical');\nvar material_shortage = flow.get('material_shortage');\nvar mech_brk = flow.get('mech_brk');\nvar minorstop = flow.get('minorStop');\nvar sku = flow.get('sku');\nvar startup = flow.get('startup');\nvar powerfailure = flow.get('powerFailure');\n\nvar lunch = flow.get('lunch');\nvar trials = flow.get('trials');\nvar maintenance = flow.get('maintenance');\nvar no_prod = flow.get('No_Production');\n\n\nvar acc_electrical = flow.get('acc_electrical') || 0;\nvar acc_material_shortage = flow.get('acc_material_shortage') || 0;\nvar acc_mech_brk = flow.get('acc_mech_brk') || 0;\nvar acc_minorstop = flow.get('acc_minorStop') || 0;\nvar acc_sku = flow.get('acc_sku') || 0;\nvar acc_startup = flow.get('acc_startup') || 0;\nvar acc_powerfailure = flow.get('acc_powerFailure') || 0;\n\nvar acc_lunch = flow.get('acc_lunch') || 0;\nvar acc_trials = flow.get('acc_trials') || 0;\nvar acc_maintenance = flow.get('acc_maintenance') || 0;\nvar acc_no_prod = flow.get('acc_No_Production') || 0;\n\n\nacc_electrical += electrical;\nacc_lunch += lunch;\nacc_maintenance += maintenance;\nacc_material_shortage += material_shortage;\nacc_mech_brk += mech_brk;\nacc_minorstop += minorstop;\nacc_no_prod += no_prod;\nacc_powerfailure += powerfailure;\nacc_sku += sku;\nacc_startup += startup;\nacc_trials += trials;\n\nflow.set('acc_electrical', acc_electrical);\nflow.set('acc_lunch', acc_lunch);\nflow.set('acc_maintenance', acc_maintenance);\nflow.set('acc_material_shortage', acc_material_shortage);\nflow.set('acc_mech_brk', acc_mech_brk);\nflow.set('acc_no_prod', acc_no_prod);\nflow.set('acc_powerfailure', acc_powerfailure);\nflow.set('acc_sku', acc_sku);\nflow.set('acc_startup', acc_startup);\nflow.set('acc_trials', acc_trials);\nflow.set('acc_minorstop', acc_minorstop);\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "efa15fb2990218d9",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "30 12 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "5e33dc2a27a478ba"
            ]
        ]
    },
    {
        "id": "640a5249a899f2c6",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "function 17",
        "func": "// Retrieve accumulated values\nvar accumulatedTotalProduction = flow.get('accumulatedTotalProduction') || 0;\nvar accumulatedGoodCount = flow.get('accumulatedGoodCount') || 0;\nvar accumulatedBadCount = flow.get('accumulatedBadCount') || 0;\n\nvar accumulatedDesignedSpeed = flow.get('accumulatedDesignedSpeed') || 0;\n\n// Calculate Performance\n\nvar a = parseFloat(accumulatedTotalProduction) / parseFloat(accumulatedDesignedSpeed)\nvar performance = parseFloat(a);\nflow.set('shift_performance', performance);\n\nvar b = parseFloat(accumulatedGoodCount) / parseFloat(accumulatedTotalProduction);\nvar quality = parseFloat(b);\nflow.set('shift_quality', quality);\n\nvar shiftTime = 480;\n\nvar shutdown = (flow.get('lunch') || 0) + (flow.get('maintenance') || 0) + (flow.get('No_Production') || 0) + (flow.get('trials') || 0);\n\nvar plannedTime = shiftTime - shutdown;\n// flow.set('shift_plannedTime', plannedTime);\n\nvar unplannedTime = (flow.get('mech_brk') || 0) + (flow.get('powerFailure') || 0) + (flow.get('Electrical') || 0) + (flow.get('minorStop') || 0) + (flow.get('sku') || 0) + (flow.get('startup') || 0);\n// flow.set('shiftunplannedTime', unplannedTime);\n\nvar runTime = plannedTime - unplannedTime;\n// flow.set(\"runTime\", runTime);\n\nvar availability = runTime / plannedTime;\n// flow.set('availability', availability);\n\nvar oee = availability * performance *quality;\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\nlet data = {\n    timestamp: istTime,\n    Shift_totalProduction: accumulatedTotalProduction,\n    Shift_goodCount: accumulatedGoodCount,\n    Shift_badCount: accumulatedBadCount,\n    OEE: oee.toFixed(2),\n    Availability: availability.toFixed(2),\n    Quality: quality.toFixed(2),\n    Performance: performance.toFixed(2)\n};\n\nmsg.payload = data;\n\n\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 660,
        "wires": [
            [
                "aabee4dbb74b3696"
            ]
        ]
    },
    {
        "id": "aabee4dbb74b3696",
        "type": "ui-table",
        "z": "55d7e6612f33eabf",
        "group": "f9efd5999726a1f2",
        "name": "",
        "label": "Shift Data Avg",
        "order": 1,
        "width": 12,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": false,
        "selectionType": "none",
        "columns": [
            {
                "title": "OEE",
                "key": "OEE",
                "keyType": "key",
                "type": "text",
                "width": "",
                "align": "center"
            }
        ],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1200,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "9f791508a4fa8c6a",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "mydb": "cffef3faccffbe3a",
        "name": "",
        "x": 770,
        "y": 2140,
        "wires": [
            [
                "910b243f20f25a34"
            ]
        ]
    },
    {
        "id": "16b9d393a9960d69",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "name": "Insert into DB",
        "func": "var lunch = flow.get('acc_lunch');\nvar trials = flow.get('acc_trials');\nvar maintenance = flow.get('acc_maintenance');\nvar no_prod = flow.get('acc_no_prod');\nvar electrical = flow.get('acc_electrical');\nvar material_shortage = flow.get('acc_material_shortage');\nvar mech_brk = flow.get('acc_mech_brk');\nvar minorstop = flow.get('acc_minorStop');\nvar sku = flow.get('acc_sku');\nvar startup = flow.get('acc_startup');\nvar powerfailure = flow.get('acc_powerfailure');\n\nmsg.topic = \"INSERT INTO Pareto (material_shortage, mech_brk, minorstop, sku, startup, powerfailure, electrical, lunch, trials, maintenance, no_prod) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n\nmsg.payload = [\n    material_shortage,\n    mech_brk,\n    minorstop,\n    sku,\n    startup,\n    powerfailure,\n    electrical,\n    lunch,\n    trials,\n    maintenance,\n    no_prod\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 2140,
        "wires": [
            [
                "9f791508a4fa8c6a"
            ]
        ]
    },
    {
        "id": "aa5face6980abce7",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "name": "TIme Range",
        "group": "c1ed5948ef423032",
        "order": 2,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 15 days",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 30 days",
                "icon": "",
                "value": "30",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 2020,
        "wires": [
            [
                "da20207083a2c6cc",
                "1b229b007ba4b830"
            ]
        ]
    },
    {
        "id": "da20207083a2c6cc",
        "type": "delay",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 450,
        "y": 2000,
        "wires": [
            [
                "fe319d98444401b8"
            ]
        ]
    },
    {
        "id": "fe319d98444401b8",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "name": "Time Range filter",
        "func": "var input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_oee', timeFilter);\n\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n} else if (input === 15) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 15 DAY;`;\n} else if (input === 30) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 30 DAY;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2000,
        "wires": [
            [
                "9f791508a4fa8c6a"
            ]
        ]
    },
    {
        "id": "1b229b007ba4b830",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1960,
        "wires": [
            [
                "3659c7ae2bc7f5f7"
            ]
        ]
    },
    {
        "id": "910b243f20f25a34",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "f49524b1156cf00e",
        "name": "ParetoGraph",
        "func": "\n// let dbData = msg.payload;\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Convert each row to required format\n// let formatted = dbData.map(row => {\n//     return {\n//         electrical: row.electrical ?? 0,\n//         powerfailure: row.powerfailure ?? 0,\n//         sku: row.sku ?? 0,\n//         minorstop: row.minorstop ?? 0,\n//         material_shortage: row.material_shortage ?? 0,\n//         mech_brk: row.mech_brk ?? 0,\n//         startup: row.startup ?? 0,\n//         ts: row.timestamp\n//     };\n// });\n\n// msg.payload = formatted;\n// return msg;\n\n\n// -----------------------------------------------------------------\n\n// let dbData = msg.payload;\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Use the most recent entry (last row)\n// let latest = dbData[dbData.length - 1];\n\n// msg.payload = [\n//     { label: \"Power Failure\", value: latest.powerfailure ?? 0 },\n//     { label: \"Mechanical Breakdown\", value: latest.mech_brk ?? 0 },\n//     { label: \"Electrical\", value: latest.electrical ?? 0 },\n//     { label: \"Startup\", value: latest.startup ?? 0 },\n//     { label: \"SKU\", value: latest.sku ?? 0 },\n//     { label: \"Minor Stoppage\", value: latest.minorstop ?? 0 },\n//     { label: \"Material Shortage\", value: latest.material_shortage ?? 0 },\n//     { label: \"Lunch\", value: latest.lunch ?? 0 },\n//     { label: \"Trials\", value: latest.trials ?? 0 },\n//     { label: \"Maintenance\", value: latest.maintenance ?? 0 },\n//     { label: \"No Production\", value: latest.no_prod ?? 0 }\n// ];\n\n// return msg;\n\n\n//  --------------------------------------------------------------------------77\n\nlet dbData = msg.payload;\n\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = \"No data available.\";\n    return msg;\n}\n\nlet totals = {\n    powerfailure: 0,\n    mech_brk: 0,\n    electrical: 0,\n    startup: 0,\n    sku: 0,\n    minorstop: 0,\n    material_shortage: 0,\n    lunch: 0,\n    trials: 0,\n    maintenance: 0,\n    no_prod: 0\n};\n\n// Sum values for each row in the time range\ndbData.forEach(row => {\n    totals.powerfailure += row.powerfailure ?? 0;\n    totals.mech_brk += row.mech_brk ?? 0;\n    totals.electrical += row.electrical ?? 0;\n    totals.startup += row.startup ?? 0;\n    totals.sku += row.sku ?? 0;\n    totals.minorstop += row.minorstop ?? 0;\n    totals.material_shortage += row.material_shortage ?? 0;\n    totals.lunch += row.lunch ?? 0;\n    totals.trials += row.trials ?? 0;\n    totals.maintenance += row.maintenance ?? 0;\n    totals.no_prod += row.no_prod ?? 0;\n});\n\nmsg.payload = [\n    { label: \"Power Failure\", value: totals.powerfailure },\n    { label: \"Mechanical Breakdown\", value: totals.mech_brk },\n    { label: \"Electrical\", value: totals.electrical },\n    { label: \"Startup\", value: totals.startup },\n    { label: \"SKU\", value: totals.sku },\n    { label: \"Minor Stoppage\", value: totals.minorstop },\n    { label: \"Material Shortage\", value: totals.material_shortage },\n    { label: \"Lunch\", value: totals.lunch },\n    { label: \"Trials\", value: totals.trials },\n    { label: \"Maintenance\", value: totals.maintenance },\n    { label: \"No Production\", value: totals.no_prod }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2140,
        "wires": [
            [
                "3659c7ae2bc7f5f7"
            ]
        ]
    },
    {
        "id": "b5c97b7115ccd91a",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "Reset Losses",
        "func": "\n\nflow.set('acc_electrical', 0);\nflow.set('acc_lunch', 0);\nflow.set('acc_maintenance', 0);\nflow.set('acc_material_shortage', 0);\nflow.set('acc_mech_brk', 0);\nflow.set('acc_no_prod', 0);\nflow.set('acc_powerfailure', 0);\nflow.set('acc_sku', 0);\nflow.set('acc_startup', 0);\nflow.set('acc_trials', 0);\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "cb8b1b321fd6193a",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "g": "0950ade5d982d6ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 17 * * 0",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "b5c97b7115ccd91a"
            ]
        ]
    },
    {
        "id": "05d9744a919b857b",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "e57bf05312ac778a",
        "name": "TIme Range",
        "group": "b93144e266b84c0a",
        "order": 2,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 2400,
        "wires": [
            [
                "50f7c88ddc20a58e",
                "669346430bf90b53"
            ]
        ]
    },
    {
        "id": "50f7c88ddc20a58e",
        "type": "delay",
        "z": "55d7e6612f33eabf",
        "g": "e57bf05312ac778a",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 2400,
        "wires": [
            [
                "3806335efe653679"
            ]
        ]
    },
    {
        "id": "3806335efe653679",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "e57bf05312ac778a",
        "name": "Time Range filter",
        "func": "var input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_oee', timeFilter);\n\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n} else if (input === 15) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n} else if (input === 60) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n} else if (input === 12) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2400,
        "wires": [
            [
                "3aca8feac320cceb"
            ]
        ]
    },
    {
        "id": "c6d7a690fae68461",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "e57bf05312ac778a",
        "name": "Unplanned top 5",
        "func": "// let dbData = msg.payload;\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Define your selected parameters again here for consistency\n// let selectedParams = [\n//     'electrical',\n//     'powerfailure',\n//     'sku',\n//     'minorstop',\n//     'material_shortage',\n//     'mech_brk',\n//     'startup'\n// ];\n\n// // Format rows with total\n// let formatted = dbData.map(row => {\n//     let total = 0;\n//     let entry = {};\n\n//     selectedParams.forEach(param => {\n//         entry[param] = row[param] ?? 0;\n//         total += entry[param];\n//     });\n\n//     entry.total = total;\n//     entry.ts = row.timestamp || new Date().toISOString();\n//     return entry;\n// });\n\n// // Sort by total descending and pick top 5\n// formatted.sort((a, b) => b.total - a.total);\n// let top5 = formatted.slice(0, 5);\n\n// // Remove total before output and sort parameters for consistent bar order\n// let sortedParamOrder = selectedParams.slice(); // default order\n\n// if (top5.length > 0) {\n//     // Sort params in the first row by value\n//     sortedParamOrder = selectedParams\n//         .map(param => ({ key: param, value: top5[0][param] }))\n//         .sort((a, b) => b.value - a.value)\n//         .map(p => p.key);\n// }\n\n// let cleaned = top5.map(row => {\n//     let output = {};\n//     sortedParamOrder.forEach(param => {\n//         output[param] = row[param];\n//     });\n//     output.ts = row.ts;\n//     return output;\n// });\n\n\n// msg.payload = cleaned;\n// return msg;\n\nlet dbData = msg.payload;\n\n// Handle Vue.js reactivity proxy\nif (dbData && dbData.__ob__) {\n    dbData = JSON.parse(JSON.stringify(dbData));\n}\n\n// Validate input\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = [];\n    return msg;\n}\n\n// Define selected parameters\nconst selectedParams = [\n    'electrical',\n    'powerfailure',\n    'sku',\n    'minorstop',\n    'material_shortage',\n    'mech_brk',\n    'startup'\n];\n\n// Format and calculate total for each row\nconst formatted = dbData.map(row => {\n    const entry = { total: 0 };\n    selectedParams.forEach(param => {\n        const value = Number(row[param]) || 0;\n        entry[param] = value;\n        entry.total += value;\n    });\n    entry.ts = row.timestamp || new Date().toISOString();\n    return entry;\n});\n\n// Sort by total descending and select top 5\nconst top5 = formatted.sort((a, b) => b.total - a.total).slice(0, 5);\n\n// Aggregate all top 5 rows by parameter for charting\nconst aggregated = {};\nselectedParams.forEach(param => aggregated[param] = 0);\ntop5.forEach(row => {\n    selectedParams.forEach(param => {\n        aggregated[param] += row[param];\n    });\n});\n\n// Convert to array for chart {label, value}\nconst chartData = Object.entries(aggregated)\n    .map(([label, value]) => ({ label, value }))\n    .sort((a, b) => b.value - a.value) // Sort descending for chart order\n    .slice(0, 5); // Limit to top 5 reasons\n\nmsg.payload = chartData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2400,
        "wires": [
            [
                "29a0068c7e1138dc"
            ]
        ]
    },
    {
        "id": "29a0068c7e1138dc",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "e57bf05312ac778a",
        "group": "b93144e266b84c0a",
        "page": "",
        "ui": "",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<!-- Chart.js CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>\n\n<!-- Chart Canvas -->\n<canvas id=\"unplannedTop5Chart\" style=\"height: 400px;\"></canvas>\n\n<script>\n    let top5Chart;\n\n    function renderTop5Chart(data) {\n        if (!Array.isArray(data) || data.length === 0) {\n            console.warn(\"No data received for Top 5 chart.\");\n            return;\n        }\n\n        const labels = data.map(item => item.label);\n        const values = data.map(item => item.value);\n        const colors = ['#AEC7E8', '#98DF8A', '#FF7F0E', '#DDF23A', '#F03DCF'];\n\n        const ctx = document.getElementById(\"unplannedTop5Chart\").getContext(\"2d\");\n\n        if (top5Chart) {\n            top5Chart.destroy();\n        }\n\n        top5Chart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: \"Top 5 Unplanned (Min)\",\n                    data: values,\n                    backgroundColor: colors,\n                }]\n            },\n            options: {\n                maintainAspectRatio: false,\n                legend: { display: false },\n                indexAxis: 'y',\n                scales: {\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Downtime (Min)\"\n                        },\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }],\n                    yAxes: [{\n                        offset: true\n                    }]\n                },\n                tooltips: {\n                    callbacks: {\n                        label: function(tooltipItem, data) {\n                            return `${data.datasets[tooltipItem.datasetIndex].label}: ${tooltipItem.xLabel}`;\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Node-RED context\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            console.log(\"Updated payload for Top 5 chart:\", payload);\n            renderTop5Chart(payload);\n        });\n    })(this);\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 2400,
        "wires": [
            []
        ]
    },
    {
        "id": "3aca8feac320cceb",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "e57bf05312ac778a",
        "mydb": "cffef3faccffbe3a",
        "name": "",
        "x": 770,
        "y": 2400,
        "wires": [
            [
                "c6d7a690fae68461"
            ]
        ]
    },
    {
        "id": "669346430bf90b53",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "e57bf05312ac778a",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 2340,
        "wires": [
            [
                "29a0068c7e1138dc"
            ]
        ]
    },
    {
        "id": "56f8caca20d9f329",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "70fee6b106d443f3",
        "name": "TIme Range",
        "group": "6e4667f37eedab14",
        "order": 2,
        "width": 5,
        "height": "1",
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Last 15 min ",
                "icon": "",
                "value": "15",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 hour",
                "icon": "",
                "value": "60",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 12 hours",
                "icon": "",
                "value": "12",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 1 day",
                "icon": "",
                "value": "1",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 3 days",
                "icon": "",
                "value": "3",
                "valueType": "num",
                "color": "#1fa3e5"
            },
            {
                "label": "Last 7 days",
                "icon": "",
                "value": "7",
                "valueType": "num",
                "color": "#1fa3e5"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 2640,
        "wires": [
            [
                "6140e73f4bf070ac",
                "d7fdf920dcf892f9"
            ]
        ]
    },
    {
        "id": "6140e73f4bf070ac",
        "type": "delay",
        "z": "55d7e6612f33eabf",
        "g": "70fee6b106d443f3",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 410,
        "y": 2640,
        "wires": [
            [
                "17296843ec487979"
            ]
        ]
    },
    {
        "id": "17296843ec487979",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "70fee6b106d443f3",
        "name": "Time Range filter",
        "func": "var input = msg.payload;  \nvar timeFilter = parseInt(input, 10);\nflow.set('timeFilter_oee', timeFilter);\n\n\n// Set reset flag to destroy the chart before updating\nmsg.reset = true;  \n\nif (timeFilter === 1) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n} else if (timeFilter === 3) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 3 DAY;`;\n} else if (timeFilter === 7) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 7 DAY;`;\n} else if (input === 15) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 15 MINUTE;`;\n} else if (input === 60) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 1 HOUR;`;\n} else if (input === 12) {\n    msg.topic = `SELECT timestamp, electrical, powerfailure, sku, startup, minorstop, mech_brk, material_shortage, lunch, trials, maintenance, no_prod FROM Pareto WHERE timestamp >= NOW() - INTERVAL 12 HOUR;`;\n} else {\n    msg.topic = \"\";\n    msg.payload = \"Invalid input. Please send '15min', '1hr', '12hr', 1, 3, or 7.\";\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2640,
        "wires": [
            [
                "268026e08e2028c9"
            ]
        ]
    },
    {
        "id": "268026e08e2028c9",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "70fee6b106d443f3",
        "mydb": "cffef3faccffbe3a",
        "name": "",
        "x": 790,
        "y": 2640,
        "wires": [
            [
                "9f9dd093a8e994de"
            ]
        ]
    },
    {
        "id": "9f9dd093a8e994de",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "70fee6b106d443f3",
        "name": "Planned top 5",
        "func": "// let dbData = msg.payload;\n\n// if (!Array.isArray(dbData) || dbData.length === 0) {\n//     msg.payload = \"No data available.\";\n//     return msg;\n// }\n\n// // Define your selected parameters again here for consistency\n// let selectedParams = [\n//     'lunch',\n//     'trials',\n//     'maintenance',\n//     'no_prod'\n// ];\n\n// // Format rows with total\n// let formatted = dbData.map(row => {\n//     let total = 0;\n//     let entry = {};\n\n//     selectedParams.forEach(param => {\n//         entry[param] = row[param] ?? 0;\n//         total += entry[param];\n//     });\n\n//     entry.total = total;\n//     entry.ts = row.timestamp || new Date().toISOString();\n//     return entry;\n// });\n\n// // Sort by total descending and pick top 5\n// formatted.sort((a, b) => b.total - a.total);\n// let top5 = formatted.slice(0, 5);\n\n// // Remove total before output\n// // let cleaned = top5.map(row => {\n// //     let output = {};\n// //     selectedParams.forEach(param => {\n// //         output[param] = row[param];\n// //     });\n// //     output.ts = row.ts;\n// //     return output;\n// // });\n\n// // Remove total before output and sort parameters for consistent bar order\n// let sortedParamOrder = selectedParams.slice(); // default order\n\n// if (top5.length > 0) {\n//     // Sort params in the first row by value\n//     sortedParamOrder = selectedParams\n//         .map(param => ({ key: param, value: top5[0][param] }))\n//         .sort((a, b) => b.value - a.value)\n//         .map(p => p.key);\n// }\n\n// let cleaned = top5.map(row => {\n//     let output = {};\n//     sortedParamOrder.forEach(param => {\n//         output[param] = row[param];\n//     });\n//     output.ts = row.ts;\n//     return output;\n// });\n\n\n// msg.payload = cleaned;\n// return msg;\n\n\nlet dbData = msg.payload;\n\n// Handle Vue.js reactivity proxy\nif (dbData && dbData.__ob__) {\n    dbData = JSON.parse(JSON.stringify(dbData));\n}\n\n// Validate input\nif (!Array.isArray(dbData) || dbData.length === 0) {\n    msg.payload = [];\n    return msg;\n}\n\n// Define selected parameters\nconst selectedParams = [\n    'lunch',\n    'trials',\n    'maintenance',\n    'no_prod'\n];\n\n// Format and calculate total for each row\nconst formatted = dbData.map(row => {\n    const entry = { total: 0 };\n    selectedParams.forEach(param => {\n        const value = Number(row[param]) || 0;\n        entry[param] = value;\n        entry.total += value;\n    });\n    entry.ts = row.timestamp || new Date().toISOString();\n    return entry;\n});\n\n// Sort by total descending and select top 5\nconst top5 = formatted.sort((a, b) => b.total - a.total).slice(0, 5);\n\n// Aggregate all top 5 rows by parameter for charting\nconst aggregated = {};\nselectedParams.forEach(param => aggregated[param] = 0);\ntop5.forEach(row => {\n    selectedParams.forEach(param => {\n        aggregated[param] += row[param];\n    });\n});\n\n// Convert to array for chart {label, value}\nconst chartData = Object.entries(aggregated)\n    .map(([label, value]) => ({ label, value }))\n    .sort((a, b) => b.value - a.value) // Sort descending for chart order\n    .slice(0, 5); // Limit to top 5 reasons\n\nmsg.payload = chartData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2640,
        "wires": [
            [
                "6e3ae79c6b9fc224"
            ]
        ]
    },
    {
        "id": "6e3ae79c6b9fc224",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "70fee6b106d443f3",
        "group": "6e4667f37eedab14",
        "page": "",
        "ui": "",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<!-- Chart.js CDN -->\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>\n\n<!-- Chart Canvas -->\n<canvas id=\"plannedTop5Chart\" style=\"height: 400px;\"></canvas>\n\n<script>\n    let top5Chart;\n\n    function renderTop5Chart(data) {\n        if (!Array.isArray(data) || data.length === 0) {\n            console.warn(\"No data received for Top 5 chart.\");\n            return;\n        }\n\n        const labels = data.map(item => item.label);\n        const values = data.map(item => item.value);\n        const colors = ['#AEC7E8', '#98DF8A', '#FF7F0E', '#DDF23A', '#F03DCF'];  // Same colors as Unplanned\n\n        const ctx = document.getElementById(\"plannedTop5Chart\").getContext(\"2d\");\n\n        if (top5Chart) {\n            top5Chart.destroy();\n        }\n\n        top5Chart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: \"Top 5 Planned (Min)\",\n                    data: values,\n                    backgroundColor: colors,\n                }]\n            },\n            options: {\n                maintainAspectRatio: false,\n                legend: { display: false },\n                indexAxis: 'y',\n                scales: {\n                    xAxes: [{\n                        scaleLabel: {\n                            display: true,\n                            labelString: \"Downtime (Min)\"\n                        },\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }],\n                    yAxes: [{\n                        offset: true\n                    }]\n                },\n                tooltips: {\n                    callbacks: {\n                        label: function(tooltipItem, data) {\n                            return `${data.datasets[tooltipItem.datasetIndex].label}: ${tooltipItem.xLabel}`;\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Node-RED context\n    (function(scope) {\n        scope.$watch('msg.payload', function(payload) {\n            console.log(\"Updated payload for Top 5 chart:\", payload);\n            renderTop5Chart(payload);\n        });\n    })(this);\n</script>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1220,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "d7fdf920dcf892f9",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "70fee6b106d443f3",
        "name": "clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2560,
        "wires": [
            [
                "6e3ae79c6b9fc224"
            ]
        ]
    },
    {
        "id": "63d05085ce035c10",
        "type": "ui-button-group",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "",
        "group": "3827df99aea3b700",
        "order": 1,
        "width": 3,
        "height": 5,
        "label": "",
        "className": "",
        "rounded": true,
        "useThemeColors": false,
        "passthru": false,
        "options": [
            {
                "label": "Mechanical Breakdown",
                "icon": "",
                "value": "mech_brk",
                "valueType": "str",
                "color": "#3f78fd"
            },
            {
                "label": "Material Shortage",
                "icon": "",
                "value": "material_shortage",
                "valueType": "str",
                "color": "#605df8"
            },
            {
                "label": "Power Failure",
                "icon": "",
                "value": "powerFailure",
                "valueType": "str",
                "color": "#5956f0"
            },
            {
                "label": "Electrical",
                "icon": "",
                "value": "electrical",
                "valueType": "str",
                "color": "#5c77ff"
            },
            {
                "label": "Minor Stoppage",
                "icon": "",
                "value": "minorStop",
                "valueType": "str",
                "color": "#6a60fb"
            },
            {
                "label": "Startup",
                "icon": "",
                "value": "startup",
                "valueType": "str",
                "color": "#6670ff"
            },
            {
                "label": "SKU",
                "icon": "",
                "value": "sku",
                "valueType": "str",
                "color": "#6358fe"
            }
        ],
        "topic": "topic",
        "topicType": "msg",
        "x": 1390,
        "y": 580,
        "wires": [
            [
                "2f407d7d5f4887c2"
            ]
        ]
    },
    {
        "id": "109561c2d1e53d16",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 54",
        "func": "var result = msg.payload;\n// var mtbf = result[0].MTTF; // Get MTBF from first row\n\n// Optional: format it\n// msg.payload = mtbf.toFixed(3) + \" mins\";\n\nmsg.payload = \"?\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 480,
        "wires": [
            [
                "09d45d6ac40b648a",
                "5f221a2fec70f0c2",
                "db007bc536372a42",
                "a9fa3676c8e011a2",
                "e75d645173c6a1a7",
                "0e8792950bc9a9aa"
            ]
        ]
    },
    {
        "id": "09d45d6ac40b648a",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "5137f65501696ca0",
        "order": 1,
        "width": 0,
        "height": 2,
        "name": "",
        "label": "MTTF",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2030,
        "y": 460,
        "wires": []
    },
    {
        "id": "56f164767a1f01bb",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 56",
        "func": "var result = msg.payload;\nvar mtbf = result[0].Availability; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" %\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 560,
        "wires": [
            [
                "c68e2c61a6f4d7d4",
                "c625aa7e0ea22abb"
            ]
        ]
    },
    {
        "id": "c68e2c61a6f4d7d4",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "232df039cd26ad94",
        "order": 2,
        "width": 0,
        "height": 5,
        "name": "",
        "label": "Availability",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2050,
        "y": 560,
        "wires": []
    },
    {
        "id": "165042027572c88f",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 58",
        "func": "var result = msg.payload;\nvar mtbf = result[0].FailureRate; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 640,
        "wires": [
            [
                "228462d7775de3db",
                "7da6f19deb191668"
            ]
        ]
    },
    {
        "id": "228462d7775de3db",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "740942dcc256b295",
        "order": 2,
        "width": 0,
        "height": 5,
        "name": "",
        "label": "Failure Rate (λ)",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2080,
        "y": 640,
        "wires": []
    },
    {
        "id": "4a5fdfd342d99e04",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "mydb": "8e1ceca219849b97",
        "name": "",
        "x": 1700,
        "y": 560,
        "wires": [
            [
                "109561c2d1e53d16",
                "56f164767a1f01bb",
                "165042027572c88f",
                "9549b845a60d6a4b",
                "75b3750ab5591e3c",
                "c7257743b1c5dbff",
                "9e2104c7865a77ec",
                "815569fba6222d2c",
                "79f5264f394eabbc",
                "691408a996c4d6fb",
                "8bb7ed2b22739a3b"
            ]
        ]
    },
    {
        "id": "9549b845a60d6a4b",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 52",
        "func": "var result = msg.payload;\nvar mtbf = result[0].MTBF; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" mins\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 680,
        "wires": [
            [
                "17c2df0db03a2c5e",
                "488b0310e399b30a"
            ]
        ]
    },
    {
        "id": "17c2df0db03a2c5e",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "9c90f50ab5e80b6a",
        "order": 2,
        "width": 0,
        "height": 5,
        "name": "",
        "label": "MTBF",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2050,
        "y": 680,
        "wires": []
    },
    {
        "id": "75b3750ab5591e3c",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 60",
        "func": "var result = msg.payload;\nvar mtbf = result[0].MTBM; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" mins\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 760,
        "wires": [
            [
                "3fd59fc4faf865e5",
                "c8f3a30f97729f5f"
            ]
        ]
    },
    {
        "id": "3fd59fc4faf865e5",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "fe39032fd1b497f7",
        "order": 2,
        "width": 0,
        "height": 5,
        "name": "",
        "label": "MTBM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2050,
        "y": 760,
        "wires": []
    },
    {
        "id": "2f407d7d5f4887c2",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 29",
        "func": "// var a = msg.payload;\n// flow.set('failure', a);\n\n// if(a === \"mech_brk\"){\n//     msg.topic = \"SELECT id, MTBF, MTTF, MTTR, MTBM, Availability, FailureRate FROM mech_brk ORDER BY id DESC LIMIT 1\";\n// }else if(a === \"material_shortage\"){\n//     msg.topic = \"SELECT id, MTBF, MTTF, MTTR, MTBM, Availability, FailureRate FROM material_shortage ORDER BY id DESC LIMIT 1\";\n// }else if(a === \"electrical\"){\n//     msg.topic = \"SELECT id, MTBF, MTTF, MTTR, MTBM, Availability, FailureRate FROM electrical ORDER BY id DESC LIMIT 1\";\n// }else if(a === \"powerFailure\"){\n//     msg.topic = \"SELECT id, MTBF, MTTF, MTTR, MTBM, Availability, FailureRate FROM powerfailure ORDER BY id DESC LIMIT 1\";\n// }else if(a === \"minorStop\"){\n//     msg.topic = \"SELECT id, MTBF, MTTF, MTTR, MTBM, Availability, FailureRate FROM minorstop ORDER BY id DESC LIMIT 1\";\n// }else if(a === \"startup\"){\n//     msg.topic = \"SELECT id, MTBF, MTTF, MTTR, MTBM, Availability, FailureRate FROM startup ORDER BY id DESC LIMIT 1\";\n// }else if(a === \"sku\"){\n//     msg.topic = \"SELECT id, MTBF, MTTF, MTTR, MTBM, Availability, FailureRate FROM sku ORDER BY id DESC LIMIT 1\";\n// }else{\n//     return null;\n// }\n// return msg;\n\nvar a = msg.payload;\nflow.set('failure', a);\n\nvar tableName = \"\";\n\nswitch(a) {\n    case \"mech_brk\":\n        tableName = \"mech_brk\";\n        break;\n    case \"material_shortage\":\n        tableName = \"material_shortage\";\n        break;\n    case \"electrical\":\n        tableName = \"electrical\";\n        break;\n    case \"powerFailure\":\n        tableName = \"powerfailure\";\n        break;\n    case \"minorStop\":\n        tableName = \"minorstop\";\n        break;\n    case \"startup\":\n        tableName = \"startup\";\n        break;\n    case \"sku\":\n        tableName = \"sku\";\n        break;\n    default:\n        return null;\n}\n\n// Create two **new** messages manually, not copying the original msg\nvar msg1 = {\n    topic: `SELECT id, Incidents, Uptime, Downtime, MTBF, MTTF, MTTR, MTBM, MTBSI, Availability, TotalTime, FailureRate FROM ${tableName} ORDER BY id DESC LIMIT 1`\n};\n\n// var msg2 = {\n//     topic: `SELECT SUM(TIMESTAMPDIFF(MINUTE, starttime, endtime)) AS total_minutes FROM ${tableName}`\n// };\n\n// return [msg1, msg2];\n\n\nreturn [msg1];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 480,
        "wires": [
            [
                "4a5fdfd342d99e04"
            ]
        ]
    },
    {
        "id": "c7257743b1c5dbff",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 38",
        "func": "var result = msg.payload;\nvar mtbf = result[0].MTTR; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" mins\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 520,
        "wires": [
            [
                "2b19838c7580f607",
                "4ac9bdf7d57196ec"
            ]
        ]
    },
    {
        "id": "2b19838c7580f607",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "55c31ee9dbb34ebc",
        "order": 2,
        "width": 0,
        "height": 5,
        "name": "",
        "label": "MTTR",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2030,
        "y": 520,
        "wires": []
    },
    {
        "id": "9e2104c7865a77ec",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 39",
        "func": "// var result = msg.payload;\n// var mtbf = result[0].Incidents; // Get MTBF from first row\n\n// // Optional: format it\n// msg.payload = mtbf;\n\n// return msg;\n\n\nvar result = msg.payload;\n\nif (Array.isArray(result) && result.length > 0 && result[0].Incidents !== undefined) {\n    var mtbf = result[0].Incidents;\n    msg.payload = mtbf.toFixed(1);\n} else {\n    msg.payload = \"Invalid data or empty result\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 720,
        "wires": [
            [
                "92940a1ff7d5c152",
                "fc5159ea09f1707d"
            ]
        ]
    },
    {
        "id": "92940a1ff7d5c152",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "897c1e7895de15d8",
        "order": 2,
        "width": 0,
        "height": 5,
        "name": "",
        "label": "Number of Incidents",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2100,
        "y": 720,
        "wires": []
    },
    {
        "id": "815569fba6222d2c",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 40",
        "func": "var result = msg.payload;\nvar mtbf = result[0].Downtime; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" mins\";\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 600,
        "wires": [
            [
                "1a25eabd676a92c8",
                "787b3df6f1629344"
            ]
        ]
    },
    {
        "id": "1a25eabd676a92c8",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "d9ca2781810d1bec",
        "order": 2,
        "width": 0,
        "height": 5,
        "name": "",
        "label": "Total Downtime",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2080,
        "y": 600,
        "wires": []
    },
    {
        "id": "79f5264f394eabbc",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 41",
        "func": "var result = msg.payload;\nvar mtbf = result[0].MTBSI; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" mins\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 800,
        "wires": [
            [
                "8185252a10699999",
                "375abcbd8466ce42"
            ]
        ]
    },
    {
        "id": "8185252a10699999",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "7226ecce32b199a2",
        "order": 2,
        "width": 2,
        "height": 5,
        "name": "",
        "label": "MTBSI",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2050,
        "y": 800,
        "wires": []
    },
    {
        "id": "691408a996c4d6fb",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 42",
        "func": "var result = msg.payload;\nvar mtbf = result[0].TotalTime; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" mins\";\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 840,
        "wires": [
            [
                "8e3b93a794582897",
                "dc41773bf927adcc"
            ]
        ]
    },
    {
        "id": "8e3b93a794582897",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "edb4776cadb2a593",
        "order": 2,
        "width": 2,
        "height": 5,
        "name": "",
        "label": "Batch Time",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2070,
        "y": 840,
        "wires": []
    },
    {
        "id": "d645064ffae12741",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "357dacbe34c50d2e",
        "order": 2,
        "width": 2,
        "height": 5,
        "name": "",
        "label": "Total Uptime",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2070,
        "y": 880,
        "wires": []
    },
    {
        "id": "8bb7ed2b22739a3b",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "name": "function 43",
        "func": "var result = msg.payload;\nvar mtbf = result[0].Uptime; // Get MTBF from first row\n\n// Optional: format it\nmsg.payload = mtbf.toFixed(3) + \" mins\";\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 880,
        "wires": [
            [
                "d645064ffae12741",
                "1c3e9a525aea82e3"
            ]
        ]
    },
    {
        "id": "5f221a2fec70f0c2",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "5137f65501696ca0",
        "order": 6,
        "width": 0,
        "height": 1,
        "name": "",
        "label": "MTTA",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2030,
        "y": 420,
        "wires": []
    },
    {
        "id": "db007bc536372a42",
        "type": "ui-text",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "a3c66d4185befa8f",
        "group": "5137f65501696ca0",
        "order": 2,
        "width": 0,
        "height": 1,
        "name": "",
        "label": "MTTD",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "23",
        "color": "#7961f5",
        "wrapText": false,
        "className": "",
        "x": 2150,
        "y": 400,
        "wires": []
    },
    {
        "id": "488b0310e399b30a",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "9c90f50ab5e80b6a",
        "page": "",
        "ui": "",
        "name": "MTBF",
        "order": 1,
        "width": 0,
        "height": 5,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            MTBF\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Total Uptime / Number of Failures)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2170,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "fc5159ea09f1707d",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "897c1e7895de15d8",
        "page": "",
        "ui": "",
        "name": "Number of Failures",
        "order": 1,
        "width": 0,
        "height": 5,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            Number of Incidents\n        </div>\n        <!-- <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Total Uptime / Number of Failures)\n        </div> -->\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2350,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "c8f3a30f97729f5f",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "fe39032fd1b497f7",
        "page": "",
        "ui": "",
        "name": "MTBM",
        "order": 1,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            MTBM\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (MTBF + MTTR)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2310,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "375abcbd8466ce42",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "7226ecce32b199a2",
        "page": "",
        "ui": "",
        "name": "MTBSI",
        "order": 1,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            MTBSI\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = ((Total Uptime + Total Downtime) / Number of Failures)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2310,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "dc41773bf927adcc",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "edb4776cadb2a593",
        "page": "",
        "ui": "",
        "name": "Batch Time",
        "order": 1,
        "width": 0,
        "height": 5,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            Batch Time\n        </div>\n        <!-- <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Total Uptime / Number of Failures)\n        </div> -->\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2330,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "1c3e9a525aea82e3",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "357dacbe34c50d2e",
        "page": "",
        "ui": "",
        "name": "Total Uptime",
        "order": 1,
        "width": 0,
        "height": 5,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            Total Uptime\n        </div>\n        <!-- <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Total Uptime / Number of Failures)\n        </div> -->\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2330,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "7da6f19deb191668",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "740942dcc256b295",
        "page": "",
        "ui": "",
        "name": "Failure Rate (λ)",
        "order": 1,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            Failure Rate (λ)\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (1 / MTBF )\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2340,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "787b3df6f1629344",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "d9ca2781810d1bec",
        "page": "",
        "ui": "",
        "name": "Total Downtime",
        "order": 1,
        "width": 0,
        "height": 5,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            Total Downtime\n        </div>\n        <!-- <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Total Uptime / Number of Failures)\n        </div> -->\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2340,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "c625aa7e0ea22abb",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "232df039cd26ad94",
        "page": "",
        "ui": "",
        "name": "Availability",
        "order": 1,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            Availability\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (MTBF / (MTBF + MTTR) * 100)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2330,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "4ac9bdf7d57196ec",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "55c31ee9dbb34ebc",
        "page": "",
        "ui": "",
        "name": "MTTR",
        "order": 1,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            MTTR\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Total Downtime / Number of Failures)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2310,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "a9fa3676c8e011a2",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "5137f65501696ca0",
        "page": "",
        "ui": "",
        "name": "MTTF",
        "order": 3,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            MTTF\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Batch Time / Number of Failures)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2170,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "0e8792950bc9a9aa",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "5137f65501696ca0",
        "page": "",
        "ui": "",
        "name": "MTTA",
        "order": 5,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            MTTA\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Sum Acknowledgement Delays / Number of Failures)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2290,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "e75d645173c6a1a7",
        "type": "ui-template",
        "z": "55d7e6612f33eabf",
        "g": "a3c66d4185befa8f",
        "group": "5137f65501696ca0",
        "page": "",
        "ui": "",
        "name": "MTTD",
        "order": 4,
        "width": 0,
        "height": 4,
        "head": "",
        "format": "<template>\n    <div style=\"text-align: center;\">\n        <div style=\"color: #7961f5; font-size: 23px; font-weight: bold;\">\n            MTTD\n        </div>\n        <div style=\"color: #555; font-size: 16px; margin-bottom: 8px;\">\n            = (Sum Detection Delays / Number of Failures)\n        </div>\n        <div style=\"color: #28a745; font-size: 22px;\">\n            {{msg.payload}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {}\n        }\n    }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2390,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2bc31b6342a86e01",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "addd420705e01323",
        "name": "function 35",
        "func": "msg.topic = `SELECT timestamp, oee, availability, quality, performance FROM OEE WHERE timestamp >= NOW() - INTERVAL 1 DAY;`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 820,
        "wires": [
            [
                "24fb177890e71e8e"
            ]
        ]
    },
    {
        "id": "d020e6ca5457dee8",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "addd420705e01323",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 820,
        "wires": [
            [
                "2bc31b6342a86e01"
            ]
        ]
    },
    {
        "id": "855ff81a1ec0c042",
        "type": "ui-control",
        "z": "55d7e6612f33eabf",
        "name": "",
        "ui": "b7f3cf648fd1b434",
        "events": "change",
        "x": 600,
        "y": 640,
        "wires": [
            [
                "92c91170ff2916e5"
            ]
        ]
    },
    {
        "id": "6979959bc3a5801e",
        "type": "debug",
        "z": "55d7e6612f33eabf",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 700,
        "wires": []
    },
    {
        "id": "92c91170ff2916e5",
        "type": "function",
        "z": "55d7e6612f33eabf",
        "name": "function 36",
        "func": "var a = msg.payload;\n\nif(a === \"change\"){\n    flow.set('timeFilter_oee', 1);\n    flow.set('parameter', \"oee\");\n}else {\n    return null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 680,
        "wires": [
            [
                "6979959bc3a5801e"
            ]
        ]
    },
    {
        "id": "ebb32ba3702e8303",
        "type": "inject",
        "z": "55d7e6612f33eabf",
        "d": true,
        "g": "addd420705e01323",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 760,
        "wires": [
            [
                "5ef8a1a2dae7dd7c"
            ]
        ]
    },
    {
        "id": "68e3d1ef082936ec",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "g": "c0271382b6dca19e",
        "mydb": "8e1ceca219849b97",
        "name": "",
        "x": 1920,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "25bdacdbf88ff6bb",
        "type": "mysql",
        "z": "55d7e6612f33eabf",
        "mydb": "cffef3faccffbe3a",
        "name": "",
        "x": 1190,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "c145a65f1cbcb278",
        "type": "debug",
        "z": "6922623827ba9ac4",
        "g": "51b77ddd44e9c253",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 80,
        "wires": []
    },
    {
        "id": "71d0710297ce39e7",
        "type": "function",
        "z": "6922623827ba9ac4",
        "g": "51b77ddd44e9c253",
        "name": "function 3",
        "func": "var a = msg.payload[0];\nflow.set(\"LPM\",a);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            [
                "c145a65f1cbcb278",
                "2b84af567e746afb"
            ]
        ]
    },
    {
        "id": "7ec9d97c620ed651",
        "type": "inject",
        "z": "6922623827ba9ac4",
        "g": "26f73d64f6541465",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 280,
        "wires": [
            [
                "5b40e1db88bbdf8c",
                "2340a16c8b01d321"
            ]
        ]
    },
    {
        "id": "5b40e1db88bbdf8c",
        "type": "function",
        "z": "6922623827ba9ac4",
        "g": "26f73d64f6541465",
        "name": "function 4",
        "func": "var lpm = flow.get(\"LPM\") || 0;  // Get LPM value (default to 0 if undefined)\nvar lps = lpm / 60;              // Convert LPM to LPS\n\nvar accum = flow.get(\"accum\") || 0;  // Retrieve previous accumulated value\n\n// Get last update timestamp\nvar lastUpdate = flow.get(\"lastUpdate\") || new Date().getTime();\nvar now = new Date().getTime();  // Current timestamp\n\n// Calculate the actual time elapsed (in seconds)\nvar elapsedTime = (now - lastUpdate) / 1000;\n\n// Ensure we only accumulate if a valid time has passed\nif (elapsedTime > 0) {\n    accum += lps * elapsedTime;  // Accumulate based on actual time elapsed\n    flow.set(\"accum\", accum);  // Store updated accumulated value\n    flow.set(\"lastUpdate\", now);  // Update timestamp\n}\n\nmsg.payload = accum;  // Send accumulated value as output\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            [
                "f514e1c0f905e6f2",
                "5486f30b69ab8489"
            ]
        ]
    },
    {
        "id": "f514e1c0f905e6f2",
        "type": "debug",
        "z": "6922623827ba9ac4",
        "g": "26f73d64f6541465",
        "name": "debug 2",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 280,
        "wires": []
    },
    {
        "id": "e7e06b74d0553630",
        "type": "inject",
        "z": "6922623827ba9ac4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "688de81ccb5af8fb"
            ]
        ]
    },
    {
        "id": "688de81ccb5af8fb",
        "type": "function",
        "z": "6922623827ba9ac4",
        "name": "function 5",
        "func": "flow.set(\"accum\",0);\nflow.set(\"accum2\",0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2340a16c8b01d321",
        "type": "function",
        "z": "6922623827ba9ac4",
        "g": "26f73d64f6541465",
        "name": "function 6",
        "func": "var lpm = flow.get(\"LPM\") || 0;   // Get LPM value (default to 0 if undefined)\nvar lps = lpm / 60;               // Convert LPM to LPS\n\nvar accum = flow.get(\"accum2\") || 0; // Retrieve previous accumulated value\naccum = accum + lps;               // Add LPS to accumulated value\n\nflow.set(\"accum2\", accum);          // Store updated accumulated value\n\nmsg.payload = accum;               // Send accumulated value as output\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "3105995e71e0bd88"
            ]
        ]
    },
    {
        "id": "3105995e71e0bd88",
        "type": "debug",
        "z": "6922623827ba9ac4",
        "g": "26f73d64f6541465",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 640,
        "y": 340,
        "wires": []
    },
    {
        "id": "2b84af567e746afb",
        "type": "ui-chart",
        "z": "6922623827ba9ac4",
        "g": "51b77ddd44e9c253",
        "group": "e46597166eb2f909",
        "name": "",
        "label": "Instantaneous Flow",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "0",
        "ymax": "1500",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 5,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 570,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "5486f30b69ab8489",
        "type": "ui-chart",
        "z": "6922623827ba9ac4",
        "g": "26f73d64f6541465",
        "group": "e46597166eb2f909",
        "name": "",
        "label": "Accumulated Flow",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 7,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 650,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "f98f1d4a07061ee4",
        "type": "function",
        "z": "6922623827ba9ac4",
        "g": "404d0e960ba1dc1f",
        "name": "function 8",
        "func": "var a = \"SELECT * FROM flowSwitch\";\n\n\nmsg.topic = a;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "018b339afe4357a3",
        "type": "function",
        "z": "6922623827ba9ac4",
        "g": "404d0e960ba1dc1f",
        "name": "Insert Data from context to DB",
        "func": "// let CumulFlow = flow.get('FlowMeter/cumuflow');\n\n// let dailyConsumption = flow.get('flow_difference');\n\n// msg.topic = \"INSERT INTO water_dashboard (CumulFlow, dailyConsumption) VALUES (?, ?)\";\n// msg.payload = [CumulFlow, dailyConsumption];\n\n// return msg;\n\nlet accum = flow.get('accum') || 0;\nlet lpm = flow.get('LPM') || 0;\n\n\n\nmsg.topic = \"INSERT INTO telemetry (Accum_flow, Instant_Flow) VALUES (?, ?)\";\nmsg.payload = [accum, lpm];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "dfc4762c48a6fa70",
        "type": "inject",
        "z": "6922623827ba9ac4",
        "g": "404d0e960ba1dc1f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "018b339afe4357a3",
                "f98f1d4a07061ee4"
            ]
        ]
    },
    {
        "id": "8b7fec75b3ea71b2",
        "type": "debug",
        "z": "6922623827ba9ac4",
        "g": "404d0e960ba1dc1f",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 460,
        "wires": []
    },
    {
        "id": "131d3b22c9a4fa25",
        "type": "mysql",
        "z": "9e4d821b62b925f7",
        "mydb": "0ac538a39d87e106",
        "name": "",
        "x": 600,
        "y": 460,
        "wires": [
            [
                "3f875fc5b36f2a25"
            ]
        ]
    },
    {
        "id": "24a5ef2a09576aeb",
        "type": "debug",
        "z": "9e4d821b62b925f7",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 400,
        "wires": []
    },
    {
        "id": "4261824a8310b3fc",
        "type": "inject",
        "z": "9e4d821b62b925f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "5f4237edf0470d19"
            ]
        ]
    },
    {
        "id": "8776609dd05e3e8d",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Query Sample size",
        "func": "var a = msg.payload;\nflow.set('size', a);\n\nif (a === 2){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 2;\";\n}else if (a === 3){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 3;\";\n}else if (a === 4){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 4;\";\n}else if (a === 5){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 5;\";\n}else if (a === 6){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 6;\";\n}else if (a === 7){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 7;\";\n}else if (a === 8){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 8;\";\n}else if (a === 9){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 9;\";\n}else if (a === 10){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 10;\";\n}else if (a === 15){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 15;\";\n}else if (a === 25){\n    msg.topic = \"SELECT A2 FROM MeasurementData WHERE n = 25;\";\n}else {\n    return null\n}\n\n\n// msg.topic = \"SELECT timestamp, voltage FROM voltage;\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            [
                "131d3b22c9a4fa25"
            ]
        ]
    },
    {
        "id": "1f5c05b8cfca7cbc",
        "type": "ui-dropdown",
        "z": "9e4d821b62b925f7",
        "group": "d5dd1799fe74810b",
        "name": "",
        "label": "Select Subgroup Size:",
        "tooltip": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "2",
                "value": 2,
                "type": "num"
            },
            {
                "label": "3",
                "value": 3,
                "type": "num"
            },
            {
                "label": "4",
                "value": 4,
                "type": "num"
            },
            {
                "label": "5",
                "value": 5,
                "type": "num"
            },
            {
                "label": "6",
                "value": 6,
                "type": "num"
            },
            {
                "label": "7",
                "value": 7,
                "type": "num"
            },
            {
                "label": "8",
                "value": 8,
                "type": "num"
            },
            {
                "label": "9",
                "value": 9,
                "type": "num"
            },
            {
                "label": "10",
                "value": 10,
                "type": "num"
            },
            {
                "label": "15",
                "value": 15,
                "type": "num"
            },
            {
                "label": "25",
                "value": 25,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "msgTrigger": "onClose",
        "x": 120,
        "y": 400,
        "wires": [
            [
                "ed2881beaedc10e8",
                "ce07bf76ecb11558"
            ]
        ]
    },
    {
        "id": "3f875fc5b36f2a25",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Get A2 value from DB",
        "func": "if (msg.payload && msg.payload.length > 0 && msg.payload[0].A2 !== undefined) {\n    var a2 = msg.payload[0].A2;\n    flow.set('a2_value', a2);\n    msg.a2 = a2; // Optional\n    return msg;\n} else {\n    node.warn(\"A2 value not found in SQL result.\");\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 460,
        "wires": [
            [
                "bbc4a7dd09538859"
            ]
        ]
    },
    {
        "id": "549332edf337a2d7",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Average ",
        "func": "// var size = flow.get('size');  // e.g., 2\n// var data = msg.payload;\n\n// if (!Array.isArray(data) || data.length === 0) {\n//     node.warn(\"No voltage data available.\");\n//     return null;\n// }\n\n// if (!size || size <= 0) {\n//     node.warn(\"Invalid group size.\");\n//     return null;\n// }\n\n// var averagedData = [];\n\n// for (var i = 0; i < data.length; i += size) {\n//     var group = data.slice(i, i + size);\n//     var sum = 0;\n//     var timestamps = [];\n\n//     group.forEach(d => {\n//         sum += parseFloat(d.voltage);\n//         timestamps.push(d.timestamp);\n//     });\n\n//     var avg = sum / group.length;\n\n//     averagedData.push({\n//         A: timestamps[0], // or some other logic like middle timestamp\n//         B: avg.toFixed(2),\n//         topic: \"Average\"\n//     });\n// }\n\n// msg.topic = \"Average\";\n// msg.payload = averagedData;\n// flow.set('average', averagedData);\n// return msg;\n\n\n\nvar size = flow.get('size');  // e.g., 2\nvar data = msg.payload;\n\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"No voltage data available.\");\n    return null;\n}\n\nif (!size || size <= 0) {\n    node.warn(\"Invalid group size.\");\n    return null;\n}\n\nvar averagedData = [];\nvar totalSamples = 0;  // Counter for total number of voltage samples\n\nfor (var i = 0; i < data.length; i += size) {\n    var group = data.slice(i, i + size);\n    var sum = 0;\n    var timestamps = [];\n\n    group.forEach(d => {\n        sum += parseFloat(d.voltage);\n        timestamps.push(d.timestamp);\n        totalSamples++; // Increment sample counter\n    });\n\n    var avg = sum / group.length;\n\n    averagedData.push({\n        A: timestamps[0], // or middle timestamp if you prefer\n        B: avg.toFixed(2),\n        topic: \"Average\"\n    });\n}\n\nflow.set('total_samples', totalSamples);  // Save to flow context\nflow.set('average', averagedData);        // Save averages too\n\nmsg.topic = \"Average\";\nmsg.payload = averagedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 480,
        "wires": [
            [
                "ec173053330dfdb3"
            ]
        ]
    },
    {
        "id": "ec173053330dfdb3",
        "type": "ui-chart",
        "z": "9e4d821b62b925f7",
        "group": "d3e467f74bd28ca0",
        "name": "",
        "label": "Voltage",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "Timestamp",
        "xAxisProperty": "A",
        "xAxisPropertyType": "property",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "Voltage",
        "yAxisProperty": "B",
        "yAxisPropertyType": "property",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "4",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 12,
        "className": "",
        "interpolation": "linear",
        "x": 1400,
        "y": 500,
        "wires": [
            [
                "24a5ef2a09576aeb"
            ]
        ]
    },
    {
        "id": "ed2881beaedc10e8",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Clear chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 400,
        "wires": [
            [
                "ec173053330dfdb3"
            ]
        ]
    },
    {
        "id": "ce07bf76ecb11558",
        "type": "delay",
        "z": "9e4d821b62b925f7",
        "name": "",
        "pauseType": "delay",
        "timeout": "250",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 350,
        "y": 360,
        "wires": [
            [
                "8776609dd05e3e8d"
            ]
        ]
    },
    {
        "id": "d19c95a9b3833842",
        "type": "mqtt in",
        "z": "9e4d821b62b925f7",
        "name": "",
        "topic": "devices/Device01/telemetry",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "31c9c60208bab385",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 60,
        "wires": [
            [
                "0867e0482c56335c"
            ]
        ]
    },
    {
        "id": "0867e0482c56335c",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Store to Context",
        "func": "var payload = msg.payload;\n\n// Ensure the payload is an object\nif (typeof payload === 'object' && payload !== null) {\n    // Iterate over the keys in the object\n    for (var tagName in payload) {\n        if (payload.hasOwnProperty(tagName)) {\n            var value = payload[tagName]; // Extract the value\n\n            // Ensure the value is a number before processing\n            if (typeof value === 'number') {\n                // Round the value to two decimal places\n                var roundedValue = parseFloat(value.toFixed(2));\n\n                // Store the rounded value in a flow variable using the tag name as the key\n                flow.set(tagName, roundedValue);\n\n                // Debug output (optional)\n                //node.warn(`Stored ${roundedValue} in flow variable with tag ${tagName}`);\n            } else {\n                // Debug if the value is not a number\n                //    node.warn(`Value for tag ${tagName} is not a number: ${value}`);\n            }\n        }\n    }\n} else {\n    // Debug if the payload is not an object\n    //node.warn(\"Unexpected payload format: \" + JSON.stringify(payload));\n}\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5f4237edf0470d19",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Insert Voltage into DB",
        "func": "var voltage = flow.get('Energy_Meter/30014_Average_Voltage_LL');\n\nmsg.topic = \"INSERT INTO voltage (voltage) VALUES (?)\";\nmsg.payload = [voltage];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "131d3b22c9a4fa25"
            ]
        ]
    },
    {
        "id": "bbc4a7dd09538859",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Query Voltage",
        "func": "msg.topic = \"SELECT * FROM voltage;\" \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 540,
        "wires": [
            [
                "489e89b912aebe9c"
            ]
        ]
    },
    {
        "id": "489e89b912aebe9c",
        "type": "mysql",
        "z": "9e4d821b62b925f7",
        "mydb": "0ac538a39d87e106",
        "name": "",
        "x": 1040,
        "y": 480,
        "wires": [
            [
                "549332edf337a2d7",
                "3e66a633f1bc39a2",
                "b10f11bb66544530",
                "23930795a3f045d3",
                "439c0fdcbbee21b3",
                "1740c34543509a77",
                "2b43eab1b2c8d4b4"
            ]
        ]
    },
    {
        "id": "3e66a633f1bc39a2",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "UCL",
        "func": "// var size = flow.get('size');\n// var a2 = flow.get('a2_value');  // e.g., 2\n// var data = msg.payload;\n\n// if (!Array.isArray(data) || data.length === 0) {\n//     node.warn(\"No voltage data available.\");\n//     return null;\n// }\n\n// if (!size || size <= 0) {\n//     node.warn(\"Invalid group size.\");\n//     return null;\n// }\n\n// var processedData = [];\n\n// for (var i = 0; i < data.length; i += size) {\n//     var group = data.slice(i, i + size);\n//     var values = [];\n//     var timestamps = [];\n\n//     group.forEach(d => {\n//         values.push(parseFloat(d.voltage));\n//         timestamps.push(d.timestamp);\n//     });\n\n//     var avg = values.reduce((a, b) => a + b, 0) / values.length;\n//     var max = Math.max(...values);\n//     var min = Math.min(...values);\n\n\n//     var range = parseFloat(max) - parseFloat(min);\n//     flow.set('range', range);\n\n    \n//     var UCL = avg + (a2 * range);\n//     flow.set('UCL', UCL);\n\n//     var LCL = avg - (a2 * range);\n//     flow.set('LCL', LCL);\n\n//     processedData.push({\n//         A: timestamps[0],\n//         B: UCL.toFixed(2),\n//         topic: \"UCL\"\n//     });\n// }\n\n// msg.topic = \"UCL\";\n\n// msg.payload = processedData;\n// // flow.set('average', processedData);  // Store for UCL/LCL calculation\n// return msg;\n\n\nvar size = flow.get('size');\nvar a2 = flow.get('a2_value');  // e.g., 2\nvar data = msg.payload;\n\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"No voltage data available.\");\n    return null;\n}\n\nif (!size || size <= 0) {\n    node.warn(\"Invalid group size.\");\n    return null;\n}\n\nvar processedData = [];\nvar avgSum = 0;\nvar avgCount = 0;\nvar rangeSum = 0;\nvar rangeCount = 0;\n\nvar timestamps = [];\n\nfor (var i = 0; i < data.length; i += size) {\n    var group = data.slice(i, i + size);\n    var values = [];\n\n    group.forEach(d => {\n        values.push(parseFloat(d.voltage));\n        timestamps.push(d.timestamp);\n    });\n\n    var avg = values.reduce((a, b) => a + b, 0) / values.length;\n    var max = Math.max(...values);\n    var min = Math.min(...values);\n    var range = max - min;\n\n    avgSum += avg;\n    avgCount++;\n\n    rangeSum += range;\n    rangeCount++;\n}\n\n// ✅ Final calculations\nvar overallAverage = avgCount > 0 ? (avgSum / avgCount) : 0;\nvar averageRange = rangeCount > 0 ? (rangeSum / rangeCount) : 0;\n\nvar UCL = overallAverage + (a2 * averageRange);\nvar LCL = overallAverage - (a2 * averageRange);\n\n// Store in flow context if needed\nflow.set('overall_average', overallAverage);\nflow.set('average_range', averageRange);\nflow.set('UCL', UCL);\nflow.set('LCL', LCL);\n\n// Apply same UCL for each group timestamp\nfor (var j = 0; j < avgCount; j++) {\n    processedData.push({\n        A: timestamps[j * size] || null,  // pick the first timestamp of each group\n        B: UCL.toFixed(2),\n        topic: \"UCL\"\n    });\n}\n\nmsg.topic = \"UCL\";\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "ec173053330dfdb3"
            ]
        ]
    },
    {
        "id": "b10f11bb66544530",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "LCL",
        "func": "// var size = flow.get('size');\n// var a2 = flow.get('a2_value');  // e.g., 2\n// var data = msg.payload;\n\n// if (!Array.isArray(data) || data.length === 0) {\n//     node.warn(\"No voltage data available.\");\n//     return null;\n// }\n\n// if (!size || size <= 0) {\n//     node.warn(\"Invalid group size.\");\n//     return null;\n// }\n\n// var processedData = [];\n\n// for (var i = 0; i < data.length; i += size) {\n//     var group = data.slice(i, i + size);\n//     var values = [];\n//     var timestamps = [];\n\n//     group.forEach(d => {\n//         values.push(parseFloat(d.voltage));\n//         timestamps.push(d.timestamp);\n//     });\n\n//     var avg = values.reduce((a, b) => a + b, 0) / values.length;\n//     var max = Math.max(...values);\n//     var min = Math.min(...values);\n\n\n//     var range = parseFloat(max) - parseFloat(min);\n//     flow.set('range', range);\n\n    \n//     var UCL = avg + (a2 * range);\n//     flow.set('UCL', UCL);\n\n//     var LCL = avg - (a2 * range);\n//     flow.set('LCL', LCL);\n\n//     processedData.push({\n//         A: timestamps[0],\n//         B: LCL.toFixed(2),\n//         topic: \"LCL\"\n//     });\n// }\n\n\n// msg.topic = \"LCL\";\n\n// msg.payload = processedData;\n// // flow.set('average', processedData);  // Store for UCL/LCL calculation\n// return msg;\n\n\nvar size = flow.get('size');\nvar a2 = flow.get('a2_value');  // e.g., 2\nvar data = msg.payload;\n\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"No voltage data available.\");\n    return null;\n}\n\nif (!size || size <= 0) {\n    node.warn(\"Invalid group size.\");\n    return null;\n}\n\nvar processedData = [];\nvar avgSum = 0;\nvar avgCount = 0;\nvar rangeSum = 0;\nvar rangeCount = 0;\n\nvar timestamps = [];\n\nfor (var i = 0; i < data.length; i += size) {\n    var group = data.slice(i, i + size);\n    var values = [];\n\n    group.forEach(d => {\n        values.push(parseFloat(d.voltage));\n        timestamps.push(d.timestamp);\n    });\n\n    var avg = values.reduce((a, b) => a + b, 0) / values.length;\n    var max = Math.max(...values);\n    var min = Math.min(...values);\n    var range = max - min;\n\n    avgSum += avg;\n    avgCount++;\n\n    rangeSum += range;\n    rangeCount++;\n}\n\n// ✅ Final calculations\nvar overallAverage = avgCount > 0 ? (avgSum / avgCount) : 0;\nvar averageRange = rangeCount > 0 ? (rangeSum / rangeCount) : 0;\n\nvar UCL = overallAverage + (a2 * averageRange);\nvar LCL = overallAverage - (a2 * averageRange);\n\n// Store in flow context if needed\nflow.set('overall_average', overallAverage);\nflow.set('average_range', averageRange);\nflow.set('UCL', UCL);\nflow.set('LCL', LCL);\n\n// Apply same UCL for each group timestamp\nfor (var j = 0; j < avgCount; j++) {\n    processedData.push({\n        A: timestamps[j * size] || null,  // pick the first timestamp of each group\n        B: LCL.toFixed(2),\n        topic: \"LCL\"\n    });\n}\n\nmsg.topic = \"LCL\";\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 560,
        "wires": [
            [
                "ec173053330dfdb3"
            ]
        ]
    },
    {
        "id": "23930795a3f045d3",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Average Voltage",
        "func": "// var size = flow.get('size');\n// var a2 = flow.get('a2_value');  // e.g., 2\n// var data = msg.payload;\n\n// if (!Array.isArray(data) || data.length === 0) {\n//     node.warn(\"No voltage data available.\");\n//     return null;\n// }\n\n// if (!size || size <= 0) {\n//     node.warn(\"Invalid group size.\");\n//     return null;\n// }\n\n// var processedData = [];\n// var avgSum = 0;\n// var avgCount = 0;\n// var rangeSum = 0;\n// var rangeCount = 0;\n\n// var timestamps = [];\n\n// for (var i = 0; i < data.length; i += size) {\n//     var group = data.slice(i, i + size);\n//     var values = [];\n\n//     group.forEach(d => {\n//         values.push(parseFloat(d.voltage));\n//         timestamps.push(d.timestamp);\n//     });\n\n//     var avg = values.reduce((a, b) => a + b, 0) / values.length;\n//     var max = Math.max(...values);\n//     var min = Math.min(...values);\n//     var range = max - min;\n\n//     avgSum += avg;\n//     avgCount++;\n\n//     rangeSum += range;\n//     rangeCount++;\n// }\n\n// // ✅ Final calculations\n// var overallAverage = avgCount > 0 ? (avgSum / avgCount) : 0;\n// var averageRange = rangeCount > 0 ? (rangeSum / rangeCount) : 0;\n\n// var UCL = overallAverage + (a2 * averageRange);\n// var LCL = overallAverage - (a2 * averageRange);\n\n// // Store in flow context if needed\n// flow.set('overall_average', overallAverage);\n// flow.set('average_range', averageRange);\n// flow.set('UCL', UCL);\n// flow.set('LCL', LCL);\n\n// // Apply same UCL for each group timestamp\n// for (var j = 0; j < avgCount; j++) {\n//     processedData.push({\n//         A: timestamps[j * size] || null,  // pick the first timestamp of each group\n//         B: overallAverage.toFixed(2),\n//         topic: \"Average Voltage\"\n//     });\n// }\n\n// msg.topic = \"Average Voltage\";\n// msg.payload = processedData;\n// return msg;\n\n\nvar size = flow.get('size');\nvar a2 = flow.get('a2_value');  // e.g., 2\nvar data = msg.payload;\n\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"No voltage data available.\");\n    return null;\n}\n\nif (!size || size <= 0) {\n    node.warn(\"Invalid group size.\");\n    return null;\n}\n\nvar processedData = [];\nvar avgSum = 0;\nvar avgCount = 0;\nvar rangeSum = 0;\nvar rangeCount = 0;\n\nvar timestamps = [];\nvar avgValues = [];  // For standard deviation\n\nfor (var i = 0; i < data.length; i += size) {\n    var group = data.slice(i, i + size);\n    var values = [];\n\n    group.forEach(d => {\n        values.push(parseFloat(d.voltage));\n        timestamps.push(d.timestamp);\n    });\n\n    var avg = values.reduce((a, b) => a + b, 0) / values.length;\n    var max = Math.max(...values);\n    var min = Math.min(...values);\n    var range = max - min;\n\n    avgSum += avg;\n    avgCount++;\n    avgValues.push(avg);  // Track for std dev\n\n    rangeSum += range;\n    rangeCount++;\n}\n\n// ✅ Final calculations\nvar overallAverage = avgCount > 0 ? (avgSum / avgCount) : 0;\nvar averageRange = rangeCount > 0 ? (rangeSum / rangeCount) : 0;\n\n// ✅ STDEV.S of averages\nvar variance = avgValues.reduce((sum, val) => sum + Math.pow(val - overallAverage, 2), 0) / (avgValues.length - 1);\nvar stdDev = Math.sqrt(variance);\n\n// ✅ UCL & LCL\nvar UCL = overallAverage + (a2 * averageRange);\nvar LCL = overallAverage - (a2 * averageRange);\n\n// ✅ Store in flow context\nflow.set('overall_average', overallAverage);\nflow.set('average_range', averageRange);\nflow.set('UCL', UCL);\nflow.set('LCL', LCL);\nflow.set('average_std_dev', stdDev);  // <-- Standard Deviation saved here\n\n// ✅ Format output\nfor (var j = 0; j < avgCount; j++) {\n    processedData.push({\n        A: timestamps[j * size] || null,\n        B: overallAverage.toFixed(2),\n        topic: \"Average Voltage\"\n    });\n}\n\nmsg.topic = \"Average Voltage\";\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 600,
        "wires": [
            [
                "ec173053330dfdb3"
            ]
        ]
    },
    {
        "id": "439c0fdcbbee21b3",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Standard Voltage",
        "func": "// var size = flow.get('size');\n// var a2 = flow.get('a2_value');  // e.g., 2\n// var data = msg.payload;\n\n// if (!Array.isArray(data) || data.length === 0) {\n//     node.warn(\"No voltage data available.\");\n//     return null;\n// }\n\n// if (!size || size <= 0) {\n//     node.warn(\"Invalid group size.\");\n//     return null;\n// }\n\n// var processedData = [];\n\n// for (var i = 0; i < data.length; i += size) {\n//     var group = data.slice(i, i + size);\n//     var values = [];\n//     var timestamps = [];\n\n//     group.forEach(d => {\n//         values.push(parseFloat(d.voltage));\n//         timestamps.push(d.timestamp);\n//     });\n\n//     var avg = values.reduce((a, b) => a + b, 0) / values.length;\n//     var max = Math.max(...values);\n//     var min = Math.min(...values);\n\n\n//     var range = parseFloat(max) - parseFloat(min);\n//     flow.set('range', range);\n\n\n//     var UCL = avg + (a2 * range);\n//     flow.set('UCL', UCL);\n\n//     var LCL = avg - (a2 * range);\n//     flow.set('LCL', LCL);\n\n//     processedData.push({\n//         A: timestamps[0],\n//         B: LCL.toFixed(2),\n//         topic: \"LCL\"\n//     });\n// }\n\n\n// msg.topic = \"LCL\";\n\n// msg.payload = processedData;\n// // flow.set('average', processedData);  // Store for UCL/LCL calculation\n// return msg;\n\n\nvar size = flow.get('size');\nvar a2 = flow.get('a2_value');  // e.g., 2\nvar data = msg.payload;\n\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"No voltage data available.\");\n    return null;\n}\n\nif (!size || size <= 0) {\n    node.warn(\"Invalid group size.\");\n    return null;\n}\n\nvar processedData = [];\nvar avgSum = 0;\nvar avgCount = 0;\nvar rangeSum = 0;\nvar rangeCount = 0;\n\nvar timestamps = [];\n\nfor (var i = 0; i < data.length; i += size) {\n    var group = data.slice(i, i + size);\n    var values = [];\n\n    group.forEach(d => {\n        values.push(parseFloat(d.voltage));\n        timestamps.push(d.timestamp);\n    });\n\n    var avg = values.reduce((a, b) => a + b, 0) / values.length;\n    var max = Math.max(...values);\n    var min = Math.min(...values);\n    var range = max - min;\n\n    avgSum += avg;\n    avgCount++;\n\n    rangeSum += range;\n    rangeCount++;\n}\n\n// ✅ Final calculations\nvar overallAverage = avgCount > 0 ? (avgSum / avgCount) : 0;\nvar averageRange = rangeCount > 0 ? (rangeSum / rangeCount) : 0;\n\nvar UCL = overallAverage + (a2 * averageRange);\nvar LCL = overallAverage - (a2 * averageRange);\n\n// Store in flow context if needed\nflow.set('overall_average', overallAverage);\nflow.set('average_range', averageRange);\nflow.set('UCL', UCL);\nflow.set('LCL', LCL);\n\n// Apply same UCL for each group timestamp\nfor (var j = 0; j < avgCount; j++) {\n\n    var x = 440.000;\n    processedData.push({\n        A: timestamps[j * size] || null,  // pick the first timestamp of each group\n        B: x.toFixed(2),\n        topic: \"Standard  Voltage\"\n    });\n}\n\nmsg.topic = \"Standard Voltage\";\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 640,
        "wires": [
            [
                "ec173053330dfdb3"
            ]
        ]
    },
    {
        "id": "1740c34543509a77",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 20",
        "func": "var UCL = flow.get('UCL');\nvar LCL = flow.get('LCL');\nvar size =  flow.get('size');\nvar data = msg.payload;\n\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"No voltage data to evaluate.\");\n    return null;\n}\n\nif (UCL === undefined || LCL === undefined) {\n    node.warn(\"UCL or LCL not found in flow context.\");\n    return null;\n}\n\nvar aboveUCL = 0;\n\nvar belowLCL = 0;\n\n\ndata.forEach(d => {\n    var v = parseFloat(d.voltage);\n    if (v > UCL) aboveUCL++;\n    flow.set('aboveUCL', aboveUCL);\n\n    if (v < LCL) belowLCL++;\n    flow.set('belowLCL', belowLCL);\n});\n\nvar total = aboveUCL + belowLCL;\n    flow.set('totalDefects', total);\n\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\nlet table = {\n    Timestamp: istTime,\n    Size: size,\n    \"Above UCL Count\": aboveUCL,\n    \"Below LCL Count\": belowLCL,\n    Total: total,\n    UCL: UCL.toFixed(2),\n    LCL: LCL.toFixed(2)\n};\n\nmsg.payload = table;\n// msg.topic = \"UCL_LCL_Violations\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "4faf291b6075ab71"
            ]
        ]
    },
    {
        "id": "471b1275d547c71b",
        "type": "inject",
        "z": "9e4d821b62b925f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 850,
        "y": 900,
        "wires": [
            [
                "f943c5dd386d498e"
            ]
        ]
    },
    {
        "id": "9d5ab46102980d1f",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 22",
        "func": "msg.payload = flow.get('aboveUCL');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 940,
        "wires": [
            [
                "844b86729442c382"
            ]
        ]
    },
    {
        "id": "35d738cba31eba6d",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 23",
        "func": "msg.payload = flow.get('belowLCL');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 980,
        "wires": [
            [
                "c60f7cd36d44846a"
            ]
        ]
    },
    {
        "id": "3412477ec21fa6c7",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 24",
        "func": "msg.payload = flow.get('totalDefects');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "1fc1948ce2e6a7a2"
            ]
        ]
    },
    {
        "id": "844b86729442c382",
        "type": "ui-text",
        "z": "9e4d821b62b925f7",
        "group": "be853953ba43af6f",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "Above UCL",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#f35e5e",
        "wrapText": false,
        "className": "",
        "x": 650,
        "y": 940,
        "wires": []
    },
    {
        "id": "1fc1948ce2e6a7a2",
        "type": "ui-text",
        "z": "9e4d821b62b925f7",
        "group": "24fd345344f36802",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "Total Defects",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#f25f5f",
        "wrapText": false,
        "className": "",
        "x": 650,
        "y": 1020,
        "wires": []
    },
    {
        "id": "c60f7cd36d44846a",
        "type": "ui-text",
        "z": "9e4d821b62b925f7",
        "group": "0166851d4aa00eb7",
        "order": 1,
        "width": 2,
        "height": 1,
        "name": "",
        "label": "Below LCL",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#ea6161",
        "wrapText": false,
        "className": "",
        "x": 650,
        "y": 980,
        "wires": []
    },
    {
        "id": "9ad5c65015391f8c",
        "type": "inject",
        "z": "9e4d821b62b925f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1040,
        "wires": [
            [
                "9d5ab46102980d1f",
                "3412477ec21fa6c7",
                "35d738cba31eba6d",
                "6244d684881b249d",
                "6ece76bf2924a06c",
                "d29cf4a80f4cc937",
                "d203fb38674770e0",
                "65c34221355e5ec4"
            ]
        ]
    },
    {
        "id": "70780bbb4bf55550",
        "type": "inject",
        "z": "9e4d821b62b925f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "size",
        "payloadType": "flow",
        "x": 60,
        "y": 320,
        "wires": [
            [
                "1f5c05b8cfca7cbc"
            ]
        ]
    },
    {
        "id": "f943c5dd386d498e",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 25",
        "func": "var std = flow.get('average_std_dev');\n\nvar defects = flow.get('totalDefects');\nvar samples = flow.get('total_samples');\n\nvar dpmo = (parseFloat(defects) / parseFloat(samples)) * 1000000;\nflow.set('dpmo', dpmo.toFixed(2));\n\nvar a = flow.get('size');\n\nlet now = new Date();\n\n// Convert to IST (UTC +5:30)\nlet istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\n\nmsg.payload = {\n    Timestamp: istTime,\n    Size: a,\n    Std_Dev: std.toFixed(2),\n    Defects: defects,\n    Samples: samples,\n    DPMO: dpmo.toFixed(2)\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "b8a603f594578d09"
            ]
        ]
    },
    {
        "id": "6244d684881b249d",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 26",
        "func": "msg.payload = flow.get('average_std_dev').toFixed(2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1080,
        "wires": [
            [
                "aa09e8e2437477be"
            ]
        ]
    },
    {
        "id": "6ece76bf2924a06c",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 27",
        "func": "msg.payload = flow.get('total_samples');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1120,
        "wires": [
            [
                "9c9a0466d6866490"
            ]
        ]
    },
    {
        "id": "d29cf4a80f4cc937",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 28",
        "func": "msg.payload = flow.get('dpmo');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1160,
        "wires": [
            [
                "2b806443adc01819"
            ]
        ]
    },
    {
        "id": "aa09e8e2437477be",
        "type": "ui-text",
        "z": "9e4d821b62b925f7",
        "group": "b888ef9647775b4c",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "Standard Deviation",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#f35e5e",
        "wrapText": false,
        "className": "",
        "x": 670,
        "y": 1080,
        "wires": []
    },
    {
        "id": "2b806443adc01819",
        "type": "ui-text",
        "z": "9e4d821b62b925f7",
        "group": "52f1056208436336",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "Deviations per million",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#f25f5f",
        "wrapText": false,
        "className": "",
        "x": 680,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9c9a0466d6866490",
        "type": "ui-text",
        "z": "9e4d821b62b925f7",
        "group": "fac2ad649387de9f",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "Total Samples",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#ea6161",
        "wrapText": false,
        "className": "",
        "x": 660,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4faf291b6075ab71",
        "type": "ui-table",
        "z": "9e4d821b62b925f7",
        "group": "7f237ce29a6a24c2",
        "name": "",
        "label": "",
        "order": 1,
        "width": 0,
        "height": 2,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1410,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "b8a603f594578d09",
        "type": "ui-table",
        "z": "9e4d821b62b925f7",
        "group": "9b1e88b27ae1de24",
        "name": "",
        "label": "DPMO",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1170,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "2b43eab1b2c8d4b4",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "Quartile",
        "func": "// var size = flow.get('size');\n// var data = msg.payload;\n\n// if (!Array.isArray(data) || data.length === 0) {\n//     node.warn(\"No voltage data available.\");\n//     return null;\n// }\n\n// if (!size || size <= 0) {\n//     node.warn(\"Invalid group size.\");\n//     return null;\n// }\n\n// var processedData = [];\n\n// function calculateQuartiles(arr) {\n//     arr.sort((a, b) => a - b);\n//     var q1Index = Math.floor(arr.length / 4);\n//     var q3Index = Math.ceil((3 * arr.length) / 4) - 1;\n\n//     var q1 = arr[q1Index];\n//     var q3 = arr[q3Index];\n//     return { q1, q3 };\n// }\n\n// for (var i = 0; i < data.length; i += size) {\n//     var group = data.slice(i, i + size);\n//     var values = [];\n//     var timestamp = group[0]?.timestamp || null;\n\n//     group.forEach(d => {\n//         values.push(parseFloat(d.voltage));\n//     });\n\n//     if (values.length > 0) {\n//         var { q1, q3 } = calculateQuartiles(values);\n//         var iqr = q3 - q1;\n\n//         // Outlier thresholds\n//         var lowerBound = q1 - 1.5 * iqr;\n//         var upperBound = q3 + 1.5 * iqr;\n\n//         // Detect outliers\n//         var outliers = values.filter(v => v < lowerBound || v > upperBound);\n\n//         let now = new Date();\n\n// // Convert to IST (UTC +5:30)\n//         let istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n//         processedData.push({\n//             timestamp: istTime,\n//             Q1: q1.toFixed(2),\n//             Q3: q3.toFixed(2),\n//             IQR: iqr.toFixed(2),\n//             LowerBound: lowerBound.toFixed(2),\n//             UpperBound: upperBound.toFixed(2),\n//             // Outliers: outliers.map(v => v.toFixed(2)),\n//             // topic: \"Quartile Analysis\"\n//         });\n//     }\n// }\n\n// msg.topic = \"Q1, Q3, IQR, Outliers\";\n// msg.payload = processedData;\n// return msg;\n\n\nvar size = flow.get('size');\nvar data = msg.payload;\n\nif (!Array.isArray(data) || data.length === 0) {\n    node.warn(\"No voltage data available.\");\n    return null;\n}\n\nif (!size || size <= 0) {\n    node.warn(\"Invalid group size.\");\n    return null;\n}\n\nvar processedData = [];\n\nfunction calculateQuartiles(arr) {\n    arr.sort((a, b) => a - b);\n    var q1Index = Math.floor(arr.length / 4);\n    var q3Index = Math.ceil((3 * arr.length) / 4) - 1;\n\n    var q1 = arr[q1Index];\n    flow.set('Q1', q1);\n\n    var q3 = arr[q3Index];\n    flow.set('Q3', q3);\n\n    return { q1, q3 };\n}\n\nfunction calculateSkewness(values, mean, stdDev) {\n    let n = values.length;\n    let skewSum = values.reduce((sum, val) => sum + Math.pow((val - mean) / stdDev, 3), 0);\n    return n > 2 ? skewSum * (n / ((n - 1) * (n - 2))) : 0;\n}\n\nfunction calculateKurtosis(values, mean, stdDev) {\n    let n = values.length;\n    let kurtSum = values.reduce((sum, val) => sum + Math.pow((val - mean) / stdDev, 4), 0);\n    return n > 3 ? ((n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))) * kurtSum - (3 * Math.pow(n - 1, 2) / ((n - 2) * (n - 3))) : 0;\n}\n\nfor (var i = 0; i < data.length; i += size) {\n    var group = data.slice(i, i + size);\n    var values = [];\n    var timestamp = group[0]?.timestamp || null;\n\n    group.forEach(d => {\n        values.push(parseFloat(d.voltage));\n    });\n\n    if (values.length > 0) {\n        var mean = values.reduce((a, b) => a + b, 0) / values.length;\n        var stdDev = Math.sqrt(values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length);\n\n        var { q1, q3 } = calculateQuartiles(values);\n        var iqr = q3 - q1;\n\n        var lowerBound = q1 - 1.5 * iqr;\n        var upperBound = q3 + 1.5 * iqr;\n\n        var outliers = values.filter(v => v < lowerBound || v > upperBound);\n\n        var skewness = calculateSkewness(values, mean, stdDev);\n        flow.set('skewness', skewness.toFixed(3));\n\n        var kurtosis = calculateKurtosis(values, mean, stdDev);\n        flow.set('kurtosis', kurtosis.toFixed(3));\n\n        let now = new Date();\n\n// // Convert to IST (UTC +5:30)\n       let istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19).replace(\"T\", \" \");\n\n\n\n        processedData.push({\n            timestamp: istTime,\n            Q1: q1.toFixed(2),\n            Q3: q3.toFixed(2),\n            IQR: iqr.toFixed(2),\n            UpperBound: upperBound.toFixed(2),\n            LowerBound: lowerBound.toFixed(2),\n            // Outliers: outliers.map(v => v.toFixed(2)),\n            Skewness: skewness.toFixed(3),\n            Kurtosis: kurtosis.toFixed(3),\n            // topic: \"Quartile + Shape Analysis\"\n        });\n    }\n}\n\nmsg.topic = \"Q1, Q3, IQR, Outliers, Skewness, Kurtosis\";\nmsg.payload = processedData;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 680,
        "wires": [
            [
                "a0631363acfe11a4"
            ]
        ]
    },
    {
        "id": "a0631363acfe11a4",
        "type": "ui-table",
        "z": "9e4d821b62b925f7",
        "group": "fb55ffd51d3e34eb",
        "name": "",
        "label": "Quartile",
        "order": 1,
        "width": 0,
        "height": 2,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 1400,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "d203fb38674770e0",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 31",
        "func": "// Fetch from flow context\nvar totalDefects = flow.get('totalDefects');\nvar totalSamples = flow.get('total_samples');\n\nif (!totalDefects || !totalSamples || totalSamples === 0) {\n    node.warn(\"Invalid defect or sample data.\");\n    return null;\n}\n\n// ✅ Step 1: Calculate Defect Rate\nvar defectRate = totalDefects / totalSamples;\n\n// ✅ Step 2: Two-Tail Process\nvar twoTailProcess = defectRate / 2;\n\n// ✅ Step 3: Inverse Standard Normal (Z-score)\nfunction normSInv(p) {\n    // Abramowitz and Stegun approximation\n    if (p <= 0 || p >= 1) {\n        throw new Error(\"Invalid input for normSInv: p must be between 0 and 1\");\n    }\n\n    const a1 = -39.69683028665376, a2 = 220.9460984245205, a3 = -275.9285104469687;\n    const a4 = 138.3577518672690, a5 = -30.66479806614716, a6 = 2.506628277459239;\n    const b1 = -54.47609879822406, b2 = 161.5858368580409, b3 = -155.6989798598866;\n    const b4 = 66.80131188771972, b5 = -13.28068155288572;\n    const c1 = -0.007784894002430293, c2 = -0.3223964580411365;\n    const c3 = -2.400758277161838, c4 = -2.549732539343734;\n    const c5 = 4.374664141464968, c6 = 2.938163982698783;\n    const d1 = 0.007784695709041462, d2 = 0.3224671290700398;\n    const d3 = 2.445134137142996, d4 = 3.754408661907416;\n\n    const plow = 0.02425;\n    const phigh = 1 - plow;\n    let q, r;\n\n    if (p < plow) {\n        q = Math.sqrt(-2 * Math.log(p));\n        return (((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) /\n               ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n    }\n\n    if (p > phigh) {\n        q = Math.sqrt(-2 * Math.log(1 - p));\n        return -(((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) /\n                ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);\n    }\n\n    q = p - 0.5;\n    r = q * q;\n    return (((((a1 * r + a2) * r + a3) * r + a4) * r + a5) * r + a6) * q /\n           (((((b1 * r + b2) * r + b3) * r + b4) * r + b5) * r + 1);\n}\n\n// Compute Z-score\nvar zScore = normSInv(1 - twoTailProcess);\nflow.set('zScore', zScore.toFixed(4));\n\n// ✅ Output\nmsg.payload = {\n    totalDefects: totalDefects,\n    totalSamples: totalSamples,\n    defectRate: defectRate.toFixed(6),\n    twoTailProcess: twoTailProcess.toFixed(6),\n    zScore: zScore.toFixed(4)\n};\n\n// msg.topic = \"Z-Score Calculation\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1300,
        "wires": [
            [
                "ac71705564f20c56"
            ]
        ]
    },
    {
        "id": "ac71705564f20c56",
        "type": "ui-table",
        "z": "9e4d821b62b925f7",
        "group": "8104398c681a6662",
        "name": "",
        "label": "Z- Score",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 660,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "65c34221355e5ec4",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 32",
        "func": "msg.payload = flow.get('zScore');\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1220,
        "wires": [
            [
                "897aa0710a8016e2"
            ]
        ]
    },
    {
        "id": "897aa0710a8016e2",
        "type": "ui-text",
        "z": "9e4d821b62b925f7",
        "group": "e8fec061e5d14096",
        "order": 1,
        "width": 2,
        "height": 4,
        "name": "",
        "label": "z-Score",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "",
        "fontSize": "26",
        "color": "#f25f5f",
        "wrapText": false,
        "className": "",
        "x": 640,
        "y": 1220,
        "wires": []
    },
    {
        "id": "80c0e1797db7360d",
        "type": "function",
        "z": "9e4d821b62b925f7",
        "name": "function 33",
        "func": "// var ucl = flow.get('UCL');\n// var lcl = flow.get('LCL');\n\n// var stdDev = flow.get('average_std_dev');\n\n// var mean = flow.get('overall_average');\n\n// var Zucl = parseFloat((ucl - mean) / stdDev);\n// flow.set('Zucl', Zucl);\n\n// var Zlcl = parseFloat((lcl - mean) / stdDev);\n// flow.set('Zlcl', Zlcl);\n\n// return msg;\n\nvar ucl = flow.get('UCL');\nvar lcl = flow.get('LCL');\nvar stdDev = flow.get('average_std_dev');\nvar mean = flow.get('overall_average');\n\nif (!ucl || !lcl || !stdDev || stdDev === 0 || !mean) {\n    node.warn(\"Missing or invalid UCL, LCL, mean, or stdDev.\");\n    return null;\n}\n\n// ✅ Standard Normal CDF approximation (NORM.S.DIST)\nfunction normSDist(z) {\n    return 0.5 * (1 + erf(z / Math.sqrt(2)));\n}\n\n// ✅ Error Function approximation (used in CDF)\nfunction erf(x) {\n    // Abramowitz and Stegun formula 7.1.26\n    var sign = (x >= 0) ? 1 : -1;\n    x = Math.abs(x);\n\n    var a1 = 0.254829592,\n        a2 = -0.284496736,\n        a3 = 1.421413741,\n        a4 = -1.453152027,\n        a5 = 1.061405429,\n        p = 0.3275911;\n\n    var t = 1.0 / (1.0 + p * x);\n    var y = 1.0 - (((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t) * Math.exp(-x * x);\n\n    return sign * y;\n}\n\n// ✅ Z-scores\nvar Zucl = parseFloat((ucl - mean) / stdDev);\nvar Zlcl = parseFloat((lcl - mean) / stdDev);\n\n// ✅ Tail probabilities\nvar pUCL = 1 - normSDist(Zucl);\n\nvar pLCL = normSDist(Zlcl);\n\nvar total = pUCL + pLCL;\n\n// ✅ Store in flow\nflow.set('Zucl', Zucl);\nflow.set('Zlcl', Zlcl);\nflow.set('pUCL', pUCL);\nflow.set('pLCL', pLCL);\n\n// ✅ Output\nmsg.payload = {\n    UCL: ucl.toFixed(4),\n    LCL: lcl.toFixed(4),\n    Mean: mean.toFixed(4),\n    StdDev: stdDev.toFixed(4),\n    Zucl: Zucl.toFixed(4),\n    Zlcl: Zlcl.toFixed(4),\n    Pucl: pUCL.toFixed(4),\n    Plcl: pLCL.toFixed(4),\n    Total: total.toFixed(4)\n};\n\nmsg.topic = \"Tail Probabilities from Z-Scores\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 760,
        "wires": [
            [
                "0a076fdc9c84d3c8"
            ]
        ]
    },
    {
        "id": "1832bcdf5583e341",
        "type": "inject",
        "z": "9e4d821b62b925f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 760,
        "wires": [
            [
                "80c0e1797db7360d"
            ]
        ]
    },
    {
        "id": "0a076fdc9c84d3c8",
        "type": "ui-table",
        "z": "9e4d821b62b925f7",
        "group": "89159c2fb6c924db",
        "name": "",
        "label": "Zscore & Probability",
        "order": 1,
        "width": 0,
        "height": 0,
        "maxrows": "10",
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "mobileBreakpoint": "sm",
        "mobileBreakpointType": "defaults",
        "action": "append",
        "x": 720,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "7381c62cfcd4dbfb",
        "type": "debug",
        "z": "cb6421d77edb1435",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 340,
        "wires": []
    },
    {
        "id": "8a8087aab99cb4c3",
        "type": "ui-event",
        "z": "cb6421d77edb1435",
        "ui": "b7f3cf648fd1b434",
        "name": "",
        "x": 250,
        "y": 340,
        "wires": [
            [
                "c1a31416d778a285"
            ]
        ]
    },
    {
        "id": "c1a31416d778a285",
        "type": "ui-template",
        "z": "cb6421d77edb1435",
        "group": "",
        "page": "",
        "ui": "b7f3cf648fd1b434",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div></div> <!-- nothing visual needed -->\n</template>\n\n<script>\n  export default {\n    mounted() {\n      const cookie = document.cookie\n        .split('; ')\n        .find(row => row.startsWith('user='));\n\n      if (cookie) {\n        const user = cookie.split('=')[1];\n        this.send({ payload: { user: user } });\n      }\n    }\n  }\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "widget:ui",
        "className": "",
        "x": 440,
        "y": 480,
        "wires": [
            [
                "2f12053174d20ad7"
            ]
        ]
    },
    {
        "id": "2f12053174d20ad7",
        "type": "change",
        "z": "cb6421d77edb1435",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.user",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "7793fcbbbc75ba12",
        "type": "ui-template",
        "z": "cb6421d77edb1435",
        "group": "",
        "page": "",
        "ui": "b7f3cf648fd1b434",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n    <v-btn @click=\"logout\" color=\"error\">Logout</v-btn>\n</template>\n\n<script>\n    export default {\n  methods: {\n    logout() {\n      // Clear cookies by expiring them\n      document.cookie = \"user=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n      document.cookie = \"log=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n      // Redirect to login page\n      window.location.href = \"/dashboard\";\n    }\n  }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "widget:ui",
        "className": "",
        "x": 300,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "a9fbbd32442f8cca",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 72",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 44, 'quantity': 9 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "beb776cea4a50442"
            ]
        ]
    },
    {
        "id": "97281017c9f923a0",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "a9fbbd32442f8cca"
            ]
        ]
    },
    {
        "id": "b788adfb096118f5",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 74",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 92, 'quantity': 11 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "4f356be1385e7850"
            ]
        ]
    },
    {
        "id": "5086bedb603cb11e",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 77",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 405, 'quantity': 5 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "93738164dad620be"
            ]
        ]
    },
    {
        "id": "cc6fc3ae65fa2bb8",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 79",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 700, 'quantity': 22 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 300,
        "wires": [
            [
                "ff72c4068dde1af4"
            ]
        ]
    },
    {
        "id": "f01c38f25460f5b2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 81",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1011, 'quantity': 16 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "7ff581d4614fe97f"
            ]
        ]
    },
    {
        "id": "391c66f356138ea0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 83",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1101, 'quantity': 2 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "ec558adedd6d2418"
            ]
        ]
    },
    {
        "id": "adbfa094f2ff5982",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 84",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1506, 'quantity': 1 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "f0e700f2928b46f2"
            ]
        ]
    },
    {
        "id": "3d60dbc3560ccefb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 86",
        "func": "msg.payload = { value: msg.payload, 'fc': 3, 'unitid': 1, 'address': 1801, 'quantity': 6 };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 540,
        "wires": [
            [
                "f4a528d55c4bf7c6"
            ]
        ]
    },
    {
        "id": "4f356be1385e7850",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "a8b21cf9ce5a240d"
            ],
            []
        ]
    },
    {
        "id": "93738164dad620be",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 240,
        "wires": [
            [
                "81e9e22276df4abb"
            ],
            []
        ]
    },
    {
        "id": "ff72c4068dde1af4",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 300,
        "wires": [
            [
                "7eaf991b83fa6b55"
            ],
            []
        ]
    },
    {
        "id": "d15d169327e075ff",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 91",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure\", data[0]);\nflow.set(\"Adaptive_Setting\", data[1]);\nflow.set(\"Actual_Pressure\", data[6]);\nflow.set(\"System_Flow\", data[7]);\nflow.set(\"Suction_Pressure\", data[8])\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a8b21cf9ce5a240d",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 93",
        "func": "let data = msg.payload;\nflow.set(\"Status_Pump_1\", data[0]);\nflow.set(\"Status_Pump_2\", data[1]);\nflow.set(\"Status_Pump_3\", data[2]);\nflow.set(\"Status_Pump_4\", data[3]);\nflow.set(\"Status_Pump_5\", data[4]);\nflow.set(\"Status_Pump_6\", data[5]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "81e9e22276df4abb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 94",
        "func": "let data = msg.payload;\nflow.set(\"Kw\", data[0]);\nflow.set(\"Load_Percentage\", data[4]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7eaf991b83fa6b55",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 95",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_1\", data[0]);\nflow.set(\"Current_Pump_2\", data[1]);\nflow.set(\"Current_Pump_3\", data[2]);\nflow.set(\"Current_Pump_4\", data[3]);\nflow.set(\"Current_Pump_5\", data[4]);\nflow.set(\"Current_Pump_6\", data[5]);\nflow.set(\"Power_Pump_1\", data[10]);\nflow.set(\"Power_Pump_2\", data[11]);\nflow.set(\"Power_Pump_3\", data[12]);\nflow.set(\"Power_Pump_4\", data[13]);\nflow.set(\"Power_Pump_5\", data[14]);\nflow.set(\"Power_Pump_6\", data[15]);\nflow.set(\"Output_Speed_1\", data[16]);\nflow.set(\"Output_Speed_2\", data[17]);\nflow.set(\"Output_Speed_3\", data[18]);\nflow.set(\"Output_Speed_4\", data[19]);\nflow.set(\"Output_Speed_5\", data[20]);\nflow.set(\"Output_Speed_6\", data[21]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7ff581d4614fe97f",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 360,
        "wires": [
            [
                "368052f67f59de76"
            ],
            []
        ]
    },
    {
        "id": "ec558adedd6d2418",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 420,
        "wires": [
            [
                "d1bf379febb9ca8b"
            ],
            []
        ]
    },
    {
        "id": "f0e700f2928b46f2",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "4e99947bff98853a"
            ],
            []
        ]
    },
    {
        "id": "f4a528d55c4bf7c6",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 540,
        "wires": [
            [
                "5d904419efb40643"
            ],
            []
        ]
    },
    {
        "id": "368052f67f59de76",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 96",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_1\", data[0]);\nflow.set(\"Run_Mint_Pump_2\", data[1]);\nflow.set(\"Run_Mint_Pump_3\", data[2]);\nflow.set(\"Run_Mint_Pump_4\", data[3]);\nflow.set(\"Run_Mint_Pump_5\", data[4]);\nflow.set(\"Run_Mint_Pump_6\", data[5]);\nflow.set(\"Run_Hr_Pump_1\", data[10]);\nflow.set(\"Run_Hr_Pump_2\", data[11]);\nflow.set(\"Run_Hr_Pump_3\", data[12]);\nflow.set(\"Run_Hr_Pump_4\", data[13]);\nflow.set(\"Run_Hr_Pump_5\", data[14]);\nflow.set(\"Run_Hr_Pump_6\", data[15]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d1bf379febb9ca8b",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 97",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump\", data[0]);\nflow.set(\"Standby_Pump\", data[1]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "4e99947bff98853a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 98",
        "func": "let data = msg.payload;\nflow.set(\"System_Type\", data[0]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "5d904419efb40643",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "function 99",
        "func": "// let data = msg.payload;\n// flow.set(\"Count_Hr_Pump_1\", data[0]);\n// flow.set(\"Count_Hr_Pump_2\", data[1]);\n// flow.set(\"Count_Hr_Pump_3\", data[2]);\n// flow.set(\"Count_Hr_Pump_4\", data[3]);\n// flow.set(\"Count_Hr_Pump_5\", data[4]);\n// flow.set(\"Count_Hr_Pump_6\", data[5]);\n// return msg;\n\n\nlet data = msg.payload;\n\n// Make sure you have at least 12 registers for 6 pumps (2 registers per pump)\nif (Array.isArray(data) && data.length >= 12) {\n    // Combine two registers for each pump (Big Endian assumed: high word first)\n    let pump1 = (data[0] << 16) | data[1];\n    let pump2 = (data[2] << 16) | data[3];\n    let pump3 = (data[4] << 16) | data[5];\n    let pump4 = (data[6] << 16) | data[7];\n    let pump5 = (data[8] << 16) | data[9];\n    let pump6 = (data[10] << 16) | data[11];\n\n    flow.set(\"Count_Hr_Pump_1\", pump1);\n    flow.set(\"Count_Hr_Pump_2\", pump2);\n    flow.set(\"Count_Hr_Pump_3\", pump3);\n    flow.set(\"Count_Hr_Pump_4\", pump4);\n    flow.set(\"Count_Hr_Pump_5\", pump5);\n    flow.set(\"Count_Hr_Pump_6\", pump6);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "09e23be23dde6ceb",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.4",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "f01c38f25460f5b2"
            ]
        ]
    },
    {
        "id": "bad470461c456bf1",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "b788adfb096118f5"
            ]
        ]
    },
    {
        "id": "c0df6fb1fb14c10d",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.2",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "5086bedb603cb11e"
            ]
        ]
    },
    {
        "id": "69923f8abf2f73dc",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.3",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "cc6fc3ae65fa2bb8"
            ]
        ]
    },
    {
        "id": "c017df6d088584f2",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.5",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "391c66f356138ea0"
            ]
        ]
    },
    {
        "id": "2fd4343883d6ef64",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.6",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 480,
        "wires": [
            [
                "adbfa094f2ff5982"
            ]
        ]
    },
    {
        "id": "4fd64a13732ec3e4",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.7",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 540,
        "wires": [
            [
                "3d60dbc3560ccefb"
            ]
        ]
    },
    {
        "id": "e1b08b7445db5653",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "function 100",
        "func": "msg.payload = { value: msg.payload, 'fc': 1, 'unitid': 1, 'address': 2401, 'quantity': 82 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 640,
        "wires": [
            [
                "494855ba78f5d50b"
            ]
        ]
    },
    {
        "id": "8ab81393195ed7eb",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.8",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 640,
        "wires": [
            [
                "e1b08b7445db5653"
            ]
        ]
    },
    {
        "id": "a0c2b733a5bfc2ed",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "function 108",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach\", data[0]);\nflow.set(\"Pump_2_Start_Stop_Reach\", data[1]);\nflow.set(\"Pump_3_Start_Stop_Reach\", data[2]);\nflow.set(\"Pump_4_Start_Stop_Reach\", data[3]);\nflow.set(\"Pump_5_Start_Stop_Reach\", data[4]);\nflow.set(\"Pump_6_Start_Stop_Reach\", data[5]);\nflow.set(\"Pump_1_Trip\", data[10]);\nflow.set(\"Pump_2_Trip\", data[11]);\nflow.set(\"Pump_3_Trip\", data[12]);\nflow.set(\"Pump_4_Trip\", data[13]);\nflow.set(\"Pump_5_Trip\", data[14]);\nflow.set(\"Pump_6_Trip\", data[15]);\nflow.set(\"High_Pressure\", data[20]);\nflow.set(\"Low_Pressure\", data[22]);\nflow.set(\"Service_Interval_Reset\", data[23]);\nflow.set(\"Sensor_Fail\", data[30]);\nflow.set(\"Pump_1_Max_Time_Reach\", data[50]);\nflow.set(\"Pump_2_Max_Time_Reach\", data[51]);\nflow.set(\"Pump_3_Max_Time_Reach\", data[52]);\nflow.set(\"Pump_4_Max_Time_Reach\", data[53]);\nflow.set(\"Pump_5_Max_Time_Reach\", data[54]);\nflow.set(\"Pump_6_Max_Time_Reach\", data[55]);\nflow.set(\"Alarm_VFD_Overload\", data[60]);\nflow.set(\"Dry_Run_Alarm\", data[61]);\nflow.set(\"High_Pressure_Alarm\", data[62]);\nflow.set(\"Low_Pressure_Alarm\", data[63]);\nflow.set(\"Pressure_Sensor_Fail\", data[64]);\nflow.set(\"Channel_2_Sensor_Fail\", data[65]);\nflow.set(\"VFD_Dry_Run_Spare\", data[66]);\nflow.set(\"Chut_Off_Pressure_Reach\", data[67]);\nflow.set(\"Suction_Pr_Low\", data[68]);\nflow.set(\"Emergency_Stopped\", data[69]);\nflow.set(\"VFD_Communication_Fail\", data[70]);\nflow.set(\"Pump_Service_Expired\", data[71]);\nflow.set(\"Dry_Run_VFD_1\", data[72]);\nflow.set(\"Dry_Run_VFD_2\", data[73]);\nflow.set(\"Dry_Run_VFD_3\", data[74]);\nflow.set(\"Dry_Run_VFD_4\", data[75]);\nflow.set(\"Dry_Run_VFD_5\", data[76]);\nflow.set(\"Dry_Run_VFD_6\", data[77]);\nflow.set(\"System_Healthy_1\", data[80]);\nflow.set(\"System_Healthy_2\", data[81]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "beb776cea4a50442",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "dcfcfffab8ad381e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 120,
        "wires": [
            [
                "d15d169327e075ff"
            ],
            []
        ]
    },
    {
        "id": "494855ba78f5d50b",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "e1738dc8b4d4f3ff",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 640,
        "wires": [
            [
                "a0c2b733a5bfc2ed"
            ],
            []
        ]
    },
    {
        "id": "46b3e0b4b3d12030",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 109",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure\"),\n    System_Flow: flow.get(\"System_Flow\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw\"),\n    Load_Percentage: flow.get(\"Load_Percentage\"),\n    Current_Pump_1: flow.get(\"Current_Pump_1\"),\n    Current_Pump_2: flow.get(\"Current_Pump_2\"),\n    Current_Pump_3: flow.get(\"Current_Pump_3\"),\n    Current_Pump_4: flow.get(\"Current_Pump_4\"),\n    Current_Pump_5: flow.get(\"Current_Pump_5\"),\n    Current_Pump_6: flow.get(\"Current_Pump_6\"),\n    Power_Pump_1: flow.get(\"Power_Pump_1\"),\n    Power_Pump_2: flow.get(\"Power_Pump_2\"),\n    Power_Pump_3: flow.get(\"Power_Pump_3\"),\n    Power_Pump_4: flow.get(\"Power_Pump_4\"),\n    Power_Pump_5: flow.get(\"Power_Pump_5\"),\n    Power_Pump_6: flow.get(\"Power_Pump_6\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_1\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_1\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_2\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_2\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_3\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_3\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_4\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_4\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_5\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_5\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_6\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_6\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "5f6c662ab3aa669b",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 650,
        "y": 900,
        "wires": [
            [
                "585e906aeb4b2062"
            ]
        ]
    },
    {
        "id": "1928bd3aedd7bfba",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "",
        "topic": "office/KSB/pump1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 1130,
        "y": 900,
        "wires": []
    },
    {
        "id": "16a11446366bd08b",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1.9",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "d4d74499d0aa8520"
            ]
        ]
    },
    {
        "id": "d4d74499d0aa8520",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "function 110",
        "func": "msg.payload = { value: msg.payload, 'fc': 1, 'unitid': 1, 'address': 2351, 'quantity': 16 } ;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 740,
        "wires": [
            [
                "4674217c13431770"
            ]
        ]
    },
    {
        "id": "4674217c13431770",
        "type": "modbus-flex-getter",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 630,
        "y": 740,
        "wires": [
            [
                "53e1cc01d04b8b3c"
            ],
            []
        ]
    },
    {
        "id": "53e1cc01d04b8b3c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "c4632f066fadc072",
        "name": "function 111",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", data[0]);\nflow.set(\"Main_Contactor_Pump_1\", data[1]);\nflow.set(\"Main_Contactor_Pump_2\", data[2]);\nflow.set(\"Main_Contactor_Pump_3\", data[3]);\nflow.set(\"Main_Contactor_Pump_4\", data[4]);\nflow.set(\"Main_Contactor_Pump_5\", data[5]);\nflow.set(\"Main_Contactor_Pump_6\", data[6]);\nflow.set(\"Delta_Contactor_Pump_1\", data[7]);\nflow.set(\"Delta_Contactor_Pump_2\", data[10]);\nflow.set(\"Delta_Contactor_Pump_3\", data[11]);\nflow.set(\"Delta_Contactor_Pump_4\", data[12]);\nflow.set(\"Delta_Contactor_Pump_5\", data[13]);\nflow.set(\"Delta_Contactor_Pump_6\", data[14]);\nflow.set(\"VFD_Run_Spare\", data[15]);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "d5ccdda0aaae3cf9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 112",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump\")+\"+\"+flow.get(\"Standby_Pump\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_1\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_2\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_3\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_4\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_5\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_6\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip\"),\n    High_Pressure: flow.get(\"High_Pressure\"),\n    Low_Pressure: flow.get(\"Low_Pressure\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "be2f7a9bbd4d55c3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 113",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_1\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_2\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_3\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_4\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_5\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_6\"),\n    System_Healthy_1: flow.get(\"System_Healthy_1\"),\n    System_Healthy_2: flow.get(\"System_Healthy_2\"),\n    Buzzer: flow.get(\"Buzzer\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_1\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_2\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_3\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_4\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_5\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_6\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_1\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_2\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_3\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_4\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_5\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_6\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare\"),\n    Output_Speed_1: flow.get(\"Output_Speed_1\"),\n    Output_Speed_2: flow.get(\"Output_Speed_2\"),\n    Output_Speed_3: flow.get(\"Output_Speed_3\"),\n    Output_Speed_4: flow.get(\"Output_Speed_4\"),\n    Output_Speed_5: flow.get(\"Output_Speed_5\"),\n    Output_Speed_6: flow.get(\"Output_Speed_6\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "b47f8386cc83ed22",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Pressure",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure\",10.11);\nflow.set(\"Adaptive_Setting\", 50.55);\nflow.set(\"Actual_Pressure\", 9.35);\nflow.set(\"System_Flow\", 35.11);\nflow.set(\"Suction_Pressure\", 8.34);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "e6ca95a1760b5766",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Pump Status",
        "func": "let data = msg.payload;\nflow.set(\"Status_Pump_1\", 0);\nflow.set(\"Status_Pump_2\", 3);\nflow.set(\"Status_Pump_3\", 1);\nflow.set(\"Status_Pump_4\", 0);\nflow.set(\"Status_Pump_5\", 2);\nflow.set(\"Status_Pump_6\", 3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "bdb0d662718acdb2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "kw & load %",
        "func": "let data = msg.payload;\nflow.set(\"Kw\", 80.22);\nflow.set(\"Load_Percentage\", 20);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "8f28983014f1a2dc",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "current, power, out freq",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_1\", 80.23);\nflow.set(\"Current_Pump_2\", 50.11);\nflow.set(\"Current_Pump_3\", 90.22);\nflow.set(\"Current_Pump_4\", 30.22);\nflow.set(\"Current_Pump_5\", 10.22);\nflow.set(\"Current_Pump_6\", 10.22);\nflow.set(\"Power_Pump_1\", 60.22);\nflow.set(\"Power_Pump_2\", 70.22);\nflow.set(\"Power_Pump_3\", 40.22);\nflow.set(\"Power_Pump_4\", 25.22);\nflow.set(\"Power_Pump_5\", 20.22);\nflow.set(\"Power_Pump_6\", 15.22);\nflow.set(\"Output_Speed_1\", 24.22);\nflow.set(\"Output_Speed_2\", 48.22);\nflow.set(\"Output_Speed_3\", 42.22);\nflow.set(\"Output_Speed_4\", 53.22);\nflow.set(\"Output_Speed_5\", 25.22);\nflow.set(\"Output_Speed_6\", 20.22);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "9d6fc4a1802e9dc2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "run time",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_1\", 20);\nflow.set(\"Run_Mint_Pump_2\", 9);\nflow.set(\"Run_Mint_Pump_3\", 4);\nflow.set(\"Run_Mint_Pump_4\", 1);\nflow.set(\"Run_Mint_Pump_5\", 0);\nflow.set(\"Run_Mint_Pump_6\", 5);\nflow.set(\"Run_Hr_Pump_1\", 10);\nflow.set(\"Run_Hr_Pump_2\", 8);\nflow.set(\"Run_Hr_Pump_3\", 7);\nflow.set(\"Run_Hr_Pump_4\", 3);\nflow.set(\"Run_Hr_Pump_5\", 7);\nflow.set(\"Run_Hr_Pump_6\", 5);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "fda5f5b3436dd186",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "function 119",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump\", 4);\nflow.set(\"Standby_Pump\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "532b4f1502309d38",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "function 120",
        "func": "let data = msg.payload;\nflow.set(\"System_Type\", 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "e861f8a3cc5d4eb9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "function 121",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_1\", 3);\nflow.set(\"Count_Hr_Pump_2\", 6);\nflow.set(\"Count_Hr_Pump_3\", 8);\nflow.set(\"Count_Hr_Pump_4\", 1);\nflow.set(\"Count_Hr_Pump_5\", 11);\nflow.set(\"Count_Hr_Pump_6\", 10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "8ba5753f51c443e3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "function 122",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach\", 1);\nflow.set(\"Pump_2_Start_Stop_Reach\", 1);\nflow.set(\"Pump_3_Start_Stop_Reach\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach\", 1);\nflow.set(\"Pump_5_Start_Stop_Reach\", 0);\nflow.set(\"Pump_6_Start_Stop_Reach\", 0);\nflow.set(\"Pump_1_Trip\", 1);\nflow.set(\"Pump_2_Trip\", 0);\nflow.set(\"Pump_3_Trip\", 0);\nflow.set(\"Pump_4_Trip\", 1);\nflow.set(\"Pump_5_Trip\", 0);\nflow.set(\"Pump_6_Trip\", 0);\nflow.set(\"High_Pressure\", 0);\nflow.set(\"Low_Pressure\", 0);\nflow.set(\"Service_Interval_Reset\", 0);\nflow.set(\"Sensor_Fail\", 1);\nflow.set(\"Pump_1_Max_Time_Reach\", 0);\nflow.set(\"Pump_2_Max_Time_Reach\", 0);\nflow.set(\"Pump_3_Max_Time_Reach\", 0);\nflow.set(\"Pump_4_Max_Time_Reach\", 1);\nflow.set(\"Pump_5_Max_Time_Reach\", 0);\nflow.set(\"Pump_6_Max_Time_Reach\", 0);\nflow.set(\"Alarm_VFD_Overload\", 0);\nflow.set(\"Dry_Run_Alarm\", 0);\nflow.set(\"High_Pressure_Alarm\", 1);\nflow.set(\"Low_Pressure_Alarm\", 0);\nflow.set(\"Pressure_Sensor_Fail\", 0);\nflow.set(\"Channel_2_Sensor_Fail\", 0);\nflow.set(\"VFD_Dry_Run_Spare\", 0);\nflow.set(\"Chut_Off_Pressure_Reach\", 0);\nflow.set(\"Suction_Pr_Low\", 0);\nflow.set(\"Emergency_Stopped\", 1);\nflow.set(\"VFD_Communication_Fail\", 0);\nflow.set(\"Pump_Service_Expired\", 0);\nflow.set(\"Dry_Run_VFD_1\", 0);\nflow.set(\"Dry_Run_VFD_2\", 0);\nflow.set(\"Dry_Run_VFD_3\", 0);\nflow.set(\"Dry_Run_VFD_4\", 0);\nflow.set(\"Dry_Run_VFD_5\", 0);\nflow.set(\"Dry_Run_VFD_6\", 1);\nflow.set(\"System_Healthy_1\",0);\nflow.set(\"System_Healthy_2\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "e044818ea809772c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "function 123",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", 0);\nflow.set(\"Main_Contactor_Pump_1\", 1);\nflow.set(\"Main_Contactor_Pump_2\", 0);\nflow.set(\"Main_Contactor_Pump_3\", 1);\nflow.set(\"Main_Contactor_Pump_4\", 1);\nflow.set(\"Main_Contactor_Pump_5\", 1);\nflow.set(\"Main_Contactor_Pump_6\", 1);\nflow.set(\"Delta_Contactor_Pump_1\", 0);\nflow.set(\"Delta_Contactor_Pump_2\", 1);\nflow.set(\"Delta_Contactor_Pump_3\", 0);\nflow.set(\"Delta_Contactor_Pump_4\", 0);\nflow.set(\"Delta_Contactor_Pump_5\", 0);\nflow.set(\"Delta_Contactor_Pump_6\", 1);\nflow.set(\"VFD_Run_Spare\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "cdb5b07a2e50b3c1",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1060,
        "wires": [
            [
                "b47f8386cc83ed22",
                "e6ca95a1760b5766",
                "bdb0d662718acdb2",
                "8f28983014f1a2dc",
                "9d6fc4a1802e9dc2",
                "fda5f5b3436dd186",
                "532b4f1502309d38",
                "e861f8a3cc5d4eb9",
                "8ba5753f51c443e3",
                "e044818ea809772c",
                "5ec19074d2883167",
                "6502bd4e688a6bd1"
            ]
        ]
    },
    {
        "id": "4f3115d94159b6ce",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 960,
        "wires": []
    },
    {
        "id": "97280196434d5618",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_1\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_2\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_3\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_4\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_5\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_6\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "f5979ebd6dea2a53",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "de10c15ca37b5d7d",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 2",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_2\"),\n    Current_Pump: flow.get(\"Current_Pump_2\"),\n    Power_Pump: flow.get(\"Power_Pump_2\"),\n    Output_Speed: flow.get(\"Output_Speed_2\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_2\")+\"hr_\" +flow.get(\"Run_Hr_Pump_2\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_2\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_2\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_2_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_2\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_2\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_2\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3200,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "12b197014b40df29",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 3",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_3\"),\n    Current_Pump: flow.get(\"Current_Pump_3\"),\n    Power_Pump: flow.get(\"Power_Pump_3\"),\n    Output_Speed: flow.get(\"Output_Speed_3\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_3\")+\"hr_\" +flow.get(\"Run_Hr_Pump_3\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_3\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_3\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_3_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_3\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_3\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_3\"),\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3240,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "124e65a93e8ff8ff",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 4",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_4\"),\n    Current_Pump: flow.get(\"Current_Pump_4\"),\n    Power_Pump: flow.get(\"Power_Pump_4\"),\n    Output_Speed: flow.get(\"Output_Speed_4\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_4\")+\"hr_\" +flow.get(\"Run_Hr_Pump_4\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_4\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_4\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_4_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_4\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_4\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_4\"),\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3280,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "90de30eb259a99f1",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 5",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_5\"),\n    Current_Pump: flow.get(\"Current_Pump_5\"),\n    Power_Pump: flow.get(\"Power_Pump_5\"),\n    Output_Speed: flow.get(\"Output_Speed_5\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_5\")+\"hr_\" +flow.get(\"Run_Hr_Pump_5\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_5\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_5\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_5_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_5\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_5\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_5\"),\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3320,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "1635787a014fbcf3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 6",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_6\"),\n    Current_Pump: flow.get(\"Current_Pump_6\"),\n    Power_Pump: flow.get(\"Power_Pump_6\"),\n    Output_Speed: flow.get(\"Output_Speed_6\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_6\")+\"hr_\" +flow.get(\"Run_Hr_Pump_6\")+\"min\",\n    // Run_Mint_Pump: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_6\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_6\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_6_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_6\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_6\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_6\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3360,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "80b8eaccfc0f411f",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump1",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 690,
        "y": 3160,
        "wires": []
    },
    {
        "id": "36660cbe1d9cb823",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump4",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 710,
        "y": 3320,
        "wires": []
    },
    {
        "id": "535197766c6e65ad",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 670,
        "y": 3240,
        "wires": []
    },
    {
        "id": "cf3ac8a5310e5482",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 670,
        "y": 3200,
        "wires": []
    },
    {
        "id": "4093c0203da34418",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump6",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 710,
        "y": 3420,
        "wires": []
    },
    {
        "id": "f861bd103a5522e3",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/Pump5",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 810,
        "y": 3380,
        "wires": []
    },
    {
        "id": "96ab568f46edd394",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Pump 1",
        "func": "msg.payload = {\n    Status_Pump: flow.get(\"Status_Pump_1\"),\n    Current_Pump: flow.get(\"Current_Pump_1\"),\n    Power_Pump: flow.get(\"Power_Pump_1\"),\n    Output_Speed: flow.get(\"Output_Speed_1\"),\n    Run_Pump: flow.get(\"Run_Mint_Pump_1\")+\"hr_\" +flow.get(\"Run_Hr_Pump_1\")+\"min\",\n    // Run_Hr_Pump: flow.get(\"Run_Hr_Pump_1\"),\n    Count_Hr_Pump: flow.get(\"Count_Hr_Pump_1\"),\n    Pump_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach\"),\n    Pump_Trip: flow.get(\"Pump_1_Trip\"),\n    Pump_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach\"),\n    Dry_Run_VFD: flow.get(\"Dry_Run_VFD_1\"),\n    Main_Contactor_Pump: flow.get(\"Main_Contactor_Pump_1\"),\n    Delta_Contactor_Pump: flow.get(\"Delta_Contactor_Pump_1\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3160,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "d1c9508a556b3280",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 3280,
        "wires": [
            [
                "96ab568f46edd394",
                "de10c15ca37b5d7d",
                "12b197014b40df29",
                "124e65a93e8ff8ff",
                "90de30eb259a99f1",
                "1635787a014fbcf3",
                "96f2ba61a8b584de",
                "7749ccf11f62e0c7"
            ]
        ]
    },
    {
        "id": "18f9d5949bf75297",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "debug 117",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 3280,
        "wires": []
    },
    {
        "id": "96f2ba61a8b584de",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "Parameters",
        "func": "let statusMap = {\n    0: \"Trip\",\n    1: \"Running\",\n    2: \"Off\",\n    3: \"Under_Maintenance\"\n};\n\nlet systemTypeMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VTP\"\n};\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_1\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_2\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_3\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_4\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_5\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_6\")] || \"Unknown\";\nlet System_Type = systemTypeMap[flow.get(\"System_Type\")] || \"Unknown\";\nmsg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure\"),\n    System_Flow: flow.get(\"System_Flow\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure\"),\n    Kw: flow.get(\"Kw\"),\n    Load_Percentage: flow.get(\"Load_Percentage\"),\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump\"),\n    Standby_Pump: flow.get(\"Standby_Pump\"),\n    High_Pressure: flow.get(\"High_Pressure\"),\n    Low_Pressure: flow.get(\"Low_Pressure\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail\"),\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired\"),\n    System_Healthy_1: flow.get(\"System_Healthy_1\"),\n    System_Healthy_2: flow.get(\"System_Healthy_2\"),\n    Buzzer: flow.get(\"Buzzer\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6,\n    System_Type: System_Type\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3400,
        "wires": [
            [
                "18f9d5949bf75297"
            ]
        ]
    },
    {
        "id": "7d960e0a73597c41",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "",
        "topic": "KSB/PumpPara",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 820,
        "y": 3480,
        "wires": []
    },
    {
        "id": "7749ccf11f62e0c7",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3440,
        "wires": [
            [
                "c4f759d4ae2041b3"
            ]
        ]
    },
    {
        "id": "c4f759d4ae2041b3",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "d": true,
        "g": "c5c5d6bbc7362491",
        "name": "debug 119",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 3460,
        "wires": []
    },
    {
        "id": "78f5bb5b906b2a00",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "6283ef19963039c0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 148",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_11\", 25.1);\nflow.set(\"Current_Pump_21\", 58.3);\nflow.set(\"Current_Pump_31\", 72.4);\nflow.set(\"Current_Pump_41\", 80.6);\nflow.set(\"Current_Pump_51\", 57.8);\nflow.set(\"Current_Pump_61\", 28.4);\nflow.set(\"Power_Pump_11\", 62.1);\nflow.set(\"Power_Pump_21\", 28.2);\nflow.set(\"Power_Pump_31\", 40.3);\nflow.set(\"Power_Pump_41\", 26.4);\nflow.set(\"Power_Pump_51\", 79.5);\nflow.set(\"Power_Pump_61\", 80.6);\nflow.set(\"Output_Speed_11\", 24.7);\nflow.set(\"Output_Speed_21\", 48.8);\nflow.set(\"Output_Speed_31\", 42.9);\nflow.set(\"Output_Speed_41\", 53.1);\nflow.set(\"Output_Speed_51\", 25.2);\nflow.set(\"Output_Speed_61\", 20.3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "f1faa70bf1f18b22",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 149",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure1\",11.11);\nflow.set(\"Adaptive_Setting1\", 30.11);\nflow.set(\"Actual_Pressure1\", 22.11);\nflow.set(\"System_Flow1\", 69.20);\nflow.set(\"Suction_Pressure1\", 60.11);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "9fa91f3a18b746de",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 150",
        "func": "let data = msg.payload;\nflow.set(\"Status_Pump_11\", 1);\nflow.set(\"Status_Pump_21\", 0);\nflow.set(\"Status_Pump_31\", 2);\nflow.set(\"Status_Pump_41\", 0);\nflow.set(\"Status_Pump_51\", 3);\nflow.set(\"Status_Pump_61\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "2c1107898f8f9788",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 151",
        "func": "let data = msg.payload;\nflow.set(\"Kw1\", 80.22);\nflow.set(\"Load_Percentage1\", 90);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "9e046dec848af17e",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 152",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_11\", 1);\nflow.set(\"Run_Mint_Pump_21\", 2);\nflow.set(\"Run_Mint_Pump_31\", 3);\nflow.set(\"Run_Mint_Pump_41\", 4);\nflow.set(\"Run_Mint_Pump_51\", 5);\nflow.set(\"Run_Mint_Pump_61\", 6);\nflow.set(\"Run_Hr_Pump_11\", 7);\nflow.set(\"Run_Hr_Pump_21\", 8);\nflow.set(\"Run_Hr_Pump_31\", 9);\nflow.set(\"Run_Hr_Pump_41\", 10);\nflow.set(\"Run_Hr_Pump_51\", 11);\nflow.set(\"Run_Hr_Pump_61\", 12);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "76b1186fe316bfac",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 153",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump1\", 3);\nflow.set(\"Standby_Pump1\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "8c6ba61e7edbf195",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 154",
        "func": "let data = msg.payload;\nflow.set(\"System_Type1\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "7f084d0dd9278afd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 155",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_11\", 2);\nflow.set(\"Count_Hr_Pump_21\", 3);\nflow.set(\"Count_Hr_Pump_31\", 4);\nflow.set(\"Count_Hr_Pump_41\", 5);\nflow.set(\"Count_Hr_Pump_51\", 6);\nflow.set(\"Count_Hr_Pump_61\", 7);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "125e4be6794201e5",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 156",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach1\", 1);\nflow.set(\"Pump_2_Start_Stop_Reach1\", 0);\nflow.set(\"Pump_3_Start_Stop_Reach1\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach1\", 0);\nflow.set(\"Pump_5_Start_Stop_Reach1\", 1);\nflow.set(\"Pump_6_Start_Stop_Reach1\", 1);\nflow.set(\"Pump_1_Trip1\", 1);\nflow.set(\"Pump_2_Trip1\", 1);\nflow.set(\"Pump_3_Trip1\", 0);\nflow.set(\"Pump_4_Trip1\", 1);\nflow.set(\"Pump_5_Trip1\", 0);\nflow.set(\"Pump_6_Trip1\", 1);\nflow.set(\"High_Pressure1\", 1);\nflow.set(\"Low_Pressure1\", 0);\nflow.set(\"Service_Interval_Reset1\", 1);\nflow.set(\"Sensor_Fail1\", 0);\nflow.set(\"Pump_1_Max_Time_Reach1\", 1);\nflow.set(\"Pump_2_Max_Time_Reach1\", 0);\nflow.set(\"Pump_3_Max_Time_Reach1\", 0);\nflow.set(\"Pump_4_Max_Time_Reach1\", 1);\nflow.set(\"Pump_5_Max_Time_Reach1\", 0);\nflow.set(\"Pump_6_Max_Time_Reach1\", 1);\nflow.set(\"Alarm_VFD_Overload1\", 1);\nflow.set(\"Dry_Run_Alarm1\", 0);\nflow.set(\"High_Pressure_Alarm1\", 1);\nflow.set(\"Low_Pressure_Alarm1\", 1);\nflow.set(\"Pressure_Sensor_Fail1\", 1);\nflow.set(\"Channel_2_Sensor_Fail1\", 0);\nflow.set(\"VFD_Dry_Run_Spare1\", 0);\nflow.set(\"Chut_Off_Pressure_Reach1\", 0);\nflow.set(\"Suction_Pr_Low1\", 0);\nflow.set(\"Emergency_Stopped1\", 0);\nflow.set(\"VFD_Communication_Fail1\", 0);\nflow.set(\"Pump_Service_Expired1\", 0);\nflow.set(\"Dry_Run_VFD_11\", 0);\nflow.set(\"Dry_Run_VFD_21\", 1);\nflow.set(\"Dry_Run_VFD_31\", 0);\nflow.set(\"Dry_Run_VFD_41\", 0);\nflow.set(\"Dry_Run_VFD_51\", 1);\nflow.set(\"Dry_Run_VFD_61\", 0);\nflow.set(\"System_Healthy_11\",0);\nflow.set(\"System_Healthy_21\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "3e001d861478b5c0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "function 157",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", 0);\nflow.set(\"Main_Contactor_Pump_11\", 0);\nflow.set(\"Main_Contactor_Pump_21\", 1);\nflow.set(\"Main_Contactor_Pump_31\", 0);\nflow.set(\"Main_Contactor_Pump_41\", 0);\nflow.set(\"Main_Contactor_Pump_51\", 0);\nflow.set(\"Main_Contactor_Pump_61\", 0);\nflow.set(\"Delta_Contactor_Pump_11\", 1);\nflow.set(\"Delta_Contactor_Pump_21\", 0);\nflow.set(\"Delta_Contactor_Pump_31\", 0);\nflow.set(\"Delta_Contactor_Pump_41\", 1);\nflow.set(\"Delta_Contactor_Pump_51\", 0);\nflow.set(\"Delta_Contactor_Pump_61\", 0);\nflow.set(\"VFD_Run_Spare1\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "8d549d78b34cdbec",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1620,
        "wires": [
            [
                "f1faa70bf1f18b22",
                "9fa91f3a18b746de",
                "2c1107898f8f9788",
                "6283ef19963039c0",
                "9e046dec848af17e",
                "76b1186fe316bfac",
                "8c6ba61e7edbf195",
                "7f084d0dd9278afd",
                "125e4be6794201e5",
                "3e001d861478b5c0",
                "73bf289de370e027"
            ]
        ]
    },
    {
        "id": "062b981dc5c8f391",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 158",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure1\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting1\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure1\"),\n    System_Flow: flow.get(\"System_Flow1\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure1\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw1\"),\n    Load_Percentage: flow.get(\"Load_Percentage1\"),\n    Current_Pump_1: flow.get(\"Current_Pump_11\"),\n    Current_Pump_2: flow.get(\"Current_Pump_21\"),\n    Current_Pump_3: flow.get(\"Current_Pump_31\"),\n    Current_Pump_4: flow.get(\"Current_Pump_41\"),\n    Current_Pump_5: flow.get(\"Current_Pump_51\"),\n    Current_Pump_6: flow.get(\"Current_Pump_61\"),\n    Power_Pump_1: flow.get(\"Power_Pump_11\"),\n    Power_Pump_2: flow.get(\"Power_Pump_21\"),\n    Power_Pump_3: flow.get(\"Power_Pump_31\"),\n    Power_Pump_4: flow.get(\"Power_Pump_41\"),\n    Power_Pump_5: flow.get(\"Power_Pump_51\"),\n    Power_Pump_6: flow.get(\"Power_Pump_61\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_11\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_11\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_21\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_21\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_31\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_31\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_41\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_41\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_51\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_51\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_61\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_61\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "f480fc709da67e3d",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "5dc20b8e0c7ef1dd"
            ]
        ]
    },
    {
        "id": "24af0ef449b142c4",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "",
        "topic": "office/KSB/2",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 1010,
        "y": 1540,
        "wires": []
    },
    {
        "id": "bf537cc3a85d3094",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 159",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump1\")+\"+\"+flow.get(\"Standby_Pump1\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_11\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_21\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_31\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_41\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_51\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_61\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach1\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach1\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach1\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach1\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach1\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach1\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip1\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip1\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip1\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip1\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip1\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip1\"),\n    High_Pressure: flow.get(\"High_Pressure1\"),\n    Low_Pressure: flow.get(\"Low_Pressure1\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset1\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail1\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach1\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach1\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach1\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach1\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach1\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach1\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "9d0fb0ccfd9f10cc",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 160",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload1\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm1\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm1\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm1\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail1\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail1\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare1\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach1\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low1\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped1\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail1\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired1\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_11\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_21\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_31\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_41\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_51\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_61\"),\n    System_Healthy_1: flow.get(\"System_Healthy_11\"),\n    System_Healthy_2: flow.get(\"System_Healthy_21\"),\n    Buzzer: flow.get(\"Buzzer1\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_11\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_21\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_31\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_41\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_51\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_61\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_11\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_21\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_31\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_41\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_51\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_61\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare1\"),\n    Output_Speed_1: flow.get(\"Output_Speed_11\"),\n    Output_Speed_2: flow.get(\"Output_Speed_21\"),\n    Output_Speed_3: flow.get(\"Output_Speed_31\"),\n    Output_Speed_4: flow.get(\"Output_Speed_41\"),\n    Output_Speed_5: flow.get(\"Output_Speed_51\"),\n    Output_Speed_6: flow.get(\"Output_Speed_61\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "801c8bb86c0cdad9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_11\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_21\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_31\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_41\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_51\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_61\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1620,
        "wires": [
            []
        ]
    },
    {
        "id": "3c23cdfb6bad8374",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type1\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "4ac712fc5252fc9e",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "debug 121",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1600,
        "wires": []
    },
    {
        "id": "401e85c6aa4f8c21",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump1\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "dabedf0a8c23a4af",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 161",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_12\", 80.33);\nflow.set(\"Current_Pump_22\", 50.33);\nflow.set(\"Current_Pump_32\", 90.33);\nflow.set(\"Current_Pump_42\", 30.33);\nflow.set(\"Current_Pump_52\", 10.33);\nflow.set(\"Current_Pump_62\", 20.33);\nflow.set(\"Power_Pump_12\", 60.33);\nflow.set(\"Power_Pump_22\", 70.33);\nflow.set(\"Power_Pump_32\", 40.33);\nflow.set(\"Power_Pump_42\", 25.33);\nflow.set(\"Power_Pump_52\", 20.33);\nflow.set(\"Power_Pump_62\", 15.33);\nflow.set(\"Output_Speed_12\", 24.33);\nflow.set(\"Output_Speed_22\", 48.33);\nflow.set(\"Output_Speed_32\", 42.33);\nflow.set(\"Output_Speed_42\", 53.33);\nflow.set(\"Output_Speed_52\", 25.33);\nflow.set(\"Output_Speed_62\", 20.33);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2100,
        "wires": [
            []
        ]
    },
    {
        "id": "c4de13be4bd0d885",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 162",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure2\",20.33);\nflow.set(\"Adaptive_Setting2\", 60.33);\nflow.set(\"Actual_Pressure2\", 9.33);\nflow.set(\"System_Flow2\", 11.35);\nflow.set(\"Suction_Pressure2\", 28.33);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "2d5592b6aeb0771c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 163",
        "func": "let data = msg.payload;\nflow.set(\"Status_Pump_12\", 0);\nflow.set(\"Status_Pump_22\", 0);\nflow.set(\"Status_Pump_32\", 1);\nflow.set(\"Status_Pump_42\", 0);\nflow.set(\"Status_Pump_52\", 2);\nflow.set(\"Status_Pump_62\", 3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2020,
        "wires": [
            []
        ]
    },
    {
        "id": "c8ac5d6bc2e573fb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 164",
        "func": "let data = msg.payload;\nflow.set(\"Kw2\", 80.22);\nflow.set(\"Load_Percentage2\", 50);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "b6dfb2b8295e507a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 165",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_12\", 20);\nflow.set(\"Run_Mint_Pump_22\", 9);\nflow.set(\"Run_Mint_Pump_32\", 4);\nflow.set(\"Run_Mint_Pump_42\", 1);\nflow.set(\"Run_Mint_Pump_52\", 0);\nflow.set(\"Run_Mint_Pump_62\", 5);\nflow.set(\"Run_Hr_Pump_12\", 10);\nflow.set(\"Run_Hr_Pump_22\", 8);\nflow.set(\"Run_Hr_Pump_32\", 7);\nflow.set(\"Run_Hr_Pump_42\", 3);\nflow.set(\"Run_Hr_Pump_52\", 7);\nflow.set(\"Run_Hr_Pump_62\", 5);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "68fdbd31d827c2ee",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 166",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump2\", 4);\nflow.set(\"Standby_Pump2\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "a3b93213eab1028b",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 167",
        "func": "let data = msg.payload;\nflow.set(\"System_Type2\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "ad9467ae62cebac4",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 168",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_12\", 3);\nflow.set(\"Count_Hr_Pump_22\", 6);\nflow.set(\"Count_Hr_Pump_32\", 8);\nflow.set(\"Count_Hr_Pump_42\", 1);\nflow.set(\"Count_Hr_Pump_52\", 11);\nflow.set(\"Count_Hr_Pump_62\", 10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "94511fa99dc2bbd3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 169",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_2_Start_Stop_Reach2\", 1);\nflow.set(\"Pump_3_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach2\", 1);\nflow.set(\"Pump_5_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_6_Start_Stop_Reach2\", 0);\nflow.set(\"Pump_1_Trip2\", 1);\nflow.set(\"Pump_2_Trip2\", 0);\nflow.set(\"Pump_3_Trip2\", 0);\nflow.set(\"Pump_4_Trip2\", 1);\nflow.set(\"Pump_5_Trip2\", 0);\nflow.set(\"Pump_6_Trip2\", 0);\nflow.set(\"High_Pressure2\", 0);\nflow.set(\"Low_Pressure2\", 0);\nflow.set(\"Service_Interval_Reset2\", 0);\nflow.set(\"Sensor_Fail2\", 1);\nflow.set(\"Pump_1_Max_Time_Reach2\", 0);\nflow.set(\"Pump_2_Max_Time_Reach2\", 0);\nflow.set(\"Pump_3_Max_Time_Reach2\", 0);\nflow.set(\"Pump_4_Max_Time_Reach2\", 1);\nflow.set(\"Pump_5_Max_Time_Reach2\", 0);\nflow.set(\"Pump_6_Max_Time_Reach2\", 0);\nflow.set(\"Alarm_VFD_Overload2\", 0);\nflow.set(\"Dry_Run_Alarm2\", 0);\nflow.set(\"High_Pressure_Alarm2\", 1);\nflow.set(\"Low_Pressure_Alarm2\", 0);\nflow.set(\"Pressure_Sensor_Fail2\", 0);\nflow.set(\"Channel_2_Sensor_Fail2\", 0);\nflow.set(\"VFD_Dry_Run_Spare2\", 0);\nflow.set(\"Chut_Off_Pressure_Reach2\", 0);\nflow.set(\"Suction_Pr_Low2\", 0);\nflow.set(\"Emergency_Stopped2\", 1);\nflow.set(\"VFD_Communication_Fail2\", 0);\nflow.set(\"Pump_Service_Expired2\", 0);\nflow.set(\"Dry_Run_VFD_12\", 0);\nflow.set(\"Dry_Run_VFD_22\", 0);\nflow.set(\"Dry_Run_VFD_32\", 0);\nflow.set(\"Dry_Run_VFD_42\", 0);\nflow.set(\"Dry_Run_VFD_52\", 0);\nflow.set(\"Dry_Run_VFD_62\", 1);\nflow.set(\"System_Healthy_12\",0);\nflow.set(\"System_Healthy_22\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2300,
        "wires": [
            []
        ]
    },
    {
        "id": "24d895ccb29106e9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "function 170",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer\", 0);\nflow.set(\"Main_Contactor_Pump_12\", 1);\nflow.set(\"Main_Contactor_Pump_22\", 0);\nflow.set(\"Main_Contactor_Pump_32\", 1);\nflow.set(\"Main_Contactor_Pump_42\", 1);\nflow.set(\"Main_Contactor_Pump_52\", 1);\nflow.set(\"Main_Contactor_Pump_62\", 1);\nflow.set(\"Delta_Contactor_Pump_12\", 0);\nflow.set(\"Delta_Contactor_Pump_22\", 1);\nflow.set(\"Delta_Contactor_Pump_32\", 0);\nflow.set(\"Delta_Contactor_Pump_42\", 0);\nflow.set(\"Delta_Contactor_Pump_52\", 0);\nflow.set(\"Delta_Contactor_Pump_62\", 1);\nflow.set(\"VFD_Run_Spare2\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "594806ec4d1fc5e2",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 2140,
        "wires": [
            [
                "c4de13be4bd0d885",
                "2d5592b6aeb0771c",
                "c8ac5d6bc2e573fb",
                "dabedf0a8c23a4af",
                "b6dfb2b8295e507a",
                "68fdbd31d827c2ee",
                "a3b93213eab1028b",
                "ad9467ae62cebac4",
                "94511fa99dc2bbd3",
                "24d895ccb29106e9",
                "06bfc371eb21679c"
            ]
        ]
    },
    {
        "id": "b8abc81106355d71",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 171",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure2\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting2\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure2\"),\n    System_Flow: flow.get(\"System_Flow2\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure2\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw2\"),\n    Load_Percentage: flow.get(\"Load_Percentage2\"),\n    Current_Pump_1: flow.get(\"Current_Pump_12\"),\n    Current_Pump_2: flow.get(\"Current_Pump_22\"),\n    Current_Pump_3: flow.get(\"Current_Pump_32\"),\n    Current_Pump_4: flow.get(\"Current_Pump_42\"),\n    Current_Pump_5: flow.get(\"Current_Pump_52\"),\n    Current_Pump_6: flow.get(\"Current_Pump_62\"),\n    Power_Pump_1: flow.get(\"Power_Pump_12\"),\n    Power_Pump_2: flow.get(\"Power_Pump_22\"),\n    Power_Pump_3: flow.get(\"Power_Pump_32\"),\n    Power_Pump_4: flow.get(\"Power_Pump_42\"),\n    Power_Pump_5: flow.get(\"Power_Pump_52\"),\n    Power_Pump_6: flow.get(\"Power_Pump_62\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_12\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_12\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_22\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_22\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_32\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_32\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_42\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_42\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_52\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_52\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_62\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_62\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "1f454f2dcef6011a",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 2060,
        "wires": [
            [
                "401cca24edf1a9d8"
            ]
        ]
    },
    {
        "id": "a5ded0533818dd82",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "",
        "topic": "office/KSB/3",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 990,
        "y": 2060,
        "wires": []
    },
    {
        "id": "350b3f998ec197bd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 172",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump2\")+\"+\"+flow.get(\"Standby_Pump2\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_12\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_22\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_32\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_42\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_52\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_62\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach2\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach2\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach2\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach2\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach2\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach2\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip2\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip2\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip2\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip2\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip2\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip2\"),\n    High_Pressure: flow.get(\"High_Pressure2\"),\n    Low_Pressure: flow.get(\"Low_Pressure2\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset2\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail2\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach2\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach2\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach2\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach2\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach2\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach2\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "d12b823f767363ba",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 173",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload2\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm2\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm2\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm2\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail2\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail2\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare2\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach2\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low2\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped2\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail2\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired2\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_12\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_22\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_32\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_42\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_52\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_62\"),\n    System_Healthy_1: flow.get(\"System_Healthy_12\"),\n    System_Healthy_2: flow.get(\"System_Healthy_22\"),\n    Buzzer: flow.get(\"Buzzer2\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_12\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_22\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_32\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_42\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_52\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_62\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_12\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_22\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_32\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_42\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_52\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_62\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare2\"),\n    Output_Speed_1: flow.get(\"Output_Speed_12\"),\n    Output_Speed_2: flow.get(\"Output_Speed_22\"),\n    Output_Speed_3: flow.get(\"Output_Speed_32\"),\n    Output_Speed_4: flow.get(\"Output_Speed_42\"),\n    Output_Speed_5: flow.get(\"Output_Speed_52\"),\n    Output_Speed_6: flow.get(\"Output_Speed_62\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "a9c6958c9982658b",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_12\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_22\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_32\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_42\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_52\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_6\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "236608c702ab58cd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type2\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "c423e9f4936733a6",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "debug 122",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 2120,
        "wires": []
    },
    {
        "id": "73aa9b7cecc22073",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump2\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2240,
        "wires": [
            []
        ]
    },
    {
        "id": "afc3cab9c81b73a7",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 174",
        "func": "let data = msg.payload;\nflow.set(\"Current_Pump_13\", 80.44);\nflow.set(\"Current_Pump_23\", 50.44);\nflow.set(\"Current_Pump_33\", 90.44);\nflow.set(\"Current_Pump_43\", 30.44);\nflow.set(\"Current_Pump_53\", 10.44);\nflow.set(\"Current_Pump_63\", 10.44);\nflow.set(\"Power_Pump_13\", 60.44);\nflow.set(\"Power_Pump_23\", 70.44);\nflow.set(\"Power_Pump_33\", 40.44);\nflow.set(\"Power_Pump_43\", 25.44);\nflow.set(\"Power_Pump_53\", 20.44);\nflow.set(\"Power_Pump_63\", 15.44);\nflow.set(\"Output_Speed_13\", 24.44);\nflow.set(\"Output_Speed_23\", 48.44);\nflow.set(\"Output_Speed_33\", 42.44);\nflow.set(\"Output_Speed_43\", 53.44);\nflow.set(\"Output_Speed_53\", 25.44);\nflow.set(\"Output_Speed_63\", 20.44);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "52e247f56bb2abd9",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 175",
        "func": "let data = msg.payload;\nflow.set(\"Set_Pressure3\",10.44);\nflow.set(\"Adaptive_Setting3\", 50.44);\nflow.set(\"Actual_Pressure3\", 8.44);\nflow.set(\"System_Flow3\", 35.11);\nflow.set(\"Suction_Pressure3\", 90.44);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2520,
        "wires": [
            []
        ]
    },
    {
        "id": "757176de3140a7a3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 176",
        "func": "let data = msg.payload;\nflow.set(\"Status_Pump_13\", 1);\nflow.set(\"Status_Pump_23\", 2);\nflow.set(\"Status_Pump_33\", 0);\nflow.set(\"Status_Pump_43\", 3);\nflow.set(\"Status_Pump_53\", 2);\nflow.set(\"Status_Pump_63\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "c796e0ca830b65b3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 177",
        "func": "let data = msg.payload;\nflow.set(\"Kw3\", 80.44);\nflow.set(\"Load_Percentage3\", 20);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "fe7bbcf8ba3a65f0",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 178",
        "func": "let data = msg.payload;\nflow.set(\"Run_Mint_Pump_13\", 20);\nflow.set(\"Run_Mint_Pump_23\", 9);\nflow.set(\"Run_Mint_Pump_33\", 4);\nflow.set(\"Run_Mint_Pump_43\", 1);\nflow.set(\"Run_Mint_Pump_53\", 0);\nflow.set(\"Run_Mint_Pump_63\", 5);\nflow.set(\"Run_Hr_Pump_13\", 10);\nflow.set(\"Run_Hr_Pump_23\", 8);\nflow.set(\"Run_Hr_Pump_33\", 7);\nflow.set(\"Run_Hr_Pump_43\", 3);\nflow.set(\"Run_Hr_Pump_53\", 7);\nflow.set(\"Run_Hr_Pump_63\", 5);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "6350608441faef53",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 179",
        "func": "let data = msg.payload;\nflow.set(\"Set_No_Of_Pump3\", 2);\nflow.set(\"Standby_Pump3\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "928dd49137398212",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 180",
        "func": "let data = msg.payload;\nflow.set(\"System_Type3\", 2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "da9f71b3e9e7d689",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 181",
        "func": "let data = msg.payload;\nflow.set(\"Count_Hr_Pump_13\", 3);\nflow.set(\"Count_Hr_Pump_23\", 6);\nflow.set(\"Count_Hr_Pump_33\", 8);\nflow.set(\"Count_Hr_Pump_43\", 1);\nflow.set(\"Count_Hr_Pump_53\", 11);\nflow.set(\"Count_Hr_Pump_63\", 10);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2800,
        "wires": [
            []
        ]
    },
    {
        "id": "c97605570775976a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 182",
        "func": "let data = msg.payload;\nflow.set(\"Pump_1_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_2_Start_Stop_Reach3\", 1);\nflow.set(\"Pump_3_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_4_Start_Stop_Reach3\", 1);\nflow.set(\"Pump_5_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_6_Start_Stop_Reach3\", 0);\nflow.set(\"Pump_1_Trip3\", 1);\nflow.set(\"Pump_2_Trip3\", 0);\nflow.set(\"Pump_3_Trip3\", 0);\nflow.set(\"Pump_4_Trip3\", 1);\nflow.set(\"Pump_5_Trip3\", 0);\nflow.set(\"Pump_6_Trip3\", 0);\nflow.set(\"High_Pressure3\", 0);\nflow.set(\"Low_Pressure3\", 0);\nflow.set(\"Service_Interval_Reset3\", 0);\nflow.set(\"Sensor_Fail3\", 1);\nflow.set(\"Pump_1_Max_Time_Reach3\", 0);\nflow.set(\"Pump_2_Max_Time_Reach3\", 0);\nflow.set(\"Pump_3_Max_Time_Reach3\", 0);\nflow.set(\"Pump_4_Max_Time_Reach3\", 1);\nflow.set(\"Pump_5_Max_Time_Reach3\", 0);\nflow.set(\"Pump_6_Max_Time_Reach3\", 0);\nflow.set(\"Alarm_VFD_Overload3\", 0);\nflow.set(\"Dry_Run_Alarm3\", 0);\nflow.set(\"High_Pressure_Alarm3\", 1);\nflow.set(\"Low_Pressure_Alarm3\", 0);\nflow.set(\"Pressure_Sensor_Fail3\", 0);\nflow.set(\"Channel_2_Sensor_Fail3\", 0);\nflow.set(\"VFD_Dry_Run_Spare3\", 0);\nflow.set(\"Chut_Off_Pressure_Reach3\", 0);\nflow.set(\"Suction_Pr_Low3\", 0);\nflow.set(\"Emergency_Stopped3\", 1);\nflow.set(\"VFD_Communication_Fail3\", 0);\nflow.set(\"Pump_Service_Expired3\", 0);\nflow.set(\"Dry_Run_VFD_13\", 0);\nflow.set(\"Dry_Run_VFD_23\", 0);\nflow.set(\"Dry_Run_VFD_33\", 0);\nflow.set(\"Dry_Run_VFD_43\", 0);\nflow.set(\"Dry_Run_VFD_53\", 0);\nflow.set(\"Dry_Run_VFD_63\", 1);\nflow.set(\"System_Healthy_13\",0);\nflow.set(\"System_Healthy_23\", 0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2840,
        "wires": [
            []
        ]
    },
    {
        "id": "ce1d041a42f33ed2",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "function 183",
        "func": "let data = msg.payload;\nflow.set(\"Buzzer3\", 0);\nflow.set(\"Main_Contactor_Pump_13\", 1);\nflow.set(\"Main_Contactor_Pump_23\", 0);\nflow.set(\"Main_Contactor_Pump_33\", 1);\nflow.set(\"Main_Contactor_Pump_43\", 1);\nflow.set(\"Main_Contactor_Pump_53\", 1);\nflow.set(\"Main_Contactor_Pump_63\", 1);\nflow.set(\"Delta_Contactor_Pump_13\", 0);\nflow.set(\"Delta_Contactor_Pump_23\", 1);\nflow.set(\"Delta_Contactor_Pump_33\", 0);\nflow.set(\"Delta_Contactor_Pump_43\", 0);\nflow.set(\"Delta_Contactor_Pump_53\", 0);\nflow.set(\"Delta_Contactor_Pump_63\", 1);\nflow.set(\"VFD_Run_Spare3\", 1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 2880,
        "wires": [
            []
        ]
    },
    {
        "id": "a24e07ec5f65fdce",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 2680,
        "wires": [
            [
                "52e247f56bb2abd9",
                "757176de3140a7a3",
                "c796e0ca830b65b3",
                "afc3cab9c81b73a7",
                "fe7bbcf8ba3a65f0",
                "6350608441faef53",
                "928dd49137398212",
                "da9f71b3e9e7d689",
                "c97605570775976a",
                "ce1d041a42f33ed2",
                "8502cb83a777cd54"
            ]
        ]
    },
    {
        "id": "3f930ca25898af7a",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 184",
        "func": "msg.payload = {\n    Set_Pressure: flow.get(\"Set_Pressure4\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting4\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure4\"),\n    System_Flow: flow.get(\"System_Flow4\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure4\"),\n    // Status_Pump_1: flow.get(\"Status_Pump_1\"),\n    // Status_Pump_2: flow.get(\"Status_Pump_2\"),\n    // Status_Pump_3: flow.get(\"Status_Pump_3\"),\n    // Status_Pump_4: flow.get(\"Status_Pump_4\"),\n    // Status_Pump_5: flow.get(\"Status_Pump_5\"),\n    // Status_Pump_6: flow.get(\"Status_Pump_6\"),\n    Kw: flow.get(\"Kw4\"),\n    Load_Percentage: flow.get(\"Load_Percentage4\"),\n    Current_Pump_1: flow.get(\"Current_Pump_14\"),\n    Current_Pump_2: flow.get(\"Current_Pump_24\"),\n    Current_Pump_3: flow.get(\"Current_Pump_34\"),\n    Current_Pump_4: flow.get(\"Current_Pump_44\"),\n    Current_Pump_5: flow.get(\"Current_Pump_54\"),\n    Current_Pump_6: flow.get(\"Current_Pump_64\"),\n    Power_Pump_1: flow.get(\"Power_Pump_14\"),\n    Power_Pump_2: flow.get(\"Power_Pump_24\"),\n    Power_Pump_3: flow.get(\"Power_Pump_34\"),\n    Power_Pump_4: flow.get(\"Power_Pump_44\"),\n    Power_Pump_5: flow.get(\"Power_Pump_54\"),\n    Power_Pump_6: flow.get(\"Power_Pump_64\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_14\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_14\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_24\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_24\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_34\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_34\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_44\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_44\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_54\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_54\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_64\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_64\")+\"Min\",\n    // Run_Mint_Pump_1: flow.get(\"Run_Mint_Pump_1\"),\n    // Run_Mint_Pump_2: flow.get(\"Run_Mint_Pump_2\"),\n    // Run_Mint_Pump_3: flow.get(\"Run_Mint_Pump_3\"),\n    // Run_Mint_Pump_4: flow.get(\"Run_Mint_Pump_4\"),\n    // Run_Mint_Pump_5: flow.get(\"Run_Mint_Pump_5\"),\n    // Run_Mint_Pump_6: flow.get(\"Run_Mint_Pump_6\"),\n    // Run_Hr_Pump_1: flow.get(\"Run_Hr_Pump_1\"),\n    // Run_Hr_Pump_2: flow.get(\"Run_Hr_Pump_2\"),\n    // Run_Hr_Pump_3: flow.get(\"Run_Hr_Pump_3\"),\n    // Run_Hr_Pump_4: flow.get(\"Run_Hr_Pump_4\"),\n    // Run_Hr_Pump_5: flow.get(\"Run_Hr_Pump_5\"),\n    // Run_Hr_Pump_6: flow.get(\"Run_Hr_Pump_6\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "bfd7d2470f0ba57b",
        "type": "inject",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 2600,
        "wires": [
            [
                "c06a3f8be61d19c1"
            ]
        ]
    },
    {
        "id": "fcf13b8ade4f9662",
        "type": "mqtt out",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "",
        "topic": "office/KSB/4",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5f0410d3f06f7681",
        "x": 990,
        "y": 2600,
        "wires": []
    },
    {
        "id": "d9a7ecebe4f633ef",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 185",
        "func": "msg.payload= {\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump4\")+\"+\"+flow.get(\"Standby_Pump4\"),\n    // Standby_Pump: flow.get(\"Standby_Pump\"),\n    // System_Type: flow.get(\"System_Type\"),\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_14\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_24\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_34\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_44\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_54\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_64\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach4\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach4\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach4\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach4\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach4\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach4\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip4\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip4\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip4\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip4\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip4\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip4\"),\n    High_Pressure: flow.get(\"High_Pressure4\"),\n    Low_Pressure: flow.get(\"Low_Pressure4\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset4\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail4\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach4\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach4\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach4\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach4\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach4\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach4\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "8c6e6b0b31ea01cb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "function 186",
        "func": "msg.payload = {\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload4\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm4\"),\n    High_Pressure_Alarm: flow.get(\"High_Pressure_Alarm4\"),\n    Low_Pressure_Alarm: flow.get(\"Low_Pressure_Alarm4\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail4\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail4\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare4\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reac4h\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low4\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped4\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail4\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired4\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_14\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_24\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_34\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_44\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_54\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_64\"),\n    System_Healthy_1: flow.get(\"System_Healthy_14\"),\n    System_Healthy_2: flow.get(\"System_Healthy_24\"),\n    Buzzer: flow.get(\"Buzzer4\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_14\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_24\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_34\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_44\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_54\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_64\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_14\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_24\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_34\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_44\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_54\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_64\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare4\"),\n    Output_Speed_1: flow.get(\"Output_Speed_14\"),\n    Output_Speed_2: flow.get(\"Output_Speed_24\"),\n    Output_Speed_3: flow.get(\"Output_Speed_34\"),\n    Output_Speed_4: flow.get(\"Output_Speed_44\"),\n    Output_Speed_5: flow.get(\"Output_Speed_54\"),\n    Output_Speed_6: flow.get(\"Output_Speed_64\")\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "e431b6c93cf4915f",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "Pump Status",
        "func": "let statusMap = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap[flow.get(\"Status_Pump_14\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap[flow.get(\"Status_Pump_24\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap[flow.get(\"Status_Pump_34\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap[flow.get(\"Status_Pump_44\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap[flow.get(\"Status_Pump_54\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap[flow.get(\"Status_Pump_64\")] || \"Unknown\";\n\nmsg.payload = {\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "68d55fe0d2bcffd3",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "System Type",
        "func": "let statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type4\")] || \"Unknown\";\n\nmsg.payload = {\n    System_Type: System_Type,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "c78f485209248f41",
        "type": "debug",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "debug 123",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 2660,
        "wires": []
    },
    {
        "id": "39b0f3dc340d37bb",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "name": "No. of Pump",
        "func": "let Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump4\"));\nlet pumps = {};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\nmsg.payload = pumps;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "5ec19074d2883167",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName\", \"KSB\");\nlet deviceName = flow.set(\"deviceName\", \"SITE A\");\nlet deviceType = flow.set(\"deviceType\", \"Pumps\");\n   flow.set( \"latitude\", 19.8791969)\nflow.set(\"longitude\", 73.9793069)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "585e906aeb4b2062",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "1be41bfb03a3b383",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName\");\nlet groupName = flow.get(\"groupName\");\nlet deviceName = flow.get(\"deviceName\");\nlet deviceType = flow.get(\"deviceType\");\n\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}`, pumps[`pump${i}`]);\n}\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_1\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_2\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_3\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_4\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_5\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_6\")] || \"Unknown\";\nlet latitude = flow.get(\"latitude\");\nlet longitude = flow.get(\"longitude\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    Set_Pressure: flow.get(\"Set_Pressure\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure\"),\n    System_Flow: flow.get(\"System_Flow\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure\"),\n    Kw: flow.get(\"Kw\"),\n    Load_Percentage: flow.get(\"Load_Percentage\"),\n    Current_Pump_1: flow.get(\"Current_Pump_1\"),\n    Current_Pump_2: flow.get(\"Current_Pump_2\"),\n    Current_Pump_3: flow.get(\"Current_Pump_3\"),\n    Current_Pump_4: flow.get(\"Current_Pump_4\"),\n    Current_Pump_5: flow.get(\"Current_Pump_5\"),\n    Current_Pump_6: flow.get(\"Current_Pump_6\"),\n    Power_Pump_1: flow.get(\"Power_Pump_1\"),\n    Power_Pump_2: flow.get(\"Power_Pump_2\"),\n    Power_Pump_3: flow.get(\"Power_Pump_3\"),\n    Power_Pump_4: flow.get(\"Power_Pump_4\"),\n    Power_Pump_5: flow.get(\"Power_Pump_5\"),\n    Power_Pump_6: flow.get(\"Power_Pump_6\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_1\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_1\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_2\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_2\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_3\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_3\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_4\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_4\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_5\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_5\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_6\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_6\")+\"Min\",\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump\")+\"W\"+\"+\"+flow.get(\"Standby_Pump\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_1\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_2\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_3\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_4\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_5\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_6\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip\"),\n    High_Pressure: flow.get(\"High_Pressure\"),\n    Low_Pressure: flow.get(\"Low_Pressure\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach\"),\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm\"),\n    High_Pressure_Alarm1: flow.get(\"High_Pressure_Alarm\"),\n    Low_Pressure_Alarm1: flow.get(\"Low_Pressure_Alarm\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_1\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_2\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_3\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_4\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_5\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_6\"),\n    System_Healthy_1: flow.get(\"System_Healthy_1\"),\n    System_Healthy_2: flow.get(\"System_Healthy_2\"),\n    Buzzer: flow.get(\"Buzzer\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_1\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_2\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_3\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_4\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_5\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_6\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_1\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_2\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_3\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_4\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_5\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_6\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare\"),\n    Output_Speed_1: flow.get(\"Output_Speed_1\"),\n    Output_Speed_2: flow.get(\"Output_Speed_2\"),\n    Output_Speed_3: flow.get(\"Output_Speed_3\"),\n    Output_Speed_4: flow.get(\"Output_Speed_4\"),\n    Output_Speed_5: flow.get(\"Output_Speed_5\"),\n    Output_Speed_6: flow.get(\"Output_Speed_6\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6,\n    System_Type: System_Type,\n    pump1:flow.get(\"pump1\"),\n    pump2:flow.get(\"pump2\"),\n    pump3:flow.get(\"pump3\"),\n    pump4:flow.get(\"pump4\"),\n    pump5:flow.get(\"pump5\"),\n    pump6:flow.get(\"pump6\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n    \n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 900,
        "wires": [
            [
                "1928bd3aedd7bfba",
                "4f3115d94159b6ce"
            ]
        ]
    },
    {
        "id": "73bf289de370e027",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "f417980e4201f509",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName1\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName1\", \"KSB\");\nlet deviceName = flow.set(\"deviceName1\", \"SITE B\");\nlet deviceType = flow.set(\"deviceType1\", \"Pumps\");\nflow.set(\"latitude1\", 19.14937775046027)\nflow.set(\"longitude1\", 73.00854723791102)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "06bfc371eb21679c",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "410eaebcc7fe632c",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName2\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName2\", \"KSB1\");\nlet deviceName = flow.set(\"deviceName2\", \"SITE C\");\nlet deviceType = flow.set(\"deviceType2\", \"Pumps\");\nflow.set(\"latitude2\", 19.203071275405737)\nflow.set(\"longitude2\", 73.8740658156572)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "8502cb83a777cd54",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "9687b13c30b407e1",
        "name": "Device details",
        "func": "let customerName = flow.set(\"customerName3\", \"KSB Limited\");\nlet groupName = flow.set(\"groupName3\", \"KSB1\");\nlet deviceName = flow.set(\"deviceName3\", \"SITE D\");\nlet deviceType = flow.set(\"deviceType3\", \"Pumps\");\nflow.set(\"latitude3\", 19.663468938030697)\nflow.set(\"longitude3\",  73.13271936573248)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "5dc20b8e0c7ef1dd",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "964d7c3fb11a2e95",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName1\");\nlet groupName = flow.get(\"groupName1\");\nlet deviceName = flow.get(\"deviceName1\");\nlet deviceType = flow.get(\"deviceType1\");\n\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump1\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}_1`, pumps[`pump${i}`]);\n}\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type1\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_11\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_21\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_31\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_41\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_51\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_61\")] || \"Unknown\";\n\n\n\nlet latitude = flow.get(\"latitude1\");\nlet longitude = flow.get(\"longitude1\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    Set_Pressure: flow.get(\"Set_Pressure1\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting1\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure1\"),\n    System_Flow: flow.get(\"System_Flow1\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure1\"),\n    Kw: flow.get(\"Kw1\"),\n    Load_Percentage: flow.get(\"Load_Percentage1\"),\n    Current_Pump_1: flow.get(\"Current_Pump_11\"),\n    Current_Pump_2: flow.get(\"Current_Pump_21\"),\n    Current_Pump_3: flow.get(\"Current_Pump_31\"),\n    Current_Pump_4: flow.get(\"Current_Pump_41\"),\n    Current_Pump_5: flow.get(\"Current_Pump_51\"),\n    Current_Pump_6: flow.get(\"Current_Pump_61\"),\n    Power_Pump_1: flow.get(\"Power_Pump_11\"),\n    Power_Pump_2: flow.get(\"Power_Pump_21\"),\n    Power_Pump_3: flow.get(\"Power_Pump_31\"),\n    Power_Pump_4: flow.get(\"Power_Pump_41\"),\n    Power_Pump_5: flow.get(\"Power_Pump_51\"),\n    Power_Pump_6: flow.get(\"Power_Pump_61\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_11\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_11\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_21\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_21\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_31\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_31\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_41\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_41\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_51\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_51\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_61\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_61\")+\"Min\",\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump1\")+\"W\"+\"+\"+flow.get(\"Standby_Pump1\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_11\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_21\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_31\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_41\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_51\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_61\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach1\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach1\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach1\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach1\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach1\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach1\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip1\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip1\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip1\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip1\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip1\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip1\"),\n    High_Pressure: flow.get(\"High_Pressure1\"),\n    Low_Pressure: flow.get(\"Low_Pressure1\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset1\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail1\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach1\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach1\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach1\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach1\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach1\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach1\"),\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload1\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm1\"),\n    High_Pressure_Alarm2: flow.get(\"High_Pressure_Alarm1\"),\n    Low_Pressure_Alarm2: flow.get(\"Low_Pressure_Alarm1\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail1\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail1\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare1\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach1\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low1\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped1\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail1\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired1\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_11\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_21\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_31\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_41\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_51\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_61\"),\n    System_Healthy_1: flow.get(\"System_Healthy_11\"),\n    System_Healthy_2: flow.get(\"System_Healthy_21\"),\n    Buzzer: flow.get(\"Buzzer1\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_11\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_21\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_31\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_41\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_51\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_61\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_11\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_21\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_31\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_41\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_51\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_61\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare1\"),\n    Output_Speed_1: flow.get(\"Output_Speed_11\"),\n    Output_Speed_2: flow.get(\"Output_Speed_21\"),\n    Output_Speed_3: flow.get(\"Output_Speed_31\"),\n    Output_Speed_4: flow.get(\"Output_Speed_41\"),\n    Output_Speed_5: flow.get(\"Output_Speed_51\"),\n    Output_Speed_6: flow.get(\"Output_Speed_61\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6,\n    System_Type: System_Type,\n    pump1:flow.get(\"pump1_1\"),\n    pump2:flow.get(\"pump2_1\"),\n    pump3:flow.get(\"pump3_1\"),\n    pump4:flow.get(\"pump4_1\"),\n    pump5:flow.get(\"pump5_1\"),\n    pump6:flow.get(\"pump6_1\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1540,
        "wires": [
            [
                "24af0ef449b142c4",
                "4ac712fc5252fc9e"
            ]
        ]
    },
    {
        "id": "401cca24edf1a9d8",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d675fac31ae93fea",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName2\");\nlet groupName = flow.get(\"groupName2\");\nlet deviceName = flow.get(\"deviceName2\");\nlet deviceType = flow.get(\"deviceType2\");\n\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump2\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}_2`, pumps[`pump${i}`]);\n}\n\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type2\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_12\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_22\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_32\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_42\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_52\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_6\")] || \"Unknown\";\n\n\n\n\nlet latitude = flow.get(\"latitude2\");\nlet longitude = flow.get(\"longitude2\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    Set_Pressure: flow.get(\"Set_Pressure2\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting2\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure2\"),\n    System_Flow: flow.get(\"System_Flow2\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure2\"),\n    Kw: flow.get(\"Kw2\"),\n    Load_Percentage: flow.get(\"Load_Percentage2\"),\n    Current_Pump_1: flow.get(\"Current_Pump_12\"),\n    Current_Pump_2: flow.get(\"Current_Pump_22\"),\n    Current_Pump_3: flow.get(\"Current_Pump_32\"),\n    Current_Pump_4: flow.get(\"Current_Pump_42\"),\n    Current_Pump_5: flow.get(\"Current_Pump_52\"),\n    Current_Pump_6: flow.get(\"Current_Pump_62\"),\n    Power_Pump_1: flow.get(\"Power_Pump_12\"),\n    Power_Pump_2: flow.get(\"Power_Pump_22\"),\n    Power_Pump_3: flow.get(\"Power_Pump_32\"),\n    Power_Pump_4: flow.get(\"Power_Pump_42\"),\n    Power_Pump_5: flow.get(\"Power_Pump_52\"),\n    Power_Pump_6: flow.get(\"Power_Pump_62\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_12\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_12\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_22\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_22\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_32\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_32\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_42\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_42\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_52\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_52\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_62\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_62\")+\"Min\",\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload2\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm2\"),\n    High_Pressure_Alarm3: flow.get(\"High_Pressure_Alarm2\"),\n    Low_Pressure_Alarm3: flow.get(\"Low_Pressure_Alarm2\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail2\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail2\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare2\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach2\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low2\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped2\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail2\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired2\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_12\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_22\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_32\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_42\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_52\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_62\"),\n    System_Healthy_1: flow.get(\"System_Healthy_12\"),\n    System_Healthy_2: flow.get(\"System_Healthy_22\"),\n    Buzzer: flow.get(\"Buzzer2\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_12\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_22\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_32\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_42\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_52\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_62\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_12\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_22\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_32\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_42\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_52\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_62\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare2\"),\n    Output_Speed_1: flow.get(\"Output_Speed_12\"),\n    Output_Speed_2: flow.get(\"Output_Speed_22\"),\n    Output_Speed_3: flow.get(\"Output_Speed_32\"),\n    Output_Speed_4: flow.get(\"Output_Speed_42\"),\n    Output_Speed_5: flow.get(\"Output_Speed_52\"),\n    Output_Speed_6: flow.get(\"Output_Speed_62\"),\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump2\")+\"W\"+\"+\"+flow.get(\"Standby_Pump2\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_12\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_22\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_32\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_42\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_52\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_62\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach2\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach2\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach2\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach2\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach2\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach2\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip2\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip2\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip2\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip2\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip2\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip2\"),\n    High_Pressure: flow.get(\"High_Pressure2\"),\n    Low_Pressure: flow.get(\"Low_Pressure2\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset2\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail2\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach2\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach2\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach2\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach2\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach2\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach2\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6, \n    System_Type: System_Type,\n    pump1:flow.get(\"pump1_2\"),\n    pump2:flow.get(\"pump2_2\"),\n    pump3:flow.get(\"pump3_2\"),\n    pump4:flow.get(\"pump4_2\"),\n    pump5:flow.get(\"pump5_2\"),\n    pump6:flow.get(\"pump6_2\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2060,
        "wires": [
            [
                "a5ded0533818dd82",
                "c423e9f4936733a6"
            ]
        ]
    },
    {
        "id": "c06a3f8be61d19c1",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "b3408edc82270c86",
        "name": "Device Details",
        "func": "let customerName = flow.get(\"customerName3\");\nlet groupName = flow.get(\"groupName3\");\nlet deviceName = flow.get(\"deviceName3\");\nlet deviceType = flow.get(\"deviceType3\");\n\nlet Set_No_Of_Pump = Number(flow.get(\"Set_No_Of_Pump3\"));\nlet pumps ={};\n\nfor (let i = 1; i <= 6; i++) {\n    pumps[`pump${i}`] = i <= Set_No_Of_Pump ? 1 : 0;\n}\n\n// Set each pump status individually in flow context\nfor (let i = 1; i <= 6; i++) {\n    flow.set(`pump${i}_3`, pumps[`pump${i}`]);\n}\n\n\nlet statusMap = {\n    0: \"KT\",\n    1: \"VT\",\n    2: \"VPT\",\n};\n\nlet System_Type = statusMap[flow.get(\"System_Type3\")] || \"Unknown\";\n\nlet statusMap1 = {\n    0: \"TRIP\",\n    1: \"RUNNING\",\n    2: \"OFF\",\n    3: \"UNDER MAINTENANCE\"\n};\n\nlet Status_Pump_1 = statusMap1[flow.get(\"Status_Pump_13\")] || \"Unknown\";\nlet Status_Pump_2 = statusMap1[flow.get(\"Status_Pump_23\")] || \"Unknown\";\nlet Status_Pump_3 = statusMap1[flow.get(\"Status_Pump_33\")] || \"Unknown\";\nlet Status_Pump_4 = statusMap1[flow.get(\"Status_Pump_43\")] || \"Unknown\";\nlet Status_Pump_5 = statusMap1[flow.get(\"Status_Pump_53\")] || \"Unknown\";\nlet Status_Pump_6 = statusMap1[flow.get(\"Status_Pump_63\")] || \"Unknown\";\n\n\n\n\nlet latitude = flow.get(\"latitude3\");\nlet longitude = flow.get(\"longitude3\");\nmsg.payload = {\n    deviceName,\n    deviceType,\n    customerName,\n    groupName,\n    latitude,\n    longitude,\n    Set_Pressure: flow.get(\"Set_Pressure3\"),\n    Adaptive_Setting: flow.get(\"Adaptive_Setting3\"),\n    Actual_Pressure: flow.get(\"Actual_Pressure3\"),\n    System_Flow: flow.get(\"System_Flow3\"),\n    Suction_Pressure: flow.get(\"Suction_Pressure3\"),\n    Kw: flow.get(\"Kw3\"),\n    Load_Percentage: flow.get(\"Load_Percentage3\"),\n    Current_Pump_1: flow.get(\"Current_Pump_13\"),\n    Current_Pump_2: flow.get(\"Current_Pump_23\"),\n    Current_Pump_3: flow.get(\"Current_Pump_33\"),\n    Current_Pump_4: flow.get(\"Current_Pump_43\"),\n    Current_Pump_5: flow.get(\"Current_Pump_53\"),\n    Current_Pump_6: flow.get(\"Current_Pump_63\"),\n    Power_Pump_1: flow.get(\"Power_Pump_13\"),\n    Power_Pump_2: flow.get(\"Power_Pump_23\"),\n    Power_Pump_3: flow.get(\"Power_Pump_33\"),\n    Power_Pump_4: flow.get(\"Power_Pump_43\"),\n    Power_Pump_5: flow.get(\"Power_Pump_53\"),\n    Power_Pump_6: flow.get(\"Power_Pump_63\"),\n    Run_Pump_1: flow.get(\"Run_Mint_Pump_13\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_13\")+\"Min\",\n    Run_Pump_2: flow.get(\"Run_Mint_Pump_23\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_23\")+\"Min\",\n    Run_Pump_3: flow.get(\"Run_Mint_Pump_33\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_33\")+\"Min\",\n    Run_Pump_4: flow.get(\"Run_Mint_Pump_43\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_43\")+\"Min\",\n    Run_Pump_5: flow.get(\"Run_Mint_Pump_53\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_53\")+\"Min\",\n    Run_Pump_6: flow.get(\"Run_Mint_Pump_63\")+\"Hr\"+\" \"+flow.get(\"Run_Hr_Pump_63\")+\"Min\",\n    Alarm_VFD_Overload: flow.get(\"Alarm_VFD_Overload3\"),\n    Dry_Run_Alarm: flow.get(\"Dry_Run_Alarm3\"),\n    High_Pressure_Alarm3: flow.get(\"High_Pressure_Alarm3\"),\n    Low_Pressure_Alarm3: flow.get(\"Low_Pressure_Alarm3\"),\n    Pressure_Sensor_Fail: flow.get(\"Pressure_Sensor_Fail3\"),\n    Channel_2_Sensor_Fail: flow.get(\"Channel_2_Sensor_Fail3\"),\n    VFD_Dry_Run_Spare: flow.get(\"VFD_Dry_Run_Spare3\"),\n    Chut_Off_Pressure_Reach: flow.get(\"Chut_Off_Pressure_Reach3\"),\n    Suction_Pr_Low: flow.get(\"Suction_Pr_Low3\"),\n    Emergency_Stopped: flow.get(\"Emergency_Stopped3\"),\n    VFD_Communication_Fail: flow.get(\"VFD_Communication_Fail3\"),\n    Pump_Service_Expired: flow.get(\"Pump_Service_Expired3\"),\n    Dry_Run_VFD_1: flow.get(\"Dry_Run_VFD_13\"),\n    Dry_Run_VFD_2: flow.get(\"Dry_Run_VFD_23\"),\n    Dry_Run_VFD_3: flow.get(\"Dry_Run_VFD_33\"),\n    Dry_Run_VFD_4: flow.get(\"Dry_Run_VFD_43\"),\n    Dry_Run_VFD_5: flow.get(\"Dry_Run_VFD_53\"),\n    Dry_Run_VFD_6: flow.get(\"Dry_Run_VFD_63\"),\n    System_Healthy_1: flow.get(\"System_Healthy_13\"),\n    System_Healthy_2: flow.get(\"System_Healthy_23\"),\n    Buzzer: flow.get(\"Buzzer3\"),\n    Main_Contactor_Pump_1: flow.get(\"Main_Contactor_Pump_13\"),\n    Main_Contactor_Pump_2: flow.get(\"Main_Contactor_Pump_23\"),\n    Main_Contactor_Pump_3: flow.get(\"Main_Contactor_Pump_33\"),\n    Main_Contactor_Pump_4: flow.get(\"Main_Contactor_Pump_43\"),\n    Main_Contactor_Pump_5: flow.get(\"Main_Contactor_Pump_53\"),\n    Main_Contactor_Pump_6: flow.get(\"Main_Contactor_Pump_63\"),\n    Delta_Contactor_Pump_1: flow.get(\"Delta_Contactor_Pump_13\"),\n    Delta_Contactor_Pump_2: flow.get(\"Delta_Contactor_Pump_23\"),\n    Delta_Contactor_Pump_3: flow.get(\"Delta_Contactor_Pump_33\"),\n    Delta_Contactor_Pump_4: flow.get(\"Delta_Contactor_Pump_43\"),\n    Delta_Contactor_Pump_5: flow.get(\"Delta_Contactor_Pump_53\"),\n    Delta_Contactor_Pump_6: flow.get(\"Delta_Contactor_Pump_63\"),\n    VFD_Run_Spare: flow.get(\"VFD_Run_Spare3\"),\n    Output_Speed_1: flow.get(\"Output_Speed_13\"),\n    Output_Speed_2: flow.get(\"Output_Speed_23\"),\n    Output_Speed_3: flow.get(\"Output_Speed_33\"),\n    Output_Speed_4: flow.get(\"Output_Speed_43\"),\n    Output_Speed_5: flow.get(\"Output_Speed_53\"),\n    Output_Speed_6: flow.get(\"Output_Speed_63\"),\n    Set_No_Of_Pump: flow.get(\"Set_No_Of_Pump3\")+\"W\"+\"+\"+flow.get(\"Standby_Pump3\")+\"S\",\n    Count_Hr_Pump_1: flow.get(\"Count_Hr_Pump_13\"),\n    Count_Hr_Pump_2: flow.get(\"Count_Hr_Pump_23\"),\n    Count_Hr_Pump_3: flow.get(\"Count_Hr_Pump_33\"),\n    Count_Hr_Pump_4: flow.get(\"Count_Hr_Pump_43\"),\n    Count_Hr_Pump_5: flow.get(\"Count_Hr_Pump_53\"),\n    Count_Hr_Pump_6: flow.get(\"Count_Hr_Pump_63\"),\n    Pump_1_Start_Stop_Reach: flow.get(\"Pump_1_Start_Stop_Reach3\"),\n    Pump_2_Start_Stop_Reach: flow.get(\"Pump_2_Start_Stop_Reach3\"),\n    Pump_3_Start_Stop_Reach: flow.get(\"Pump_3_Start_Stop_Reach3\"),\n    Pump_4_Start_Stop_Reach: flow.get(\"Pump_4_Start_Stop_Reach3\"),\n    Pump_5_Start_Stop_Reach: flow.get(\"Pump_5_Start_Stop_Reach3\"),\n    Pump_6_Start_Stop_Reach: flow.get(\"Pump_6_Start_Stop_Reach3\"),\n    Pump_1_Trip: flow.get(\"Pump_1_Trip3\"),\n    Pump_2_Trip: flow.get(\"Pump_2_Trip3\"),\n    Pump_3_Trip: flow.get(\"Pump_3_Trip3\"),\n    Pump_4_Trip: flow.get(\"Pump_4_Trip3\"),\n    Pump_5_Trip: flow.get(\"Pump_5_Trip3\"),\n    Pump_6_Trip: flow.get(\"Pump_6_Trip3\"),\n    High_Pressure: flow.get(\"High_Pressure3\"),\n    Low_Pressure: flow.get(\"Low_Pressure3\"),\n    Service_Interval_Reset: flow.get(\"Service_Interval_Reset3\"),\n    Sensor_Fail :flow.get(\"Sensor_Fail3\"),\n    Pump_1_Max_Time_Reach: flow.get(\"Pump_1_Max_Time_Reach3\"),\n    Pump_2_Max_Time_Reach: flow.get(\"Pump_2_Max_Time_Reach3\"),\n    Pump_3_Max_Time_Reach: flow.get(\"Pump_3_Max_Time_Reach3\"),\n    Pump_4_Max_Time_Reach: flow.get(\"Pump_4_Max_Time_Reach3\"),\n    Pump_5_Max_Time_Reach: flow.get(\"Pump_5_Max_Time_Reach3\"),\n    Pump_6_Max_Time_Reach: flow.get(\"Pump_6_Max_Time_Reach3\"),\n    Status_Pump_1: Status_Pump_1,\n    Status_Pump_2: Status_Pump_2,\n    Status_Pump_3: Status_Pump_3,\n    Status_Pump_4: Status_Pump_4,\n    Status_Pump_5: Status_Pump_5,\n    Status_Pump_6: Status_Pump_6, \n    System_Type: System_Type,\n    pump1:flow.get(\"pump1_3\"),\n    pump2:flow.get(\"pump2_3\"),\n    pump3:flow.get(\"pump3_3\"),\n    pump4:flow.get(\"pump4_3\"),\n    pump5:flow.get(\"pump5_3\"),\n    pump6:flow.get(\"pump6_3\"),\n    address: flow.get(\"address\"),\n    email: flow.get(\"email\")\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 2600,
        "wires": [
            [
                "fcf13b8ade4f9662",
                "c78f485209248f41"
            ]
        ]
    },
    {
        "id": "6502bd4e688a6bd1",
        "type": "function",
        "z": "4fcfb5eb3f2ab4ae",
        "g": "d02383e94e219d36",
        "name": "function 187",
        "func": "flow.set(\"address\",\"Plot No, Nashik - Pune Road, E3 & E4, MIDC, Sinnar, Maharashtra 422113\");\nflow.set(\"email\",\"contactusksbindia@ksb.com\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1340,
        "wires": [
            []
        ]
    }
]